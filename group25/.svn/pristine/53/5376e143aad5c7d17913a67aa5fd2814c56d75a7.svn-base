/* NAME: Xudong Li
   NSID:xul395
   Student Number:11206927
*/

/* NAME:Tong Wang   
   NSID: tow087 
   Student Number: 11201222
   CMPT 332 Term 1 2019
*/
#include <stdio.h>
#include <stdlib.h>
#include "list.h"

int main(int argc, char *argv[])
{	
	int i;
	int *first;
	int *current;
	int *temp;
	int testArray[100];
	
		
	/* create lists randomly */
	LIST* newList1 = ListCreate();
	LIST* newList2 = ListCreate();
	LIST* newList3 = ListCreate();
	LIST* newList4 = ListCreate();
	LIST* newList5;
	LIST* newList6;
	
	/*test whether all lists are created successfully*/
	if(!(newList1 -> used)){
		printf("Error in Test: List1 is not created\n");
		return 0;
	}
	if(!(newList2 -> used)){
		printf("Error in Test: List2 is not created\n");
		return 0;
	}
	if(!(newList3 -> used)){
		printf("Error in Test: List3 is not created\n");
		return 0;
	}
	if(!(newList4 -> used)){
		printf("Error in Test: List4 is not created\n");
		return 0;
	}
	
	/*test ListAdd: keep adding item after the end*/
	for(i=0;i<10;i++){
		testArray[i] = i;
		ListAdd(newList1,&testArray[i]);
	}

	
	/*test ListCount&ListAdd*/
	if(ListCount(newList1)!=10){
		printf("Error in Test ListCount&ListAdd: list size should be 0\n");
		return 0;
	}
	
	/*test ListFirst&ListAdd*/
	first = (int*)ListFirst(newList1);
	if(*first != 0){
		printf("Error in Test ListFirst&ListAdd: First item should be zero\n");
		return 0;
	}
	
	/*test ListNext&ListAdd*/
	for(i=1;i<10;i++){
		current = (int*)ListNext(newList1);
		if(*current != i){
			printf("Error in Test ListNext&ListAdd: current item should be %d, but not %d\n",i,*current);
			return 0;
		}
	}
	
	/*test ListNext: go beyond the end*/
	current = (int*)ListNext(newList1);
	if(current != NULL){
		printf("Error in Test ListNext: beyond the end; NULL should return\n");
		return 0;
	}
	
	/*test ListAdd: add item after current item (add item between 
	current and current->next & current->next != NULL)*/
	testArray[10] = 10;
	ListFirst(newList1);
	i = ListAdd(newList1,&testArray[10]);
	if(i!=0){
		printf("Error in Test ListAdd: 0 should return\n");
		return 0;
	}
	current = (int *)ListCurr(newList1);
	if(*current!=10){
		printf("Error in Test ListAdd&ListCurr: 10 should still be first item\n");
		return 0;
	}

	
	current = (int*)ListFirst(newList1);
	if(*current!=0){
		printf("Error in Test ListAdd&ListFirst: 0 should still be first item\n");
		return 0;
	}
	
	current = (int*)ListNext(newList1);
	if(*current!=10){
		printf("Error in Test ListAdd&ListNext: 10 should still be next item\n");
		return 0;
	}
	
	current = (int*)ListNext(newList1);
	if(*current!=1){
		printf("Error in Test ListAdd&ListNext: 1 should still be next item after adding 10\n");
		return 0;
	}
	
	current = (int*)ListPrev(newList1);
	if(*current!=10){
		printf("Error in Test ListAdd&ListPrev: 10 should be prev item\n");
		return 0;
	}
	
	if(ListCount(newList1)!=11){
		printf("Error in Test ListCount&ListCount: list size should be 11\n");
		return 0;
	}
	
	/*test ListInsert: insert when current is the first Item*/
	ListFirst(newList1);
	testArray[11] = 11;
	i = ListInsert(newList1,&testArray[11]);
	if(i!=0){
		printf("Error in Test ListInsert: 0 should return\n");
		return 0;
	}
	current = (int *)ListCurr(newList1);
	if(*current != 11){
		printf("Error in Test ListInsert&ListCurr: 11 should be current item\n");
		return 0;	
	}
	current = (int*)(newList1->first->data);
	if(*current != 11){
		printf("Error in Test ListInsert: 11 should be first item\n");
		return 0;	
	}
	current = (int*)(newList1->first->next->data);
	if(*current != 0){
		printf("Error in Test ListInsert: 0 should be next item of 11\n");
		return 0;	
	}
	if(ListCount(newList1)!=12){
		printf("Error in Test ListCount&ListCount: list size should be 12\n");
		return 0;
	}
	
	/*test ListInsert: insert when current is the last Item*/
	current = (int*)ListLast(newList1);
	if(*current != 9){
		printf("Error in Test ListLast: 9 should be current item\n");
		return 0;	
	}
	testArray[12] = 12;
	i = ListInsert(newList1,&testArray[12]);
	if(i!=0){
		printf("Error in Test ListInsert from last item: 0 should return\n");
		return 0;
	}	
	current = (int *)ListCurr(newList1);
	if(*current != 12){
		printf("Error in Test ListInsert&ListCurr: 12 should be current item\n");
		return 0;	
	}
	current = (int*)(newList1->last->prev->data);
	if(*current != 12){
		printf("Error in Test ListInsert: 12 should be item before the last\n");
		return 0;	
	}	
	current = (int*)(newList1->last->prev->prev->data);
	if(*current != 8){
		printf("Error in Test ListInsert: 8 should be item before the last\n");
		return 0;	
	}
	current = (int*)(newList1->last->prev->prev->next->data);
	if(*current != 12){
		printf("Error in Test ListInsert: 12 should be item after 8\n");
		return 0;	
	}
	current = (int*)(newList1->last->prev->prev->next->next->data);
	if(*current != 9){
		printf("Error in Test ListInsert: 9 should be item after 12\n");
		return 0;	
	}
	
	if(ListCount(newList1)!=13){
		printf("Error in Test ListCount&ListCount: list size should be 13\n");
		return 0;
	}	
	
	/*test ListAppend*/	
	testArray[13] = 13;
	i = ListAppend(newList1,&testArray[13]);
	if(i!=0){
		printf("Error in Test ListAppend from last item: 0 should return\n");
		return 0;
	}	
	current = (int *)ListCurr(newList1);
	if(*current != 13){
		printf("Error in Test ListAppend&ListCurr: 13 should be current item\n");
		return 0;	
	}
	current = (int *)(newList1->last->data);
	if(*current != 13){
		printf("Error in Test ListAppend: 13 should be last item\n");
		return 0;	
	}
	current = (int *)(newList1->last->prev->data);
	if(*current != 9){
		printf("Error in Test ListAppend: 12 should be item before the last\n");
		return 0;	
	}		
	current = (int *)(newList1->last->prev->next->data);
	if(*current != 13){
		printf("Error in Test ListAppend: 13 should be item after 12\n");
		return 0;	
	}
	if(ListCount(newList1)!=14){
		printf("Error in Test ListCount&ListCount: list size should be 14\n");
		return 0;
	}		
	
	/*test ListPrepend*/
	testArray[14] = 14;
	i = ListPrepend(newList1,&testArray[14]);
	if(i!=0){
		printf("Error in Test ListPrepend from last item: 0 should return\n");
		return 0;
	}	
	current = (int *)ListCurr(newList1);
	if(*current != 14){
		printf("Error in Test ListPrepend&ListCurr: 14 should be current item\n");
		return 0;	
	}
	current = (int *)(newList1->first->data);
	if(*current != 14){
		printf("Error in Test ListPrepend: 13 should be firsr item\n");
		return 0;	
	}
	current = (int *)(newList1->first->next->data);
	if(*current != 11){
		printf("Error in Test ListPrepend: 11 should be item after the first\n");
		return 0;	
	}		
	current = (int *)(newList1->first->next->prev->data);
	if(*current != 14){
		printf("Error in Test ListPrepend: 14 should be item before 11\n");
		return 0;	
	}
	if(ListCount(newList1)!=15){
		printf("Error in Test ListPrepend&ListCount: list size should be 15\n");
		return 0;
	}
	
	/*test ListConcat*/	
	testArray[15] = 15;
	i = ListPrepend(newList2,&testArray[15]);
	if(i!=0){
		printf("Error in Test ListPrepend from last item: 0 should return\n");
		return 0;
	}
	current = (int *)ListCurr(newList1);
	ListConcat(newList1,newList2);
	temp = (int *)ListCurr(newList1);
	if(*current != *temp){
		printf("Error in Test ListConcat: current item should be same as previous list1\n");
		return 0;	
	}
	current = (int *)(newList1->last->data);
	if(*current != 15){
		printf("Error in Test ListConcat: 15 should be last item now\n");
		return 0;	
	}
	current = (int *)(newList1->last->prev->data);
	if(*current != 13){
		printf("Error in Test ListConcat: 13 should be item before 15\n");
		return 0;	
	}
	current = (int *)(newList1->last->prev->next->data);
	if(*current != 15){
		printf("Error in Test ListConcat: 15 should be item after 13\n");
		return 0;	
	}		
	if(ListCount(newList1) != 16){
		printf("Error in Test ListConcat: size of list1 should be 16\n");
		return 0;	
	}
	if(newList2->used){
		printf("Error in Test ListConcat: newList2 should not exist\n");
		return 0;	
	}
	newList5 = ListCreate();
	if(newList5!=newList2){
		printf("Error in Test ListConcat: memory for newList2 should be used by newList5\n");
		return 0;	
	}
	newList6 = ListCreate();
	if((newList4+1)!=newList6){
		printf("Error in Test ListConcat: original space for next list created should after newList4\n");
		return 0;	
	}
		
	printf("\nTest Errors of routines below: Error message should be printed out\n\n");		
	
	/* given NULL pointer of list to show Errors. Except ListCreate ,*/
	/* all should report error*/
	ListCount(NULL);
	ListFirst(NULL);
	ListLast(NULL);
	ListNext(NULL);
	ListPrev(NULL);
	ListCurr(NULL);
	ListAdd(NULL,NULL);
	ListInsert(NULL,NULL);
	ListAppend(NULL,NULL);
	ListPrepend(NULL,NULL);
	ListRemove(NULL);
 	ListConcat(NULL,NULL);
 	ListFree(NULL, NULL);
	ListTrim(NULL);
	ListSearch(NULL, NULL, NULL);
	
	return 0;
}
