
kernel/kernel:     file format elf64-littleriscv


Disassembly of section .text:

0000000080000000 <_entry>:
    80000000:	00009117          	auipc	sp,0x9
    80000004:	80010113          	addi	sp,sp,-2048 # 80008800 <stack0>
    80000008:	6505                	lui	a0,0x1
    8000000a:	f14025f3          	csrr	a1,mhartid
    8000000e:	0585                	addi	a1,a1,1
    80000010:	02b50533          	mul	a0,a0,a1
    80000014:	912a                	add	sp,sp,a0
    80000016:	070000ef          	jal	ra,80000086 <start>

000000008000001a <junk>:
    8000001a:	a001                	j	8000001a <junk>

000000008000001c <timerinit>:
/* which arrive at timervec in kernelvec.S, */
/* which turns them into software interrupts for */
/* devintr() in trap.c. */
void
timerinit()
{
    8000001c:	1141                	addi	sp,sp,-16
    8000001e:	e422                	sd	s0,8(sp)
    80000020:	0800                	addi	s0,sp,16
/* which hart (core) is this? */
static inline uint64
r_mhartid()
{
  uint64 x;
  asm volatile("csrr %0, mhartid" : "=r" (x) );
    80000022:	f14027f3          	csrr	a5,mhartid
  /* each CPU has a separate source of timer interrupts. */
  int id = r_mhartid();

  /* ask the CLINT for a timer interrupt. */
  int interval = 1000000; /* cycles; about 1/10th second in qemu. */
  *(uint64*)CLINT_MTIMECMP(id) = *(uint64*)CLINT_MTIME + interval;
    80000026:	0037969b          	slliw	a3,a5,0x3
    8000002a:	02004737          	lui	a4,0x2004
    8000002e:	96ba                	add	a3,a3,a4
    80000030:	0200c737          	lui	a4,0x200c
    80000034:	ff873603          	ld	a2,-8(a4) # 200bff8 <_entry-0x7dff4008>
    80000038:	000f4737          	lui	a4,0xf4
    8000003c:	24070713          	addi	a4,a4,576 # f4240 <_entry-0x7ff0bdc0>
    80000040:	963a                	add	a2,a2,a4
    80000042:	e290                	sd	a2,0(a3)

  /* prepare information in scratch[] for timervec. */
  /* scratch[0..3] : space for timervec to save registers. */
  /* scratch[4] : address of CLINT MTIMECMP register. */
  /* scratch[5] : desired interval (in cycles) between timer interrupts. */
  uint64 *scratch = &mscratch0[32 * id];
    80000044:	0057979b          	slliw	a5,a5,0x5
    80000048:	078e                	slli	a5,a5,0x3
    8000004a:	00008617          	auipc	a2,0x8
    8000004e:	fb660613          	addi	a2,a2,-74 # 80008000 <mscratch0>
    80000052:	97b2                	add	a5,a5,a2
  scratch[4] = CLINT_MTIMECMP(id);
    80000054:	f394                	sd	a3,32(a5)
  scratch[5] = interval;
    80000056:	f798                	sd	a4,40(a5)
}

static inline void 
w_mscratch(uint64 x)
{
  asm volatile("csrw mscratch, %0" : : "r" (x));
    80000058:	34079073          	csrw	mscratch,a5
  asm volatile("csrw mtvec, %0" : : "r" (x));
    8000005c:	00005797          	auipc	a5,0x5
    80000060:	7e478793          	addi	a5,a5,2020 # 80005840 <timervec>
    80000064:	30579073          	csrw	mtvec,a5
  asm volatile("csrr %0, mstatus" : "=r" (x) );
    80000068:	300027f3          	csrr	a5,mstatus

  /* set the machine-mode trap handler. */
  w_mtvec((uint64)timervec);

  /* enable machine-mode interrupts. */
  w_mstatus(r_mstatus() | MSTATUS_MIE);
    8000006c:	0087e793          	ori	a5,a5,8
  asm volatile("csrw mstatus, %0" : : "r" (x));
    80000070:	30079073          	csrw	mstatus,a5
  asm volatile("csrr %0, mie" : "=r" (x) );
    80000074:	304027f3          	csrr	a5,mie

  /* enable machine-mode timer interrupts. */
  w_mie(r_mie() | MIE_MTIE);
    80000078:	0807e793          	ori	a5,a5,128
  asm volatile("csrw mie, %0" : : "r" (x));
    8000007c:	30479073          	csrw	mie,a5
}
    80000080:	6422                	ld	s0,8(sp)
    80000082:	0141                	addi	sp,sp,16
    80000084:	8082                	ret

0000000080000086 <start>:
{
    80000086:	1141                	addi	sp,sp,-16
    80000088:	e406                	sd	ra,8(sp)
    8000008a:	e022                	sd	s0,0(sp)
    8000008c:	0800                	addi	s0,sp,16
  asm volatile("csrr %0, mstatus" : "=r" (x) );
    8000008e:	300027f3          	csrr	a5,mstatus
  x &= ~MSTATUS_MPP_MASK;
    80000092:	7779                	lui	a4,0xffffe
    80000094:	7ff70713          	addi	a4,a4,2047 # ffffffffffffe7ff <ticks+0xffffffff7ffd97e7>
    80000098:	8ff9                	and	a5,a5,a4
  x |= MSTATUS_MPP_S;
    8000009a:	6705                	lui	a4,0x1
    8000009c:	80070713          	addi	a4,a4,-2048 # 800 <_entry-0x7ffff800>
    800000a0:	8fd9                	or	a5,a5,a4
  asm volatile("csrw mstatus, %0" : : "r" (x));
    800000a2:	30079073          	csrw	mstatus,a5
  asm volatile("csrw mepc, %0" : : "r" (x));
    800000a6:	00001797          	auipc	a5,0x1
    800000aa:	c7678793          	addi	a5,a5,-906 # 80000d1c <main>
    800000ae:	34179073          	csrw	mepc,a5
  asm volatile("csrw satp, %0" : : "r" (x));
    800000b2:	4781                	li	a5,0
    800000b4:	18079073          	csrw	satp,a5
  asm volatile("csrw medeleg, %0" : : "r" (x));
    800000b8:	67c1                	lui	a5,0x10
    800000ba:	17fd                	addi	a5,a5,-1
    800000bc:	30279073          	csrw	medeleg,a5
  asm volatile("csrw mideleg, %0" : : "r" (x));
    800000c0:	30379073          	csrw	mideleg,a5
  timerinit();
    800000c4:	00000097          	auipc	ra,0x0
    800000c8:	f58080e7          	jalr	-168(ra) # 8000001c <timerinit>
  asm volatile("csrr %0, mhartid" : "=r" (x) );
    800000cc:	f14027f3          	csrr	a5,mhartid
  w_tp(id);
    800000d0:	2781                	sext.w	a5,a5
}

static inline void 
w_tp(uint64 x)
{
  asm volatile("mv tp, %0" : : "r" (x));
    800000d2:	823e                	mv	tp,a5
  asm volatile("mret");
    800000d4:	30200073          	mret
}
    800000d8:	60a2                	ld	ra,8(sp)
    800000da:	6402                	ld	s0,0(sp)
    800000dc:	0141                	addi	sp,sp,16
    800000de:	8082                	ret

00000000800000e0 <consoleread>:
/* user_dist indicates whether dst is a user */
/* or kernel address. */
/* */
int
consoleread(int user_dst, uint64 dst, int n)
{
    800000e0:	7119                	addi	sp,sp,-128
    800000e2:	fc86                	sd	ra,120(sp)
    800000e4:	f8a2                	sd	s0,112(sp)
    800000e6:	f4a6                	sd	s1,104(sp)
    800000e8:	f0ca                	sd	s2,96(sp)
    800000ea:	ecce                	sd	s3,88(sp)
    800000ec:	e8d2                	sd	s4,80(sp)
    800000ee:	e4d6                	sd	s5,72(sp)
    800000f0:	e0da                	sd	s6,64(sp)
    800000f2:	fc5e                	sd	s7,56(sp)
    800000f4:	f862                	sd	s8,48(sp)
    800000f6:	f466                	sd	s9,40(sp)
    800000f8:	f06a                	sd	s10,32(sp)
    800000fa:	ec6e                	sd	s11,24(sp)
    800000fc:	0100                	addi	s0,sp,128
    800000fe:	8b2a                	mv	s6,a0
    80000100:	8aae                	mv	s5,a1
    80000102:	8a32                	mv	s4,a2
  uint target;
  int c;
  char cbuf;

  target = n;
    80000104:	00060b9b          	sext.w	s7,a2
  acquire(&cons.lock);
    80000108:	00010517          	auipc	a0,0x10
    8000010c:	6f850513          	addi	a0,a0,1784 # 80010800 <cons>
    80000110:	00001097          	auipc	ra,0x1
    80000114:	9be080e7          	jalr	-1602(ra) # 80000ace <acquire>
  while(n > 0){
    /* wait until interrupt handler has put some */
    /* input into cons.buffer. */
    while(cons.r == cons.w){
    80000118:	00010497          	auipc	s1,0x10
    8000011c:	6e848493          	addi	s1,s1,1768 # 80010800 <cons>
      if(myproc()->killed){
        release(&cons.lock);
        return -1;
      }
      sleep(&cons.r, &cons.lock);
    80000120:	89a6                	mv	s3,s1
    80000122:	00010917          	auipc	s2,0x10
    80000126:	77690913          	addi	s2,s2,1910 # 80010898 <cons+0x98>
    }

    c = cons.buf[cons.r++ % INPUT_BUF];

    if(c == C('D')){  /* end-of-file */
    8000012a:	4c91                	li	s9,4
      break;
    }

    /* copy the input byte to the user-space buffer. */
    cbuf = c;
    if(either_copyout(user_dst, dst, &cbuf, 1) == -1)
    8000012c:	5d7d                	li	s10,-1
      break;

    dst++;
    --n;

    if(c == '\n'){
    8000012e:	4da9                	li	s11,10
  while(n > 0){
    80000130:	07405863          	blez	s4,800001a0 <consoleread+0xc0>
    while(cons.r == cons.w){
    80000134:	0984a783          	lw	a5,152(s1)
    80000138:	09c4a703          	lw	a4,156(s1)
    8000013c:	02f71463          	bne	a4,a5,80000164 <consoleread+0x84>
      if(myproc()->killed){
    80000140:	00001097          	auipc	ra,0x1
    80000144:	69c080e7          	jalr	1692(ra) # 800017dc <myproc>
    80000148:	591c                	lw	a5,48(a0)
    8000014a:	e7b5                	bnez	a5,800001b6 <consoleread+0xd6>
      sleep(&cons.r, &cons.lock);
    8000014c:	85ce                	mv	a1,s3
    8000014e:	854a                	mv	a0,s2
    80000150:	00002097          	auipc	ra,0x2
    80000154:	e62080e7          	jalr	-414(ra) # 80001fb2 <sleep>
    while(cons.r == cons.w){
    80000158:	0984a783          	lw	a5,152(s1)
    8000015c:	09c4a703          	lw	a4,156(s1)
    80000160:	fef700e3          	beq	a4,a5,80000140 <consoleread+0x60>
    c = cons.buf[cons.r++ % INPUT_BUF];
    80000164:	0017871b          	addiw	a4,a5,1
    80000168:	08e4ac23          	sw	a4,152(s1)
    8000016c:	07f7f713          	andi	a4,a5,127
    80000170:	9726                	add	a4,a4,s1
    80000172:	01874703          	lbu	a4,24(a4)
    80000176:	00070c1b          	sext.w	s8,a4
    if(c == C('D')){  /* end-of-file */
    8000017a:	079c0663          	beq	s8,s9,800001e6 <consoleread+0x106>
    cbuf = c;
    8000017e:	f8e407a3          	sb	a4,-113(s0)
    if(either_copyout(user_dst, dst, &cbuf, 1) == -1)
    80000182:	4685                	li	a3,1
    80000184:	f8f40613          	addi	a2,s0,-113
    80000188:	85d6                	mv	a1,s5
    8000018a:	855a                	mv	a0,s6
    8000018c:	00002097          	auipc	ra,0x2
    80000190:	04c080e7          	jalr	76(ra) # 800021d8 <either_copyout>
    80000194:	01a50663          	beq	a0,s10,800001a0 <consoleread+0xc0>
    dst++;
    80000198:	0a85                	addi	s5,s5,1
    --n;
    8000019a:	3a7d                	addiw	s4,s4,-1
    if(c == '\n'){
    8000019c:	f9bc1ae3          	bne	s8,s11,80000130 <consoleread+0x50>
      /* a whole line has arrived, return to */
      /* the user-level read(). */
      break;
    }
  }
  release(&cons.lock);
    800001a0:	00010517          	auipc	a0,0x10
    800001a4:	66050513          	addi	a0,a0,1632 # 80010800 <cons>
    800001a8:	00001097          	auipc	ra,0x1
    800001ac:	97a080e7          	jalr	-1670(ra) # 80000b22 <release>

  return target - n;
    800001b0:	414b853b          	subw	a0,s7,s4
    800001b4:	a811                	j	800001c8 <consoleread+0xe8>
        release(&cons.lock);
    800001b6:	00010517          	auipc	a0,0x10
    800001ba:	64a50513          	addi	a0,a0,1610 # 80010800 <cons>
    800001be:	00001097          	auipc	ra,0x1
    800001c2:	964080e7          	jalr	-1692(ra) # 80000b22 <release>
        return -1;
    800001c6:	557d                	li	a0,-1
}
    800001c8:	70e6                	ld	ra,120(sp)
    800001ca:	7446                	ld	s0,112(sp)
    800001cc:	74a6                	ld	s1,104(sp)
    800001ce:	7906                	ld	s2,96(sp)
    800001d0:	69e6                	ld	s3,88(sp)
    800001d2:	6a46                	ld	s4,80(sp)
    800001d4:	6aa6                	ld	s5,72(sp)
    800001d6:	6b06                	ld	s6,64(sp)
    800001d8:	7be2                	ld	s7,56(sp)
    800001da:	7c42                	ld	s8,48(sp)
    800001dc:	7ca2                	ld	s9,40(sp)
    800001de:	7d02                	ld	s10,32(sp)
    800001e0:	6de2                	ld	s11,24(sp)
    800001e2:	6109                	addi	sp,sp,128
    800001e4:	8082                	ret
      if(n < target){
    800001e6:	000a071b          	sext.w	a4,s4
    800001ea:	fb777be3          	bgeu	a4,s7,800001a0 <consoleread+0xc0>
        cons.r--;
    800001ee:	00010717          	auipc	a4,0x10
    800001f2:	6af72523          	sw	a5,1706(a4) # 80010898 <cons+0x98>
    800001f6:	b76d                	j	800001a0 <consoleread+0xc0>

00000000800001f8 <consputc>:
  if(panicked){
    800001f8:	00025797          	auipc	a5,0x25
    800001fc:	e087a783          	lw	a5,-504(a5) # 80025000 <end>
    80000200:	c391                	beqz	a5,80000204 <consputc+0xc>
    for(;;)
    80000202:	a001                	j	80000202 <consputc+0xa>
{
    80000204:	1141                	addi	sp,sp,-16
    80000206:	e406                	sd	ra,8(sp)
    80000208:	e022                	sd	s0,0(sp)
    8000020a:	0800                	addi	s0,sp,16
  if(c == BACKSPACE){
    8000020c:	10000793          	li	a5,256
    80000210:	00f50a63          	beq	a0,a5,80000224 <consputc+0x2c>
    uartputc(c);
    80000214:	00000097          	auipc	ra,0x0
    80000218:	5d2080e7          	jalr	1490(ra) # 800007e6 <uartputc>
}
    8000021c:	60a2                	ld	ra,8(sp)
    8000021e:	6402                	ld	s0,0(sp)
    80000220:	0141                	addi	sp,sp,16
    80000222:	8082                	ret
    uartputc('\b'); uartputc(' '); uartputc('\b');
    80000224:	4521                	li	a0,8
    80000226:	00000097          	auipc	ra,0x0
    8000022a:	5c0080e7          	jalr	1472(ra) # 800007e6 <uartputc>
    8000022e:	02000513          	li	a0,32
    80000232:	00000097          	auipc	ra,0x0
    80000236:	5b4080e7          	jalr	1460(ra) # 800007e6 <uartputc>
    8000023a:	4521                	li	a0,8
    8000023c:	00000097          	auipc	ra,0x0
    80000240:	5aa080e7          	jalr	1450(ra) # 800007e6 <uartputc>
    80000244:	bfe1                	j	8000021c <consputc+0x24>

0000000080000246 <consolewrite>:
{
    80000246:	715d                	addi	sp,sp,-80
    80000248:	e486                	sd	ra,72(sp)
    8000024a:	e0a2                	sd	s0,64(sp)
    8000024c:	fc26                	sd	s1,56(sp)
    8000024e:	f84a                	sd	s2,48(sp)
    80000250:	f44e                	sd	s3,40(sp)
    80000252:	f052                	sd	s4,32(sp)
    80000254:	ec56                	sd	s5,24(sp)
    80000256:	0880                	addi	s0,sp,80
    80000258:	89aa                	mv	s3,a0
    8000025a:	84ae                	mv	s1,a1
    8000025c:	8ab2                	mv	s5,a2
  acquire(&cons.lock);
    8000025e:	00010517          	auipc	a0,0x10
    80000262:	5a250513          	addi	a0,a0,1442 # 80010800 <cons>
    80000266:	00001097          	auipc	ra,0x1
    8000026a:	868080e7          	jalr	-1944(ra) # 80000ace <acquire>
  for(i = 0; i < n; i++){
    8000026e:	03505e63          	blez	s5,800002aa <consolewrite+0x64>
    80000272:	00148913          	addi	s2,s1,1
    80000276:	fffa879b          	addiw	a5,s5,-1
    8000027a:	1782                	slli	a5,a5,0x20
    8000027c:	9381                	srli	a5,a5,0x20
    8000027e:	993e                	add	s2,s2,a5
    if(either_copyin(&c, user_src, src+i, 1) == -1)
    80000280:	5a7d                	li	s4,-1
    80000282:	4685                	li	a3,1
    80000284:	8626                	mv	a2,s1
    80000286:	85ce                	mv	a1,s3
    80000288:	fbf40513          	addi	a0,s0,-65
    8000028c:	00002097          	auipc	ra,0x2
    80000290:	fa2080e7          	jalr	-94(ra) # 8000222e <either_copyin>
    80000294:	01450b63          	beq	a0,s4,800002aa <consolewrite+0x64>
    consputc(c);
    80000298:	fbf44503          	lbu	a0,-65(s0)
    8000029c:	00000097          	auipc	ra,0x0
    800002a0:	f5c080e7          	jalr	-164(ra) # 800001f8 <consputc>
  for(i = 0; i < n; i++){
    800002a4:	0485                	addi	s1,s1,1
    800002a6:	fd249ee3          	bne	s1,s2,80000282 <consolewrite+0x3c>
  release(&cons.lock);
    800002aa:	00010517          	auipc	a0,0x10
    800002ae:	55650513          	addi	a0,a0,1366 # 80010800 <cons>
    800002b2:	00001097          	auipc	ra,0x1
    800002b6:	870080e7          	jalr	-1936(ra) # 80000b22 <release>
}
    800002ba:	8556                	mv	a0,s5
    800002bc:	60a6                	ld	ra,72(sp)
    800002be:	6406                	ld	s0,64(sp)
    800002c0:	74e2                	ld	s1,56(sp)
    800002c2:	7942                	ld	s2,48(sp)
    800002c4:	79a2                	ld	s3,40(sp)
    800002c6:	7a02                	ld	s4,32(sp)
    800002c8:	6ae2                	ld	s5,24(sp)
    800002ca:	6161                	addi	sp,sp,80
    800002cc:	8082                	ret

00000000800002ce <consoleintr>:
/* do erase/kill processing, append to cons.buf, */
/* wake up consoleread() if a whole line has arrived. */
/* */
void
consoleintr(int c)
{
    800002ce:	1101                	addi	sp,sp,-32
    800002d0:	ec06                	sd	ra,24(sp)
    800002d2:	e822                	sd	s0,16(sp)
    800002d4:	e426                	sd	s1,8(sp)
    800002d6:	e04a                	sd	s2,0(sp)
    800002d8:	1000                	addi	s0,sp,32
    800002da:	84aa                	mv	s1,a0
  acquire(&cons.lock);
    800002dc:	00010517          	auipc	a0,0x10
    800002e0:	52450513          	addi	a0,a0,1316 # 80010800 <cons>
    800002e4:	00000097          	auipc	ra,0x0
    800002e8:	7ea080e7          	jalr	2026(ra) # 80000ace <acquire>

  switch(c){
    800002ec:	47d5                	li	a5,21
    800002ee:	0af48663          	beq	s1,a5,8000039a <consoleintr+0xcc>
    800002f2:	0297ca63          	blt	a5,s1,80000326 <consoleintr+0x58>
    800002f6:	47a1                	li	a5,8
    800002f8:	0ef48763          	beq	s1,a5,800003e6 <consoleintr+0x118>
    800002fc:	47c1                	li	a5,16
    800002fe:	10f49a63          	bne	s1,a5,80000412 <consoleintr+0x144>
  case C('P'):  /* Print process list. */
    procdump();
    80000302:	00002097          	auipc	ra,0x2
    80000306:	f82080e7          	jalr	-126(ra) # 80002284 <procdump>
      }
    }
    break;
  }
  
  release(&cons.lock);
    8000030a:	00010517          	auipc	a0,0x10
    8000030e:	4f650513          	addi	a0,a0,1270 # 80010800 <cons>
    80000312:	00001097          	auipc	ra,0x1
    80000316:	810080e7          	jalr	-2032(ra) # 80000b22 <release>
}
    8000031a:	60e2                	ld	ra,24(sp)
    8000031c:	6442                	ld	s0,16(sp)
    8000031e:	64a2                	ld	s1,8(sp)
    80000320:	6902                	ld	s2,0(sp)
    80000322:	6105                	addi	sp,sp,32
    80000324:	8082                	ret
  switch(c){
    80000326:	07f00793          	li	a5,127
    8000032a:	0af48e63          	beq	s1,a5,800003e6 <consoleintr+0x118>
    if(c != 0 && cons.e-cons.r < INPUT_BUF){
    8000032e:	00010717          	auipc	a4,0x10
    80000332:	4d270713          	addi	a4,a4,1234 # 80010800 <cons>
    80000336:	0a072783          	lw	a5,160(a4)
    8000033a:	09872703          	lw	a4,152(a4)
    8000033e:	9f99                	subw	a5,a5,a4
    80000340:	07f00713          	li	a4,127
    80000344:	fcf763e3          	bltu	a4,a5,8000030a <consoleintr+0x3c>
      c = (c == '\r') ? '\n' : c;
    80000348:	47b5                	li	a5,13
    8000034a:	0cf48763          	beq	s1,a5,80000418 <consoleintr+0x14a>
      consputc(c);
    8000034e:	8526                	mv	a0,s1
    80000350:	00000097          	auipc	ra,0x0
    80000354:	ea8080e7          	jalr	-344(ra) # 800001f8 <consputc>
      cons.buf[cons.e++ % INPUT_BUF] = c;
    80000358:	00010797          	auipc	a5,0x10
    8000035c:	4a878793          	addi	a5,a5,1192 # 80010800 <cons>
    80000360:	0a07a703          	lw	a4,160(a5)
    80000364:	0017069b          	addiw	a3,a4,1
    80000368:	0006861b          	sext.w	a2,a3
    8000036c:	0ad7a023          	sw	a3,160(a5)
    80000370:	07f77713          	andi	a4,a4,127
    80000374:	97ba                	add	a5,a5,a4
    80000376:	00978c23          	sb	s1,24(a5)
      if(c == '\n' || c == C('D') || cons.e == cons.r+INPUT_BUF){
    8000037a:	47a9                	li	a5,10
    8000037c:	0cf48563          	beq	s1,a5,80000446 <consoleintr+0x178>
    80000380:	4791                	li	a5,4
    80000382:	0cf48263          	beq	s1,a5,80000446 <consoleintr+0x178>
    80000386:	00010797          	auipc	a5,0x10
    8000038a:	5127a783          	lw	a5,1298(a5) # 80010898 <cons+0x98>
    8000038e:	0807879b          	addiw	a5,a5,128
    80000392:	f6f61ce3          	bne	a2,a5,8000030a <consoleintr+0x3c>
      cons.buf[cons.e++ % INPUT_BUF] = c;
    80000396:	863e                	mv	a2,a5
    80000398:	a07d                	j	80000446 <consoleintr+0x178>
    while(cons.e != cons.w &&
    8000039a:	00010717          	auipc	a4,0x10
    8000039e:	46670713          	addi	a4,a4,1126 # 80010800 <cons>
    800003a2:	0a072783          	lw	a5,160(a4)
    800003a6:	09c72703          	lw	a4,156(a4)
          cons.buf[(cons.e-1) % INPUT_BUF] != '\n'){
    800003aa:	00010497          	auipc	s1,0x10
    800003ae:	45648493          	addi	s1,s1,1110 # 80010800 <cons>
    while(cons.e != cons.w &&
    800003b2:	4929                	li	s2,10
    800003b4:	f4f70be3          	beq	a4,a5,8000030a <consoleintr+0x3c>
          cons.buf[(cons.e-1) % INPUT_BUF] != '\n'){
    800003b8:	37fd                	addiw	a5,a5,-1
    800003ba:	07f7f713          	andi	a4,a5,127
    800003be:	9726                	add	a4,a4,s1
    while(cons.e != cons.w &&
    800003c0:	01874703          	lbu	a4,24(a4)
    800003c4:	f52703e3          	beq	a4,s2,8000030a <consoleintr+0x3c>
      cons.e--;
    800003c8:	0af4a023          	sw	a5,160(s1)
      consputc(BACKSPACE);
    800003cc:	10000513          	li	a0,256
    800003d0:	00000097          	auipc	ra,0x0
    800003d4:	e28080e7          	jalr	-472(ra) # 800001f8 <consputc>
    while(cons.e != cons.w &&
    800003d8:	0a04a783          	lw	a5,160(s1)
    800003dc:	09c4a703          	lw	a4,156(s1)
    800003e0:	fcf71ce3          	bne	a4,a5,800003b8 <consoleintr+0xea>
    800003e4:	b71d                	j	8000030a <consoleintr+0x3c>
    if(cons.e != cons.w){
    800003e6:	00010717          	auipc	a4,0x10
    800003ea:	41a70713          	addi	a4,a4,1050 # 80010800 <cons>
    800003ee:	0a072783          	lw	a5,160(a4)
    800003f2:	09c72703          	lw	a4,156(a4)
    800003f6:	f0f70ae3          	beq	a4,a5,8000030a <consoleintr+0x3c>
      cons.e--;
    800003fa:	37fd                	addiw	a5,a5,-1
    800003fc:	00010717          	auipc	a4,0x10
    80000400:	4af72223          	sw	a5,1188(a4) # 800108a0 <cons+0xa0>
      consputc(BACKSPACE);
    80000404:	10000513          	li	a0,256
    80000408:	00000097          	auipc	ra,0x0
    8000040c:	df0080e7          	jalr	-528(ra) # 800001f8 <consputc>
    80000410:	bded                	j	8000030a <consoleintr+0x3c>
    if(c != 0 && cons.e-cons.r < INPUT_BUF){
    80000412:	ee048ce3          	beqz	s1,8000030a <consoleintr+0x3c>
    80000416:	bf21                	j	8000032e <consoleintr+0x60>
      consputc(c);
    80000418:	4529                	li	a0,10
    8000041a:	00000097          	auipc	ra,0x0
    8000041e:	dde080e7          	jalr	-546(ra) # 800001f8 <consputc>
      cons.buf[cons.e++ % INPUT_BUF] = c;
    80000422:	00010797          	auipc	a5,0x10
    80000426:	3de78793          	addi	a5,a5,990 # 80010800 <cons>
    8000042a:	0a07a703          	lw	a4,160(a5)
    8000042e:	0017069b          	addiw	a3,a4,1
    80000432:	0006861b          	sext.w	a2,a3
    80000436:	0ad7a023          	sw	a3,160(a5)
    8000043a:	07f77713          	andi	a4,a4,127
    8000043e:	97ba                	add	a5,a5,a4
    80000440:	4729                	li	a4,10
    80000442:	00e78c23          	sb	a4,24(a5)
        cons.w = cons.e;
    80000446:	00010797          	auipc	a5,0x10
    8000044a:	44c7ab23          	sw	a2,1110(a5) # 8001089c <cons+0x9c>
        wakeup(&cons.r);
    8000044e:	00010517          	auipc	a0,0x10
    80000452:	44a50513          	addi	a0,a0,1098 # 80010898 <cons+0x98>
    80000456:	00002097          	auipc	ra,0x2
    8000045a:	ca8080e7          	jalr	-856(ra) # 800020fe <wakeup>
    8000045e:	b575                	j	8000030a <consoleintr+0x3c>

0000000080000460 <consoleinit>:

void
consoleinit(void)
{
    80000460:	1141                	addi	sp,sp,-16
    80000462:	e406                	sd	ra,8(sp)
    80000464:	e022                	sd	s0,0(sp)
    80000466:	0800                	addi	s0,sp,16
  initlock(&cons.lock, "cons");
    80000468:	00006597          	auipc	a1,0x6
    8000046c:	cb058593          	addi	a1,a1,-848 # 80006118 <userret+0x88>
    80000470:	00010517          	auipc	a0,0x10
    80000474:	39050513          	addi	a0,a0,912 # 80010800 <cons>
    80000478:	00000097          	auipc	ra,0x0
    8000047c:	544080e7          	jalr	1348(ra) # 800009bc <initlock>

  uartinit();
    80000480:	00000097          	auipc	ra,0x0
    80000484:	330080e7          	jalr	816(ra) # 800007b0 <uartinit>

  /* connect read and write system calls */
  /* to consoleread and consolewrite. */
  devsw[CONSOLE].read = consoleread;
    80000488:	00020797          	auipc	a5,0x20
    8000048c:	3b878793          	addi	a5,a5,952 # 80020840 <devsw>
    80000490:	00000717          	auipc	a4,0x0
    80000494:	c5070713          	addi	a4,a4,-944 # 800000e0 <consoleread>
    80000498:	eb98                	sd	a4,16(a5)
  devsw[CONSOLE].write = consolewrite;
    8000049a:	00000717          	auipc	a4,0x0
    8000049e:	dac70713          	addi	a4,a4,-596 # 80000246 <consolewrite>
    800004a2:	ef98                	sd	a4,24(a5)
}
    800004a4:	60a2                	ld	ra,8(sp)
    800004a6:	6402                	ld	s0,0(sp)
    800004a8:	0141                	addi	sp,sp,16
    800004aa:	8082                	ret

00000000800004ac <printint>:

static char digits[] = "0123456789abcdef";

static void
printint(int xx, int base, int sign)
{
    800004ac:	7179                	addi	sp,sp,-48
    800004ae:	f406                	sd	ra,40(sp)
    800004b0:	f022                	sd	s0,32(sp)
    800004b2:	ec26                	sd	s1,24(sp)
    800004b4:	e84a                	sd	s2,16(sp)
    800004b6:	1800                	addi	s0,sp,48
  char buf[16];
  int i;
  uint x;

  if(sign && (sign = xx < 0))
    800004b8:	c219                	beqz	a2,800004be <printint+0x12>
    800004ba:	08054663          	bltz	a0,80000546 <printint+0x9a>
    x = -xx;
  else
    x = xx;
    800004be:	2501                	sext.w	a0,a0
    800004c0:	4881                	li	a7,0
    800004c2:	fd040693          	addi	a3,s0,-48

  i = 0;
    800004c6:	4701                	li	a4,0
  do {
    buf[i++] = digits[x % base];
    800004c8:	2581                	sext.w	a1,a1
    800004ca:	00006617          	auipc	a2,0x6
    800004ce:	32660613          	addi	a2,a2,806 # 800067f0 <digits>
    800004d2:	883a                	mv	a6,a4
    800004d4:	2705                	addiw	a4,a4,1
    800004d6:	02b577bb          	remuw	a5,a0,a1
    800004da:	1782                	slli	a5,a5,0x20
    800004dc:	9381                	srli	a5,a5,0x20
    800004de:	97b2                	add	a5,a5,a2
    800004e0:	0007c783          	lbu	a5,0(a5)
    800004e4:	00f68023          	sb	a5,0(a3)
  } while((x /= base) != 0);
    800004e8:	0005079b          	sext.w	a5,a0
    800004ec:	02b5553b          	divuw	a0,a0,a1
    800004f0:	0685                	addi	a3,a3,1
    800004f2:	feb7f0e3          	bgeu	a5,a1,800004d2 <printint+0x26>

  if(sign)
    800004f6:	00088b63          	beqz	a7,8000050c <printint+0x60>
    buf[i++] = '-';
    800004fa:	fe040793          	addi	a5,s0,-32
    800004fe:	973e                	add	a4,a4,a5
    80000500:	02d00793          	li	a5,45
    80000504:	fef70823          	sb	a5,-16(a4)
    80000508:	0028071b          	addiw	a4,a6,2

  while(--i >= 0)
    8000050c:	02e05763          	blez	a4,8000053a <printint+0x8e>
    80000510:	fd040793          	addi	a5,s0,-48
    80000514:	00e784b3          	add	s1,a5,a4
    80000518:	fff78913          	addi	s2,a5,-1
    8000051c:	993a                	add	s2,s2,a4
    8000051e:	377d                	addiw	a4,a4,-1
    80000520:	1702                	slli	a4,a4,0x20
    80000522:	9301                	srli	a4,a4,0x20
    80000524:	40e90933          	sub	s2,s2,a4
    consputc(buf[i]);
    80000528:	fff4c503          	lbu	a0,-1(s1)
    8000052c:	00000097          	auipc	ra,0x0
    80000530:	ccc080e7          	jalr	-820(ra) # 800001f8 <consputc>
  while(--i >= 0)
    80000534:	14fd                	addi	s1,s1,-1
    80000536:	ff2499e3          	bne	s1,s2,80000528 <printint+0x7c>
}
    8000053a:	70a2                	ld	ra,40(sp)
    8000053c:	7402                	ld	s0,32(sp)
    8000053e:	64e2                	ld	s1,24(sp)
    80000540:	6942                	ld	s2,16(sp)
    80000542:	6145                	addi	sp,sp,48
    80000544:	8082                	ret
    x = -xx;
    80000546:	40a0053b          	negw	a0,a0
  if(sign && (sign = xx < 0))
    8000054a:	4885                	li	a7,1
    x = -xx;
    8000054c:	bf9d                	j	800004c2 <printint+0x16>

000000008000054e <panic>:
    release(&pr.lock);
}

void
panic(char *s)
{
    8000054e:	1101                	addi	sp,sp,-32
    80000550:	ec06                	sd	ra,24(sp)
    80000552:	e822                	sd	s0,16(sp)
    80000554:	e426                	sd	s1,8(sp)
    80000556:	1000                	addi	s0,sp,32
    80000558:	84aa                	mv	s1,a0
  pr.locking = 0;
    8000055a:	00010797          	auipc	a5,0x10
    8000055e:	3607a323          	sw	zero,870(a5) # 800108c0 <pr+0x18>
  printf("panic: ");
    80000562:	00006517          	auipc	a0,0x6
    80000566:	bbe50513          	addi	a0,a0,-1090 # 80006120 <userret+0x90>
    8000056a:	00000097          	auipc	ra,0x0
    8000056e:	02e080e7          	jalr	46(ra) # 80000598 <printf>
  printf(s);
    80000572:	8526                	mv	a0,s1
    80000574:	00000097          	auipc	ra,0x0
    80000578:	024080e7          	jalr	36(ra) # 80000598 <printf>
  printf("\n");
    8000057c:	00006517          	auipc	a0,0x6
    80000580:	c1c50513          	addi	a0,a0,-996 # 80006198 <userret+0x108>
    80000584:	00000097          	auipc	ra,0x0
    80000588:	014080e7          	jalr	20(ra) # 80000598 <printf>
  panicked = 1; /* freeze other CPUs */
    8000058c:	4785                	li	a5,1
    8000058e:	00025717          	auipc	a4,0x25
    80000592:	a6f72923          	sw	a5,-1422(a4) # 80025000 <end>
  for(;;)
    80000596:	a001                	j	80000596 <panic+0x48>

0000000080000598 <printf>:
{
    80000598:	7131                	addi	sp,sp,-192
    8000059a:	fc86                	sd	ra,120(sp)
    8000059c:	f8a2                	sd	s0,112(sp)
    8000059e:	f4a6                	sd	s1,104(sp)
    800005a0:	f0ca                	sd	s2,96(sp)
    800005a2:	ecce                	sd	s3,88(sp)
    800005a4:	e8d2                	sd	s4,80(sp)
    800005a6:	e4d6                	sd	s5,72(sp)
    800005a8:	e0da                	sd	s6,64(sp)
    800005aa:	fc5e                	sd	s7,56(sp)
    800005ac:	f862                	sd	s8,48(sp)
    800005ae:	f466                	sd	s9,40(sp)
    800005b0:	f06a                	sd	s10,32(sp)
    800005b2:	ec6e                	sd	s11,24(sp)
    800005b4:	0100                	addi	s0,sp,128
    800005b6:	8a2a                	mv	s4,a0
    800005b8:	e40c                	sd	a1,8(s0)
    800005ba:	e810                	sd	a2,16(s0)
    800005bc:	ec14                	sd	a3,24(s0)
    800005be:	f018                	sd	a4,32(s0)
    800005c0:	f41c                	sd	a5,40(s0)
    800005c2:	03043823          	sd	a6,48(s0)
    800005c6:	03143c23          	sd	a7,56(s0)
  locking = pr.locking;
    800005ca:	00010d97          	auipc	s11,0x10
    800005ce:	2f6dad83          	lw	s11,758(s11) # 800108c0 <pr+0x18>
  if(locking)
    800005d2:	020d9b63          	bnez	s11,80000608 <printf+0x70>
  if (fmt == 0)
    800005d6:	040a0263          	beqz	s4,8000061a <printf+0x82>
  va_start(ap, fmt);
    800005da:	00840793          	addi	a5,s0,8
    800005de:	f8f43423          	sd	a5,-120(s0)
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    800005e2:	000a4503          	lbu	a0,0(s4)
    800005e6:	16050263          	beqz	a0,8000074a <printf+0x1b2>
    800005ea:	4481                	li	s1,0
    if(c != '%'){
    800005ec:	02500a93          	li	s5,37
    switch(c){
    800005f0:	07000b13          	li	s6,112
  consputc('x');
    800005f4:	4d41                	li	s10,16
    consputc(digits[x >> (sizeof(uint64) * 8 - 4)]);
    800005f6:	00006b97          	auipc	s7,0x6
    800005fa:	1fab8b93          	addi	s7,s7,506 # 800067f0 <digits>
    switch(c){
    800005fe:	07300c93          	li	s9,115
    80000602:	06400c13          	li	s8,100
    80000606:	a82d                	j	80000640 <printf+0xa8>
    acquire(&pr.lock);
    80000608:	00010517          	auipc	a0,0x10
    8000060c:	2a050513          	addi	a0,a0,672 # 800108a8 <pr>
    80000610:	00000097          	auipc	ra,0x0
    80000614:	4be080e7          	jalr	1214(ra) # 80000ace <acquire>
    80000618:	bf7d                	j	800005d6 <printf+0x3e>
    panic("null fmt");
    8000061a:	00006517          	auipc	a0,0x6
    8000061e:	b1650513          	addi	a0,a0,-1258 # 80006130 <userret+0xa0>
    80000622:	00000097          	auipc	ra,0x0
    80000626:	f2c080e7          	jalr	-212(ra) # 8000054e <panic>
      consputc(c);
    8000062a:	00000097          	auipc	ra,0x0
    8000062e:	bce080e7          	jalr	-1074(ra) # 800001f8 <consputc>
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
    80000632:	2485                	addiw	s1,s1,1
    80000634:	009a07b3          	add	a5,s4,s1
    80000638:	0007c503          	lbu	a0,0(a5)
    8000063c:	10050763          	beqz	a0,8000074a <printf+0x1b2>
    if(c != '%'){
    80000640:	ff5515e3          	bne	a0,s5,8000062a <printf+0x92>
    c = fmt[++i] & 0xff;
    80000644:	2485                	addiw	s1,s1,1
    80000646:	009a07b3          	add	a5,s4,s1
    8000064a:	0007c783          	lbu	a5,0(a5)
    8000064e:	0007891b          	sext.w	s2,a5
    if(c == 0)
    80000652:	cfe5                	beqz	a5,8000074a <printf+0x1b2>
    switch(c){
    80000654:	05678a63          	beq	a5,s6,800006a8 <printf+0x110>
    80000658:	02fb7663          	bgeu	s6,a5,80000684 <printf+0xec>
    8000065c:	09978963          	beq	a5,s9,800006ee <printf+0x156>
    80000660:	07800713          	li	a4,120
    80000664:	0ce79863          	bne	a5,a4,80000734 <printf+0x19c>
      printint(va_arg(ap, int), 16, 1);
    80000668:	f8843783          	ld	a5,-120(s0)
    8000066c:	00878713          	addi	a4,a5,8
    80000670:	f8e43423          	sd	a4,-120(s0)
    80000674:	4605                	li	a2,1
    80000676:	85ea                	mv	a1,s10
    80000678:	4388                	lw	a0,0(a5)
    8000067a:	00000097          	auipc	ra,0x0
    8000067e:	e32080e7          	jalr	-462(ra) # 800004ac <printint>
      break;
    80000682:	bf45                	j	80000632 <printf+0x9a>
    switch(c){
    80000684:	0b578263          	beq	a5,s5,80000728 <printf+0x190>
    80000688:	0b879663          	bne	a5,s8,80000734 <printf+0x19c>
      printint(va_arg(ap, int), 10, 1);
    8000068c:	f8843783          	ld	a5,-120(s0)
    80000690:	00878713          	addi	a4,a5,8
    80000694:	f8e43423          	sd	a4,-120(s0)
    80000698:	4605                	li	a2,1
    8000069a:	45a9                	li	a1,10
    8000069c:	4388                	lw	a0,0(a5)
    8000069e:	00000097          	auipc	ra,0x0
    800006a2:	e0e080e7          	jalr	-498(ra) # 800004ac <printint>
      break;
    800006a6:	b771                	j	80000632 <printf+0x9a>
      printptr(va_arg(ap, uint64));
    800006a8:	f8843783          	ld	a5,-120(s0)
    800006ac:	00878713          	addi	a4,a5,8
    800006b0:	f8e43423          	sd	a4,-120(s0)
    800006b4:	0007b983          	ld	s3,0(a5)
  consputc('0');
    800006b8:	03000513          	li	a0,48
    800006bc:	00000097          	auipc	ra,0x0
    800006c0:	b3c080e7          	jalr	-1220(ra) # 800001f8 <consputc>
  consputc('x');
    800006c4:	07800513          	li	a0,120
    800006c8:	00000097          	auipc	ra,0x0
    800006cc:	b30080e7          	jalr	-1232(ra) # 800001f8 <consputc>
    800006d0:	896a                	mv	s2,s10
    consputc(digits[x >> (sizeof(uint64) * 8 - 4)]);
    800006d2:	03c9d793          	srli	a5,s3,0x3c
    800006d6:	97de                	add	a5,a5,s7
    800006d8:	0007c503          	lbu	a0,0(a5)
    800006dc:	00000097          	auipc	ra,0x0
    800006e0:	b1c080e7          	jalr	-1252(ra) # 800001f8 <consputc>
  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
    800006e4:	0992                	slli	s3,s3,0x4
    800006e6:	397d                	addiw	s2,s2,-1
    800006e8:	fe0915e3          	bnez	s2,800006d2 <printf+0x13a>
    800006ec:	b799                	j	80000632 <printf+0x9a>
      if((s = va_arg(ap, char*)) == 0)
    800006ee:	f8843783          	ld	a5,-120(s0)
    800006f2:	00878713          	addi	a4,a5,8
    800006f6:	f8e43423          	sd	a4,-120(s0)
    800006fa:	0007b903          	ld	s2,0(a5)
    800006fe:	00090e63          	beqz	s2,8000071a <printf+0x182>
      for(; *s; s++)
    80000702:	00094503          	lbu	a0,0(s2)
    80000706:	d515                	beqz	a0,80000632 <printf+0x9a>
        consputc(*s);
    80000708:	00000097          	auipc	ra,0x0
    8000070c:	af0080e7          	jalr	-1296(ra) # 800001f8 <consputc>
      for(; *s; s++)
    80000710:	0905                	addi	s2,s2,1
    80000712:	00094503          	lbu	a0,0(s2)
    80000716:	f96d                	bnez	a0,80000708 <printf+0x170>
    80000718:	bf29                	j	80000632 <printf+0x9a>
        s = "(null)";
    8000071a:	00006917          	auipc	s2,0x6
    8000071e:	a0e90913          	addi	s2,s2,-1522 # 80006128 <userret+0x98>
      for(; *s; s++)
    80000722:	02800513          	li	a0,40
    80000726:	b7cd                	j	80000708 <printf+0x170>
      consputc('%');
    80000728:	8556                	mv	a0,s5
    8000072a:	00000097          	auipc	ra,0x0
    8000072e:	ace080e7          	jalr	-1330(ra) # 800001f8 <consputc>
      break;
    80000732:	b701                	j	80000632 <printf+0x9a>
      consputc('%');
    80000734:	8556                	mv	a0,s5
    80000736:	00000097          	auipc	ra,0x0
    8000073a:	ac2080e7          	jalr	-1342(ra) # 800001f8 <consputc>
      consputc(c);
    8000073e:	854a                	mv	a0,s2
    80000740:	00000097          	auipc	ra,0x0
    80000744:	ab8080e7          	jalr	-1352(ra) # 800001f8 <consputc>
      break;
    80000748:	b5ed                	j	80000632 <printf+0x9a>
  if(locking)
    8000074a:	020d9163          	bnez	s11,8000076c <printf+0x1d4>
}
    8000074e:	70e6                	ld	ra,120(sp)
    80000750:	7446                	ld	s0,112(sp)
    80000752:	74a6                	ld	s1,104(sp)
    80000754:	7906                	ld	s2,96(sp)
    80000756:	69e6                	ld	s3,88(sp)
    80000758:	6a46                	ld	s4,80(sp)
    8000075a:	6aa6                	ld	s5,72(sp)
    8000075c:	6b06                	ld	s6,64(sp)
    8000075e:	7be2                	ld	s7,56(sp)
    80000760:	7c42                	ld	s8,48(sp)
    80000762:	7ca2                	ld	s9,40(sp)
    80000764:	7d02                	ld	s10,32(sp)
    80000766:	6de2                	ld	s11,24(sp)
    80000768:	6129                	addi	sp,sp,192
    8000076a:	8082                	ret
    release(&pr.lock);
    8000076c:	00010517          	auipc	a0,0x10
    80000770:	13c50513          	addi	a0,a0,316 # 800108a8 <pr>
    80000774:	00000097          	auipc	ra,0x0
    80000778:	3ae080e7          	jalr	942(ra) # 80000b22 <release>
}
    8000077c:	bfc9                	j	8000074e <printf+0x1b6>

000000008000077e <printfinit>:
    ;
}

void
printfinit(void)
{
    8000077e:	1101                	addi	sp,sp,-32
    80000780:	ec06                	sd	ra,24(sp)
    80000782:	e822                	sd	s0,16(sp)
    80000784:	e426                	sd	s1,8(sp)
    80000786:	1000                	addi	s0,sp,32
  initlock(&pr.lock, "pr");
    80000788:	00010497          	auipc	s1,0x10
    8000078c:	12048493          	addi	s1,s1,288 # 800108a8 <pr>
    80000790:	00006597          	auipc	a1,0x6
    80000794:	9b058593          	addi	a1,a1,-1616 # 80006140 <userret+0xb0>
    80000798:	8526                	mv	a0,s1
    8000079a:	00000097          	auipc	ra,0x0
    8000079e:	222080e7          	jalr	546(ra) # 800009bc <initlock>
  pr.locking = 1;
    800007a2:	4785                	li	a5,1
    800007a4:	cc9c                	sw	a5,24(s1)
}
    800007a6:	60e2                	ld	ra,24(sp)
    800007a8:	6442                	ld	s0,16(sp)
    800007aa:	64a2                	ld	s1,8(sp)
    800007ac:	6105                	addi	sp,sp,32
    800007ae:	8082                	ret

00000000800007b0 <uartinit>:
#define ReadReg(reg) (*(Reg(reg)))
#define WriteReg(reg, v) (*(Reg(reg)) = (v))

void
uartinit(void)
{
    800007b0:	1141                	addi	sp,sp,-16
    800007b2:	e422                	sd	s0,8(sp)
    800007b4:	0800                	addi	s0,sp,16
  /* disable interrupts. */
  WriteReg(IER, 0x00);
    800007b6:	100007b7          	lui	a5,0x10000
    800007ba:	000780a3          	sb	zero,1(a5) # 10000001 <_entry-0x6fffffff>

  /* special mode to set baud rate. */
  WriteReg(LCR, 0x80);
    800007be:	f8000713          	li	a4,-128
    800007c2:	00e781a3          	sb	a4,3(a5)

  /* LSB for baud rate of 38.4K. */
  WriteReg(0, 0x03);
    800007c6:	470d                	li	a4,3
    800007c8:	00e78023          	sb	a4,0(a5)

  /* MSB for baud rate of 38.4K. */
  WriteReg(1, 0x00);
    800007cc:	000780a3          	sb	zero,1(a5)

  /* leave set-baud mode, */
  /* and set word length to 8 bits, no parity. */
  WriteReg(LCR, 0x03);
    800007d0:	00e781a3          	sb	a4,3(a5)

  /* reset and enable FIFOs. */
  WriteReg(FCR, 0x07);
    800007d4:	471d                	li	a4,7
    800007d6:	00e78123          	sb	a4,2(a5)

  /* enable receive interrupts. */
  WriteReg(IER, 0x01);
    800007da:	4705                	li	a4,1
    800007dc:	00e780a3          	sb	a4,1(a5)
}
    800007e0:	6422                	ld	s0,8(sp)
    800007e2:	0141                	addi	sp,sp,16
    800007e4:	8082                	ret

00000000800007e6 <uartputc>:

/* write one output character to the UART. */
void
uartputc(int c)
{
    800007e6:	1141                	addi	sp,sp,-16
    800007e8:	e422                	sd	s0,8(sp)
    800007ea:	0800                	addi	s0,sp,16
  /* wait for Transmit Holding Empty to be set in LSR. */
  while((ReadReg(LSR) & (1 << 5)) == 0)
    800007ec:	10000737          	lui	a4,0x10000
    800007f0:	00574783          	lbu	a5,5(a4) # 10000005 <_entry-0x6ffffffb>
    800007f4:	0ff7f793          	andi	a5,a5,255
    800007f8:	0207f793          	andi	a5,a5,32
    800007fc:	dbf5                	beqz	a5,800007f0 <uartputc+0xa>
    ;
  WriteReg(THR, c);
    800007fe:	0ff57513          	andi	a0,a0,255
    80000802:	100007b7          	lui	a5,0x10000
    80000806:	00a78023          	sb	a0,0(a5) # 10000000 <_entry-0x70000000>
}
    8000080a:	6422                	ld	s0,8(sp)
    8000080c:	0141                	addi	sp,sp,16
    8000080e:	8082                	ret

0000000080000810 <uartgetc>:

/* read one input character from the UART. */
/* return -1 if none is waiting. */
int
uartgetc(void)
{
    80000810:	1141                	addi	sp,sp,-16
    80000812:	e422                	sd	s0,8(sp)
    80000814:	0800                	addi	s0,sp,16
  if(ReadReg(LSR) & 0x01){
    80000816:	100007b7          	lui	a5,0x10000
    8000081a:	0057c783          	lbu	a5,5(a5) # 10000005 <_entry-0x6ffffffb>
    8000081e:	8b85                	andi	a5,a5,1
    80000820:	cb81                	beqz	a5,80000830 <uartgetc+0x20>
    /* input data is ready. */
    return ReadReg(RHR);
    80000822:	100007b7          	lui	a5,0x10000
    80000826:	0007c503          	lbu	a0,0(a5) # 10000000 <_entry-0x70000000>
  } else {
    return -1;
  }
}
    8000082a:	6422                	ld	s0,8(sp)
    8000082c:	0141                	addi	sp,sp,16
    8000082e:	8082                	ret
    return -1;
    80000830:	557d                	li	a0,-1
    80000832:	bfe5                	j	8000082a <uartgetc+0x1a>

0000000080000834 <uartintr>:

/* trap.c calls here when the uart interrupts. */
void
uartintr(void)
{
    80000834:	1101                	addi	sp,sp,-32
    80000836:	ec06                	sd	ra,24(sp)
    80000838:	e822                	sd	s0,16(sp)
    8000083a:	e426                	sd	s1,8(sp)
    8000083c:	1000                	addi	s0,sp,32
  while(1){
    int c = uartgetc();
    if(c == -1)
    8000083e:	54fd                	li	s1,-1
    int c = uartgetc();
    80000840:	00000097          	auipc	ra,0x0
    80000844:	fd0080e7          	jalr	-48(ra) # 80000810 <uartgetc>
    if(c == -1)
    80000848:	00950763          	beq	a0,s1,80000856 <uartintr+0x22>
      break;
    consoleintr(c);
    8000084c:	00000097          	auipc	ra,0x0
    80000850:	a82080e7          	jalr	-1406(ra) # 800002ce <consoleintr>
  while(1){
    80000854:	b7f5                	j	80000840 <uartintr+0xc>
  }
}
    80000856:	60e2                	ld	ra,24(sp)
    80000858:	6442                	ld	s0,16(sp)
    8000085a:	64a2                	ld	s1,8(sp)
    8000085c:	6105                	addi	sp,sp,32
    8000085e:	8082                	ret

0000000080000860 <kfree>:
/* which normally should have been returned by a */
/* call to kalloc().  (The exception is when */
/* initializing the allocator; see kinit above.) */
void
kfree(void *pa)
{
    80000860:	1101                	addi	sp,sp,-32
    80000862:	ec06                	sd	ra,24(sp)
    80000864:	e822                	sd	s0,16(sp)
    80000866:	e426                	sd	s1,8(sp)
    80000868:	e04a                	sd	s2,0(sp)
    8000086a:	1000                	addi	s0,sp,32
  struct run *r;

  if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
    8000086c:	03451793          	slli	a5,a0,0x34
    80000870:	ebb9                	bnez	a5,800008c6 <kfree+0x66>
    80000872:	84aa                	mv	s1,a0
    80000874:	00024797          	auipc	a5,0x24
    80000878:	78c78793          	addi	a5,a5,1932 # 80025000 <end>
    8000087c:	04f56563          	bltu	a0,a5,800008c6 <kfree+0x66>
    80000880:	47c5                	li	a5,17
    80000882:	07ee                	slli	a5,a5,0x1b
    80000884:	04f57163          	bgeu	a0,a5,800008c6 <kfree+0x66>
    panic("kfree");

  /* Fill with junk to catch dangling refs. */
  memset(pa, 1, PGSIZE);
    80000888:	6605                	lui	a2,0x1
    8000088a:	4585                	li	a1,1
    8000088c:	00000097          	auipc	ra,0x0
    80000890:	2de080e7          	jalr	734(ra) # 80000b6a <memset>

  r = (struct run*)pa;

  acquire(&kmem.lock);
    80000894:	00010917          	auipc	s2,0x10
    80000898:	03490913          	addi	s2,s2,52 # 800108c8 <kmem>
    8000089c:	854a                	mv	a0,s2
    8000089e:	00000097          	auipc	ra,0x0
    800008a2:	230080e7          	jalr	560(ra) # 80000ace <acquire>
  r->next = kmem.freelist;
    800008a6:	01893783          	ld	a5,24(s2)
    800008aa:	e09c                	sd	a5,0(s1)
  kmem.freelist = r;
    800008ac:	00993c23          	sd	s1,24(s2)
  release(&kmem.lock);
    800008b0:	854a                	mv	a0,s2
    800008b2:	00000097          	auipc	ra,0x0
    800008b6:	270080e7          	jalr	624(ra) # 80000b22 <release>
}
    800008ba:	60e2                	ld	ra,24(sp)
    800008bc:	6442                	ld	s0,16(sp)
    800008be:	64a2                	ld	s1,8(sp)
    800008c0:	6902                	ld	s2,0(sp)
    800008c2:	6105                	addi	sp,sp,32
    800008c4:	8082                	ret
    panic("kfree");
    800008c6:	00006517          	auipc	a0,0x6
    800008ca:	88250513          	addi	a0,a0,-1918 # 80006148 <userret+0xb8>
    800008ce:	00000097          	auipc	ra,0x0
    800008d2:	c80080e7          	jalr	-896(ra) # 8000054e <panic>

00000000800008d6 <freerange>:
{
    800008d6:	7179                	addi	sp,sp,-48
    800008d8:	f406                	sd	ra,40(sp)
    800008da:	f022                	sd	s0,32(sp)
    800008dc:	ec26                	sd	s1,24(sp)
    800008de:	e84a                	sd	s2,16(sp)
    800008e0:	e44e                	sd	s3,8(sp)
    800008e2:	e052                	sd	s4,0(sp)
    800008e4:	1800                	addi	s0,sp,48
  p = (char*)PGROUNDUP((uint64)pa_start);
    800008e6:	6485                	lui	s1,0x1
    800008e8:	14fd                	addi	s1,s1,-1
    800008ea:	94aa                	add	s1,s1,a0
    800008ec:	757d                	lui	a0,0xfffff
    800008ee:	8ce9                	and	s1,s1,a0
  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
    800008f0:	6789                	lui	a5,0x2
    800008f2:	94be                	add	s1,s1,a5
    800008f4:	0095ee63          	bltu	a1,s1,80000910 <freerange+0x3a>
    800008f8:	892e                	mv	s2,a1
    kfree(p);
    800008fa:	7a7d                	lui	s4,0xfffff
  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
    800008fc:	6985                	lui	s3,0x1
    kfree(p);
    800008fe:	01448533          	add	a0,s1,s4
    80000902:	00000097          	auipc	ra,0x0
    80000906:	f5e080e7          	jalr	-162(ra) # 80000860 <kfree>
  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
    8000090a:	94ce                	add	s1,s1,s3
    8000090c:	fe9979e3          	bgeu	s2,s1,800008fe <freerange+0x28>
}
    80000910:	70a2                	ld	ra,40(sp)
    80000912:	7402                	ld	s0,32(sp)
    80000914:	64e2                	ld	s1,24(sp)
    80000916:	6942                	ld	s2,16(sp)
    80000918:	69a2                	ld	s3,8(sp)
    8000091a:	6a02                	ld	s4,0(sp)
    8000091c:	6145                	addi	sp,sp,48
    8000091e:	8082                	ret

0000000080000920 <kinit>:
{
    80000920:	1141                	addi	sp,sp,-16
    80000922:	e406                	sd	ra,8(sp)
    80000924:	e022                	sd	s0,0(sp)
    80000926:	0800                	addi	s0,sp,16
  initlock(&kmem.lock, "kmem");
    80000928:	00006597          	auipc	a1,0x6
    8000092c:	82858593          	addi	a1,a1,-2008 # 80006150 <userret+0xc0>
    80000930:	00010517          	auipc	a0,0x10
    80000934:	f9850513          	addi	a0,a0,-104 # 800108c8 <kmem>
    80000938:	00000097          	auipc	ra,0x0
    8000093c:	084080e7          	jalr	132(ra) # 800009bc <initlock>
  freerange(end, (void*)PHYSTOP);
    80000940:	45c5                	li	a1,17
    80000942:	05ee                	slli	a1,a1,0x1b
    80000944:	00024517          	auipc	a0,0x24
    80000948:	6bc50513          	addi	a0,a0,1724 # 80025000 <end>
    8000094c:	00000097          	auipc	ra,0x0
    80000950:	f8a080e7          	jalr	-118(ra) # 800008d6 <freerange>
}
    80000954:	60a2                	ld	ra,8(sp)
    80000956:	6402                	ld	s0,0(sp)
    80000958:	0141                	addi	sp,sp,16
    8000095a:	8082                	ret

000000008000095c <kalloc>:
/* Allocate one 4096-byte page of physical memory. */
/* Returns a pointer that the kernel can use. */
/* Returns 0 if the memory cannot be allocated. */
void *
kalloc(void)
{
    8000095c:	1101                	addi	sp,sp,-32
    8000095e:	ec06                	sd	ra,24(sp)
    80000960:	e822                	sd	s0,16(sp)
    80000962:	e426                	sd	s1,8(sp)
    80000964:	1000                	addi	s0,sp,32
  struct run *r;

  acquire(&kmem.lock);
    80000966:	00010497          	auipc	s1,0x10
    8000096a:	f6248493          	addi	s1,s1,-158 # 800108c8 <kmem>
    8000096e:	8526                	mv	a0,s1
    80000970:	00000097          	auipc	ra,0x0
    80000974:	15e080e7          	jalr	350(ra) # 80000ace <acquire>
  r = kmem.freelist;
    80000978:	6c84                	ld	s1,24(s1)
  if(r)
    8000097a:	c885                	beqz	s1,800009aa <kalloc+0x4e>
    kmem.freelist = r->next;
    8000097c:	609c                	ld	a5,0(s1)
    8000097e:	00010517          	auipc	a0,0x10
    80000982:	f4a50513          	addi	a0,a0,-182 # 800108c8 <kmem>
    80000986:	ed1c                	sd	a5,24(a0)
  release(&kmem.lock);
    80000988:	00000097          	auipc	ra,0x0
    8000098c:	19a080e7          	jalr	410(ra) # 80000b22 <release>

  if(r)
    memset((char*)r, 5, PGSIZE); /* fill with junk */
    80000990:	6605                	lui	a2,0x1
    80000992:	4595                	li	a1,5
    80000994:	8526                	mv	a0,s1
    80000996:	00000097          	auipc	ra,0x0
    8000099a:	1d4080e7          	jalr	468(ra) # 80000b6a <memset>
  return (void*)r;
}
    8000099e:	8526                	mv	a0,s1
    800009a0:	60e2                	ld	ra,24(sp)
    800009a2:	6442                	ld	s0,16(sp)
    800009a4:	64a2                	ld	s1,8(sp)
    800009a6:	6105                	addi	sp,sp,32
    800009a8:	8082                	ret
  release(&kmem.lock);
    800009aa:	00010517          	auipc	a0,0x10
    800009ae:	f1e50513          	addi	a0,a0,-226 # 800108c8 <kmem>
    800009b2:	00000097          	auipc	ra,0x0
    800009b6:	170080e7          	jalr	368(ra) # 80000b22 <release>
  if(r)
    800009ba:	b7d5                	j	8000099e <kalloc+0x42>

00000000800009bc <initlock>:
#include "proc.h"
#include "defs.h"

void
initlock(struct spinlock *lk, char *name)
{
    800009bc:	1141                	addi	sp,sp,-16
    800009be:	e422                	sd	s0,8(sp)
    800009c0:	0800                	addi	s0,sp,16
  lk->name = name;
    800009c2:	e50c                	sd	a1,8(a0)
  lk->locked = 0;
    800009c4:	00052023          	sw	zero,0(a0)
  lk->cpu = 0;
    800009c8:	00053823          	sd	zero,16(a0)
}
    800009cc:	6422                	ld	s0,8(sp)
    800009ce:	0141                	addi	sp,sp,16
    800009d0:	8082                	ret

00000000800009d2 <push_off>:
/* it takes two pop_off()s to undo two push_off()s.  Also, if interrupts */
/* are initially off, then push_off, pop_off leaves them off. */

void
push_off(void)
{
    800009d2:	1101                	addi	sp,sp,-32
    800009d4:	ec06                	sd	ra,24(sp)
    800009d6:	e822                	sd	s0,16(sp)
    800009d8:	e426                	sd	s1,8(sp)
    800009da:	1000                	addi	s0,sp,32
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    800009dc:	100024f3          	csrr	s1,sstatus
    800009e0:	100027f3          	csrr	a5,sstatus
  w_sstatus(r_sstatus() & ~SSTATUS_SIE);
    800009e4:	9bf5                	andi	a5,a5,-3
  asm volatile("csrw sstatus, %0" : : "r" (x));
    800009e6:	10079073          	csrw	sstatus,a5
  int old = intr_get();

  intr_off();
  if(mycpu()->noff == 0)
    800009ea:	00001097          	auipc	ra,0x1
    800009ee:	dd6080e7          	jalr	-554(ra) # 800017c0 <mycpu>
    800009f2:	5d3c                	lw	a5,120(a0)
    800009f4:	cf89                	beqz	a5,80000a0e <push_off+0x3c>
    mycpu()->intena = old;
  mycpu()->noff += 1;
    800009f6:	00001097          	auipc	ra,0x1
    800009fa:	dca080e7          	jalr	-566(ra) # 800017c0 <mycpu>
    800009fe:	5d3c                	lw	a5,120(a0)
    80000a00:	2785                	addiw	a5,a5,1
    80000a02:	dd3c                	sw	a5,120(a0)
}
    80000a04:	60e2                	ld	ra,24(sp)
    80000a06:	6442                	ld	s0,16(sp)
    80000a08:	64a2                	ld	s1,8(sp)
    80000a0a:	6105                	addi	sp,sp,32
    80000a0c:	8082                	ret
    mycpu()->intena = old;
    80000a0e:	00001097          	auipc	ra,0x1
    80000a12:	db2080e7          	jalr	-590(ra) # 800017c0 <mycpu>
  return (x & SSTATUS_SIE) != 0;
    80000a16:	8085                	srli	s1,s1,0x1
    80000a18:	8885                	andi	s1,s1,1
    80000a1a:	dd64                	sw	s1,124(a0)
    80000a1c:	bfe9                	j	800009f6 <push_off+0x24>

0000000080000a1e <pop_off>:

void
pop_off(void)
{
    80000a1e:	1141                	addi	sp,sp,-16
    80000a20:	e406                	sd	ra,8(sp)
    80000a22:	e022                	sd	s0,0(sp)
    80000a24:	0800                	addi	s0,sp,16
  struct cpu *c = mycpu();
    80000a26:	00001097          	auipc	ra,0x1
    80000a2a:	d9a080e7          	jalr	-614(ra) # 800017c0 <mycpu>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    80000a2e:	100027f3          	csrr	a5,sstatus
  return (x & SSTATUS_SIE) != 0;
    80000a32:	8b89                	andi	a5,a5,2
  if(intr_get())
    80000a34:	ef8d                	bnez	a5,80000a6e <pop_off+0x50>
    panic("pop_off - interruptible");
  c->noff -= 1;
    80000a36:	5d3c                	lw	a5,120(a0)
    80000a38:	37fd                	addiw	a5,a5,-1
    80000a3a:	0007871b          	sext.w	a4,a5
    80000a3e:	dd3c                	sw	a5,120(a0)
  if(c->noff < 0)
    80000a40:	02079693          	slli	a3,a5,0x20
    80000a44:	0206cd63          	bltz	a3,80000a7e <pop_off+0x60>
    panic("pop_off");
  if(c->noff == 0 && c->intena)
    80000a48:	ef19                	bnez	a4,80000a66 <pop_off+0x48>
    80000a4a:	5d7c                	lw	a5,124(a0)
    80000a4c:	cf89                	beqz	a5,80000a66 <pop_off+0x48>
  asm volatile("csrr %0, sie" : "=r" (x) );
    80000a4e:	104027f3          	csrr	a5,sie
  w_sie(r_sie() | SIE_SEIE | SIE_STIE | SIE_SSIE);
    80000a52:	2227e793          	ori	a5,a5,546
  asm volatile("csrw sie, %0" : : "r" (x));
    80000a56:	10479073          	csrw	sie,a5
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    80000a5a:	100027f3          	csrr	a5,sstatus
  w_sstatus(r_sstatus() | SSTATUS_SIE);
    80000a5e:	0027e793          	ori	a5,a5,2
  asm volatile("csrw sstatus, %0" : : "r" (x));
    80000a62:	10079073          	csrw	sstatus,a5
    intr_on();
}
    80000a66:	60a2                	ld	ra,8(sp)
    80000a68:	6402                	ld	s0,0(sp)
    80000a6a:	0141                	addi	sp,sp,16
    80000a6c:	8082                	ret
    panic("pop_off - interruptible");
    80000a6e:	00005517          	auipc	a0,0x5
    80000a72:	6ea50513          	addi	a0,a0,1770 # 80006158 <userret+0xc8>
    80000a76:	00000097          	auipc	ra,0x0
    80000a7a:	ad8080e7          	jalr	-1320(ra) # 8000054e <panic>
    panic("pop_off");
    80000a7e:	00005517          	auipc	a0,0x5
    80000a82:	6f250513          	addi	a0,a0,1778 # 80006170 <userret+0xe0>
    80000a86:	00000097          	auipc	ra,0x0
    80000a8a:	ac8080e7          	jalr	-1336(ra) # 8000054e <panic>

0000000080000a8e <holding>:
{
    80000a8e:	1101                	addi	sp,sp,-32
    80000a90:	ec06                	sd	ra,24(sp)
    80000a92:	e822                	sd	s0,16(sp)
    80000a94:	e426                	sd	s1,8(sp)
    80000a96:	1000                	addi	s0,sp,32
    80000a98:	84aa                	mv	s1,a0
  push_off();
    80000a9a:	00000097          	auipc	ra,0x0
    80000a9e:	f38080e7          	jalr	-200(ra) # 800009d2 <push_off>
  r = (lk->locked && lk->cpu == mycpu());
    80000aa2:	409c                	lw	a5,0(s1)
    80000aa4:	ef81                	bnez	a5,80000abc <holding+0x2e>
    80000aa6:	4481                	li	s1,0
  pop_off();
    80000aa8:	00000097          	auipc	ra,0x0
    80000aac:	f76080e7          	jalr	-138(ra) # 80000a1e <pop_off>
}
    80000ab0:	8526                	mv	a0,s1
    80000ab2:	60e2                	ld	ra,24(sp)
    80000ab4:	6442                	ld	s0,16(sp)
    80000ab6:	64a2                	ld	s1,8(sp)
    80000ab8:	6105                	addi	sp,sp,32
    80000aba:	8082                	ret
  r = (lk->locked && lk->cpu == mycpu());
    80000abc:	6884                	ld	s1,16(s1)
    80000abe:	00001097          	auipc	ra,0x1
    80000ac2:	d02080e7          	jalr	-766(ra) # 800017c0 <mycpu>
    80000ac6:	8c89                	sub	s1,s1,a0
    80000ac8:	0014b493          	seqz	s1,s1
    80000acc:	bff1                	j	80000aa8 <holding+0x1a>

0000000080000ace <acquire>:
{
    80000ace:	1101                	addi	sp,sp,-32
    80000ad0:	ec06                	sd	ra,24(sp)
    80000ad2:	e822                	sd	s0,16(sp)
    80000ad4:	e426                	sd	s1,8(sp)
    80000ad6:	1000                	addi	s0,sp,32
    80000ad8:	84aa                	mv	s1,a0
  push_off(); /* disable interrupts to avoid deadlock. */
    80000ada:	00000097          	auipc	ra,0x0
    80000ade:	ef8080e7          	jalr	-264(ra) # 800009d2 <push_off>
  if(holding(lk))
    80000ae2:	8526                	mv	a0,s1
    80000ae4:	00000097          	auipc	ra,0x0
    80000ae8:	faa080e7          	jalr	-86(ra) # 80000a8e <holding>
  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
    80000aec:	4705                	li	a4,1
  if(holding(lk))
    80000aee:	e115                	bnez	a0,80000b12 <acquire+0x44>
  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
    80000af0:	87ba                	mv	a5,a4
    80000af2:	0cf4a7af          	amoswap.w.aq	a5,a5,(s1)
    80000af6:	2781                	sext.w	a5,a5
    80000af8:	ffe5                	bnez	a5,80000af0 <acquire+0x22>
  __sync_synchronize();
    80000afa:	0ff0000f          	fence
  lk->cpu = mycpu();
    80000afe:	00001097          	auipc	ra,0x1
    80000b02:	cc2080e7          	jalr	-830(ra) # 800017c0 <mycpu>
    80000b06:	e888                	sd	a0,16(s1)
}
    80000b08:	60e2                	ld	ra,24(sp)
    80000b0a:	6442                	ld	s0,16(sp)
    80000b0c:	64a2                	ld	s1,8(sp)
    80000b0e:	6105                	addi	sp,sp,32
    80000b10:	8082                	ret
    panic("acquire");
    80000b12:	00005517          	auipc	a0,0x5
    80000b16:	66650513          	addi	a0,a0,1638 # 80006178 <userret+0xe8>
    80000b1a:	00000097          	auipc	ra,0x0
    80000b1e:	a34080e7          	jalr	-1484(ra) # 8000054e <panic>

0000000080000b22 <release>:
{
    80000b22:	1101                	addi	sp,sp,-32
    80000b24:	ec06                	sd	ra,24(sp)
    80000b26:	e822                	sd	s0,16(sp)
    80000b28:	e426                	sd	s1,8(sp)
    80000b2a:	1000                	addi	s0,sp,32
    80000b2c:	84aa                	mv	s1,a0
  if(!holding(lk))
    80000b2e:	00000097          	auipc	ra,0x0
    80000b32:	f60080e7          	jalr	-160(ra) # 80000a8e <holding>
    80000b36:	c115                	beqz	a0,80000b5a <release+0x38>
  lk->cpu = 0;
    80000b38:	0004b823          	sd	zero,16(s1)
  __sync_synchronize();
    80000b3c:	0ff0000f          	fence
  __sync_lock_release(&lk->locked);
    80000b40:	0f50000f          	fence	iorw,ow
    80000b44:	0804a02f          	amoswap.w	zero,zero,(s1)
  pop_off();
    80000b48:	00000097          	auipc	ra,0x0
    80000b4c:	ed6080e7          	jalr	-298(ra) # 80000a1e <pop_off>
}
    80000b50:	60e2                	ld	ra,24(sp)
    80000b52:	6442                	ld	s0,16(sp)
    80000b54:	64a2                	ld	s1,8(sp)
    80000b56:	6105                	addi	sp,sp,32
    80000b58:	8082                	ret
    panic("release");
    80000b5a:	00005517          	auipc	a0,0x5
    80000b5e:	62650513          	addi	a0,a0,1574 # 80006180 <userret+0xf0>
    80000b62:	00000097          	auipc	ra,0x0
    80000b66:	9ec080e7          	jalr	-1556(ra) # 8000054e <panic>

0000000080000b6a <memset>:
#include "types.h"

void*
memset(void *dst, int c, uint n)
{
    80000b6a:	1141                	addi	sp,sp,-16
    80000b6c:	e422                	sd	s0,8(sp)
    80000b6e:	0800                	addi	s0,sp,16
  char *cdst = (char *) dst;
  int i;
  for(i = 0; i < n; i++){
    80000b70:	ce09                	beqz	a2,80000b8a <memset+0x20>
    80000b72:	87aa                	mv	a5,a0
    80000b74:	fff6071b          	addiw	a4,a2,-1
    80000b78:	1702                	slli	a4,a4,0x20
    80000b7a:	9301                	srli	a4,a4,0x20
    80000b7c:	0705                	addi	a4,a4,1
    80000b7e:	972a                	add	a4,a4,a0
    cdst[i] = c;
    80000b80:	00b78023          	sb	a1,0(a5) # 2000 <_entry-0x7fffe000>
  for(i = 0; i < n; i++){
    80000b84:	0785                	addi	a5,a5,1
    80000b86:	fee79de3          	bne	a5,a4,80000b80 <memset+0x16>
  }
  return dst;
}
    80000b8a:	6422                	ld	s0,8(sp)
    80000b8c:	0141                	addi	sp,sp,16
    80000b8e:	8082                	ret

0000000080000b90 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint n)
{
    80000b90:	1141                	addi	sp,sp,-16
    80000b92:	e422                	sd	s0,8(sp)
    80000b94:	0800                	addi	s0,sp,16
  const uchar *s1, *s2;

  s1 = v1;
  s2 = v2;
  while(n-- > 0){
    80000b96:	ca05                	beqz	a2,80000bc6 <memcmp+0x36>
    80000b98:	fff6069b          	addiw	a3,a2,-1
    80000b9c:	1682                	slli	a3,a3,0x20
    80000b9e:	9281                	srli	a3,a3,0x20
    80000ba0:	0685                	addi	a3,a3,1
    80000ba2:	96aa                	add	a3,a3,a0
    if(*s1 != *s2)
    80000ba4:	00054783          	lbu	a5,0(a0)
    80000ba8:	0005c703          	lbu	a4,0(a1)
    80000bac:	00e79863          	bne	a5,a4,80000bbc <memcmp+0x2c>
      return *s1 - *s2;
    s1++, s2++;
    80000bb0:	0505                	addi	a0,a0,1
    80000bb2:	0585                	addi	a1,a1,1
  while(n-- > 0){
    80000bb4:	fed518e3          	bne	a0,a3,80000ba4 <memcmp+0x14>
  }

  return 0;
    80000bb8:	4501                	li	a0,0
    80000bba:	a019                	j	80000bc0 <memcmp+0x30>
      return *s1 - *s2;
    80000bbc:	40e7853b          	subw	a0,a5,a4
}
    80000bc0:	6422                	ld	s0,8(sp)
    80000bc2:	0141                	addi	sp,sp,16
    80000bc4:	8082                	ret
  return 0;
    80000bc6:	4501                	li	a0,0
    80000bc8:	bfe5                	j	80000bc0 <memcmp+0x30>

0000000080000bca <memmove>:

void*
memmove(void *dst, const void *src, uint n)
{
    80000bca:	1141                	addi	sp,sp,-16
    80000bcc:	e422                	sd	s0,8(sp)
    80000bce:	0800                	addi	s0,sp,16
  const char *s;
  char *d;

  s = src;
  d = dst;
  if(s < d && s + n > d){
    80000bd0:	02a5e563          	bltu	a1,a0,80000bfa <memmove+0x30>
    s += n;
    d += n;
    while(n-- > 0)
      *--d = *--s;
  } else
    while(n-- > 0)
    80000bd4:	fff6069b          	addiw	a3,a2,-1
    80000bd8:	ce11                	beqz	a2,80000bf4 <memmove+0x2a>
    80000bda:	1682                	slli	a3,a3,0x20
    80000bdc:	9281                	srli	a3,a3,0x20
    80000bde:	0685                	addi	a3,a3,1
    80000be0:	96ae                	add	a3,a3,a1
    80000be2:	87aa                	mv	a5,a0
      *d++ = *s++;
    80000be4:	0585                	addi	a1,a1,1
    80000be6:	0785                	addi	a5,a5,1
    80000be8:	fff5c703          	lbu	a4,-1(a1)
    80000bec:	fee78fa3          	sb	a4,-1(a5)
    while(n-- > 0)
    80000bf0:	fed59ae3          	bne	a1,a3,80000be4 <memmove+0x1a>

  return dst;
}
    80000bf4:	6422                	ld	s0,8(sp)
    80000bf6:	0141                	addi	sp,sp,16
    80000bf8:	8082                	ret
  if(s < d && s + n > d){
    80000bfa:	02061713          	slli	a4,a2,0x20
    80000bfe:	9301                	srli	a4,a4,0x20
    80000c00:	00e587b3          	add	a5,a1,a4
    80000c04:	fcf578e3          	bgeu	a0,a5,80000bd4 <memmove+0xa>
    d += n;
    80000c08:	972a                	add	a4,a4,a0
    while(n-- > 0)
    80000c0a:	fff6069b          	addiw	a3,a2,-1
    80000c0e:	d27d                	beqz	a2,80000bf4 <memmove+0x2a>
    80000c10:	02069613          	slli	a2,a3,0x20
    80000c14:	9201                	srli	a2,a2,0x20
    80000c16:	fff64613          	not	a2,a2
    80000c1a:	963e                	add	a2,a2,a5
      *--d = *--s;
    80000c1c:	17fd                	addi	a5,a5,-1
    80000c1e:	177d                	addi	a4,a4,-1
    80000c20:	0007c683          	lbu	a3,0(a5)
    80000c24:	00d70023          	sb	a3,0(a4)
    while(n-- > 0)
    80000c28:	fec79ae3          	bne	a5,a2,80000c1c <memmove+0x52>
    80000c2c:	b7e1                	j	80000bf4 <memmove+0x2a>

0000000080000c2e <memcpy>:

/* memcpy exists to placate GCC.  Use memmove. */
void*
memcpy(void *dst, const void *src, uint n)
{
    80000c2e:	1141                	addi	sp,sp,-16
    80000c30:	e406                	sd	ra,8(sp)
    80000c32:	e022                	sd	s0,0(sp)
    80000c34:	0800                	addi	s0,sp,16
  return memmove(dst, src, n);
    80000c36:	00000097          	auipc	ra,0x0
    80000c3a:	f94080e7          	jalr	-108(ra) # 80000bca <memmove>
}
    80000c3e:	60a2                	ld	ra,8(sp)
    80000c40:	6402                	ld	s0,0(sp)
    80000c42:	0141                	addi	sp,sp,16
    80000c44:	8082                	ret

0000000080000c46 <strncmp>:

int
strncmp(const char *p, const char *q, uint n)
{
    80000c46:	1141                	addi	sp,sp,-16
    80000c48:	e422                	sd	s0,8(sp)
    80000c4a:	0800                	addi	s0,sp,16
  while(n > 0 && *p && *p == *q)
    80000c4c:	ce11                	beqz	a2,80000c68 <strncmp+0x22>
    80000c4e:	00054783          	lbu	a5,0(a0)
    80000c52:	cf89                	beqz	a5,80000c6c <strncmp+0x26>
    80000c54:	0005c703          	lbu	a4,0(a1)
    80000c58:	00f71a63          	bne	a4,a5,80000c6c <strncmp+0x26>
    n--, p++, q++;
    80000c5c:	367d                	addiw	a2,a2,-1
    80000c5e:	0505                	addi	a0,a0,1
    80000c60:	0585                	addi	a1,a1,1
  while(n > 0 && *p && *p == *q)
    80000c62:	f675                	bnez	a2,80000c4e <strncmp+0x8>
  if(n == 0)
    return 0;
    80000c64:	4501                	li	a0,0
    80000c66:	a809                	j	80000c78 <strncmp+0x32>
    80000c68:	4501                	li	a0,0
    80000c6a:	a039                	j	80000c78 <strncmp+0x32>
  if(n == 0)
    80000c6c:	ca09                	beqz	a2,80000c7e <strncmp+0x38>
  return (uchar)*p - (uchar)*q;
    80000c6e:	00054503          	lbu	a0,0(a0)
    80000c72:	0005c783          	lbu	a5,0(a1)
    80000c76:	9d1d                	subw	a0,a0,a5
}
    80000c78:	6422                	ld	s0,8(sp)
    80000c7a:	0141                	addi	sp,sp,16
    80000c7c:	8082                	ret
    return 0;
    80000c7e:	4501                	li	a0,0
    80000c80:	bfe5                	j	80000c78 <strncmp+0x32>

0000000080000c82 <strncpy>:

char*
strncpy(char *s, const char *t, int n)
{
    80000c82:	1141                	addi	sp,sp,-16
    80000c84:	e422                	sd	s0,8(sp)
    80000c86:	0800                	addi	s0,sp,16
  char *os;

  os = s;
  while(n-- > 0 && (*s++ = *t++) != 0)
    80000c88:	872a                	mv	a4,a0
    80000c8a:	8832                	mv	a6,a2
    80000c8c:	367d                	addiw	a2,a2,-1
    80000c8e:	01005963          	blez	a6,80000ca0 <strncpy+0x1e>
    80000c92:	0705                	addi	a4,a4,1
    80000c94:	0005c783          	lbu	a5,0(a1)
    80000c98:	fef70fa3          	sb	a5,-1(a4)
    80000c9c:	0585                	addi	a1,a1,1
    80000c9e:	f7f5                	bnez	a5,80000c8a <strncpy+0x8>
    ;
  while(n-- > 0)
    80000ca0:	86ba                	mv	a3,a4
    80000ca2:	00c05c63          	blez	a2,80000cba <strncpy+0x38>
    *s++ = 0;
    80000ca6:	0685                	addi	a3,a3,1
    80000ca8:	fe068fa3          	sb	zero,-1(a3)
  while(n-- > 0)
    80000cac:	fff6c793          	not	a5,a3
    80000cb0:	9fb9                	addw	a5,a5,a4
    80000cb2:	010787bb          	addw	a5,a5,a6
    80000cb6:	fef048e3          	bgtz	a5,80000ca6 <strncpy+0x24>
  return os;
}
    80000cba:	6422                	ld	s0,8(sp)
    80000cbc:	0141                	addi	sp,sp,16
    80000cbe:	8082                	ret

0000000080000cc0 <safestrcpy>:

/* Like strncpy but guaranteed to NUL-terminate. */
char*
safestrcpy(char *s, const char *t, int n)
{
    80000cc0:	1141                	addi	sp,sp,-16
    80000cc2:	e422                	sd	s0,8(sp)
    80000cc4:	0800                	addi	s0,sp,16
  char *os;

  os = s;
  if(n <= 0)
    80000cc6:	02c05363          	blez	a2,80000cec <safestrcpy+0x2c>
    80000cca:	fff6069b          	addiw	a3,a2,-1
    80000cce:	1682                	slli	a3,a3,0x20
    80000cd0:	9281                	srli	a3,a3,0x20
    80000cd2:	96ae                	add	a3,a3,a1
    80000cd4:	87aa                	mv	a5,a0
    return os;
  while(--n > 0 && (*s++ = *t++) != 0)
    80000cd6:	00d58963          	beq	a1,a3,80000ce8 <safestrcpy+0x28>
    80000cda:	0585                	addi	a1,a1,1
    80000cdc:	0785                	addi	a5,a5,1
    80000cde:	fff5c703          	lbu	a4,-1(a1)
    80000ce2:	fee78fa3          	sb	a4,-1(a5)
    80000ce6:	fb65                	bnez	a4,80000cd6 <safestrcpy+0x16>
    ;
  *s = 0;
    80000ce8:	00078023          	sb	zero,0(a5)
  return os;
}
    80000cec:	6422                	ld	s0,8(sp)
    80000cee:	0141                	addi	sp,sp,16
    80000cf0:	8082                	ret

0000000080000cf2 <strlen>:

int
strlen(const char *s)
{
    80000cf2:	1141                	addi	sp,sp,-16
    80000cf4:	e422                	sd	s0,8(sp)
    80000cf6:	0800                	addi	s0,sp,16
  int n;

  for(n = 0; s[n]; n++)
    80000cf8:	00054783          	lbu	a5,0(a0)
    80000cfc:	cf91                	beqz	a5,80000d18 <strlen+0x26>
    80000cfe:	0505                	addi	a0,a0,1
    80000d00:	87aa                	mv	a5,a0
    80000d02:	4685                	li	a3,1
    80000d04:	9e89                	subw	a3,a3,a0
    80000d06:	00f6853b          	addw	a0,a3,a5
    80000d0a:	0785                	addi	a5,a5,1
    80000d0c:	fff7c703          	lbu	a4,-1(a5)
    80000d10:	fb7d                	bnez	a4,80000d06 <strlen+0x14>
    ;
  return n;
}
    80000d12:	6422                	ld	s0,8(sp)
    80000d14:	0141                	addi	sp,sp,16
    80000d16:	8082                	ret
  for(n = 0; s[n]; n++)
    80000d18:	4501                	li	a0,0
    80000d1a:	bfe5                	j	80000d12 <strlen+0x20>

0000000080000d1c <main>:
volatile static int started = 0;

/* start() jumps here in supervisor mode on all CPUs. */
void
main()
{
    80000d1c:	1141                	addi	sp,sp,-16
    80000d1e:	e406                	sd	ra,8(sp)
    80000d20:	e022                	sd	s0,0(sp)
    80000d22:	0800                	addi	s0,sp,16
  if(cpuid() == 0){
    80000d24:	00001097          	auipc	ra,0x1
    80000d28:	a8c080e7          	jalr	-1396(ra) # 800017b0 <cpuid>
    virtio_disk_init(); /* emulated hard disk */
    userinit();      /* first user process */
    __sync_synchronize();
    started = 1;
  } else {
    while(started == 0)
    80000d2c:	00024717          	auipc	a4,0x24
    80000d30:	2d870713          	addi	a4,a4,728 # 80025004 <started>
  if(cpuid() == 0){
    80000d34:	c139                	beqz	a0,80000d7a <main+0x5e>
    while(started == 0)
    80000d36:	431c                	lw	a5,0(a4)
    80000d38:	2781                	sext.w	a5,a5
    80000d3a:	dff5                	beqz	a5,80000d36 <main+0x1a>
      ;
    __sync_synchronize();
    80000d3c:	0ff0000f          	fence
    printf("hart %d starting\n", cpuid());
    80000d40:	00001097          	auipc	ra,0x1
    80000d44:	a70080e7          	jalr	-1424(ra) # 800017b0 <cpuid>
    80000d48:	85aa                	mv	a1,a0
    80000d4a:	00005517          	auipc	a0,0x5
    80000d4e:	43e50513          	addi	a0,a0,1086 # 80006188 <userret+0xf8>
    80000d52:	00000097          	auipc	ra,0x0
    80000d56:	846080e7          	jalr	-1978(ra) # 80000598 <printf>
    kvminithart();    /* turn on paging */
    80000d5a:	00000097          	auipc	ra,0x0
    80000d5e:	1d2080e7          	jalr	466(ra) # 80000f2c <kvminithart>
    trapinithart();   /* install kernel trap vector */
    80000d62:	00001097          	auipc	ra,0x1
    80000d66:	662080e7          	jalr	1634(ra) # 800023c4 <trapinithart>
    plicinithart();   /* ask PLIC for device interrupts */
    80000d6a:	00005097          	auipc	ra,0x5
    80000d6e:	b16080e7          	jalr	-1258(ra) # 80005880 <plicinithart>
  }

  scheduler();        
    80000d72:	00001097          	auipc	ra,0x1
    80000d76:	fa8080e7          	jalr	-88(ra) # 80001d1a <scheduler>
    consoleinit();
    80000d7a:	fffff097          	auipc	ra,0xfffff
    80000d7e:	6e6080e7          	jalr	1766(ra) # 80000460 <consoleinit>
    printfinit();
    80000d82:	00000097          	auipc	ra,0x0
    80000d86:	9fc080e7          	jalr	-1540(ra) # 8000077e <printfinit>
    printf("hart %d starting\n", cpuid());
    80000d8a:	00001097          	auipc	ra,0x1
    80000d8e:	a26080e7          	jalr	-1498(ra) # 800017b0 <cpuid>
    80000d92:	85aa                	mv	a1,a0
    80000d94:	00005517          	auipc	a0,0x5
    80000d98:	3f450513          	addi	a0,a0,1012 # 80006188 <userret+0xf8>
    80000d9c:	fffff097          	auipc	ra,0xfffff
    80000da0:	7fc080e7          	jalr	2044(ra) # 80000598 <printf>
    kinit();         /* physical page allocator */
    80000da4:	00000097          	auipc	ra,0x0
    80000da8:	b7c080e7          	jalr	-1156(ra) # 80000920 <kinit>
    kvminit();       /* create kernel page table */
    80000dac:	00000097          	auipc	ra,0x0
    80000db0:	2fe080e7          	jalr	766(ra) # 800010aa <kvminit>
    kvminithart();   /* turn on paging */
    80000db4:	00000097          	auipc	ra,0x0
    80000db8:	178080e7          	jalr	376(ra) # 80000f2c <kvminithart>
    procinit();      /* process table */
    80000dbc:	00001097          	auipc	ra,0x1
    80000dc0:	924080e7          	jalr	-1756(ra) # 800016e0 <procinit>
    trapinit();      /* trap vectors */
    80000dc4:	00001097          	auipc	ra,0x1
    80000dc8:	5d8080e7          	jalr	1496(ra) # 8000239c <trapinit>
    trapinithart();  /* install kernel trap vector */
    80000dcc:	00001097          	auipc	ra,0x1
    80000dd0:	5f8080e7          	jalr	1528(ra) # 800023c4 <trapinithart>
    plicinit();      /* set up interrupt controller */
    80000dd4:	00005097          	auipc	ra,0x5
    80000dd8:	a96080e7          	jalr	-1386(ra) # 8000586a <plicinit>
    plicinithart();  /* ask PLIC for device interrupts */
    80000ddc:	00005097          	auipc	ra,0x5
    80000de0:	aa4080e7          	jalr	-1372(ra) # 80005880 <plicinithart>
    binit();         /* buffer cache */
    80000de4:	00002097          	auipc	ra,0x2
    80000de8:	ce0080e7          	jalr	-800(ra) # 80002ac4 <binit>
    iinit();         /* inode cache */
    80000dec:	00002097          	auipc	ra,0x2
    80000df0:	370080e7          	jalr	880(ra) # 8000315c <iinit>
    fileinit();      /* file table */
    80000df4:	00003097          	auipc	ra,0x3
    80000df8:	2e6080e7          	jalr	742(ra) # 800040da <fileinit>
    virtio_disk_init(); /* emulated hard disk */
    80000dfc:	00005097          	auipc	ra,0x5
    80000e00:	b9e080e7          	jalr	-1122(ra) # 8000599a <virtio_disk_init>
    userinit();      /* first user process */
    80000e04:	00001097          	auipc	ra,0x1
    80000e08:	c48080e7          	jalr	-952(ra) # 80001a4c <userinit>
    __sync_synchronize();
    80000e0c:	0ff0000f          	fence
    started = 1;
    80000e10:	4785                	li	a5,1
    80000e12:	00024717          	auipc	a4,0x24
    80000e16:	1ef72923          	sw	a5,498(a4) # 80025004 <started>
    80000e1a:	bfa1                	j	80000d72 <main+0x56>

0000000080000e1c <walk>:
/*   21..39 -- 9 bits of level-1 index. */
/*   12..20 -- 9 bits of level-0 index. */
/*    0..12 -- 12 bits of byte offset within the page. */
static pte_t *
walk(pagetable_t pagetable, uint64 va, int alloc)
{
    80000e1c:	7139                	addi	sp,sp,-64
    80000e1e:	fc06                	sd	ra,56(sp)
    80000e20:	f822                	sd	s0,48(sp)
    80000e22:	f426                	sd	s1,40(sp)
    80000e24:	f04a                	sd	s2,32(sp)
    80000e26:	ec4e                	sd	s3,24(sp)
    80000e28:	e852                	sd	s4,16(sp)
    80000e2a:	e456                	sd	s5,8(sp)
    80000e2c:	e05a                	sd	s6,0(sp)
    80000e2e:	0080                	addi	s0,sp,64
    80000e30:	84aa                	mv	s1,a0
    80000e32:	89ae                	mv	s3,a1
    80000e34:	8ab2                	mv	s5,a2
  if(va >= MAXVA)
    80000e36:	57fd                	li	a5,-1
    80000e38:	83e9                	srli	a5,a5,0x1a
    80000e3a:	4a79                	li	s4,30
    panic("walk");

  for(int level = 2; level > 0; level--) {
    80000e3c:	4b31                	li	s6,12
  if(va >= MAXVA)
    80000e3e:	04b7f263          	bgeu	a5,a1,80000e82 <walk+0x66>
    panic("walk");
    80000e42:	00005517          	auipc	a0,0x5
    80000e46:	35e50513          	addi	a0,a0,862 # 800061a0 <userret+0x110>
    80000e4a:	fffff097          	auipc	ra,0xfffff
    80000e4e:	704080e7          	jalr	1796(ra) # 8000054e <panic>
    pte_t *pte = &pagetable[PX(level, va)];
    if(*pte & PTE_V) {
      pagetable = (pagetable_t)PTE2PA(*pte);
    } else {
      if(!alloc || (pagetable = (pde_t*)kalloc()) == 0)
    80000e52:	060a8663          	beqz	s5,80000ebe <walk+0xa2>
    80000e56:	00000097          	auipc	ra,0x0
    80000e5a:	b06080e7          	jalr	-1274(ra) # 8000095c <kalloc>
    80000e5e:	84aa                	mv	s1,a0
    80000e60:	c529                	beqz	a0,80000eaa <walk+0x8e>
        return 0;
      memset(pagetable, 0, PGSIZE);
    80000e62:	6605                	lui	a2,0x1
    80000e64:	4581                	li	a1,0
    80000e66:	00000097          	auipc	ra,0x0
    80000e6a:	d04080e7          	jalr	-764(ra) # 80000b6a <memset>
      *pte = PA2PTE(pagetable) | PTE_V;
    80000e6e:	00c4d793          	srli	a5,s1,0xc
    80000e72:	07aa                	slli	a5,a5,0xa
    80000e74:	0017e793          	ori	a5,a5,1
    80000e78:	00f93023          	sd	a5,0(s2)
  for(int level = 2; level > 0; level--) {
    80000e7c:	3a5d                	addiw	s4,s4,-9
    80000e7e:	036a0063          	beq	s4,s6,80000e9e <walk+0x82>
    pte_t *pte = &pagetable[PX(level, va)];
    80000e82:	0149d933          	srl	s2,s3,s4
    80000e86:	1ff97913          	andi	s2,s2,511
    80000e8a:	090e                	slli	s2,s2,0x3
    80000e8c:	9926                	add	s2,s2,s1
    if(*pte & PTE_V) {
    80000e8e:	00093483          	ld	s1,0(s2)
    80000e92:	0014f793          	andi	a5,s1,1
    80000e96:	dfd5                	beqz	a5,80000e52 <walk+0x36>
      pagetable = (pagetable_t)PTE2PA(*pte);
    80000e98:	80a9                	srli	s1,s1,0xa
    80000e9a:	04b2                	slli	s1,s1,0xc
    80000e9c:	b7c5                	j	80000e7c <walk+0x60>
    }
  }
  return &pagetable[PX(0, va)];
    80000e9e:	00c9d513          	srli	a0,s3,0xc
    80000ea2:	1ff57513          	andi	a0,a0,511
    80000ea6:	050e                	slli	a0,a0,0x3
    80000ea8:	9526                	add	a0,a0,s1
}
    80000eaa:	70e2                	ld	ra,56(sp)
    80000eac:	7442                	ld	s0,48(sp)
    80000eae:	74a2                	ld	s1,40(sp)
    80000eb0:	7902                	ld	s2,32(sp)
    80000eb2:	69e2                	ld	s3,24(sp)
    80000eb4:	6a42                	ld	s4,16(sp)
    80000eb6:	6aa2                	ld	s5,8(sp)
    80000eb8:	6b02                	ld	s6,0(sp)
    80000eba:	6121                	addi	sp,sp,64
    80000ebc:	8082                	ret
        return 0;
    80000ebe:	4501                	li	a0,0
    80000ec0:	b7ed                	j	80000eaa <walk+0x8e>

0000000080000ec2 <freewalk>:

/* Recursively free page-table pages. */
/* All leaf mappings must already have been removed. */
static void
freewalk(pagetable_t pagetable)
{
    80000ec2:	7179                	addi	sp,sp,-48
    80000ec4:	f406                	sd	ra,40(sp)
    80000ec6:	f022                	sd	s0,32(sp)
    80000ec8:	ec26                	sd	s1,24(sp)
    80000eca:	e84a                	sd	s2,16(sp)
    80000ecc:	e44e                	sd	s3,8(sp)
    80000ece:	e052                	sd	s4,0(sp)
    80000ed0:	1800                	addi	s0,sp,48
    80000ed2:	8a2a                	mv	s4,a0
  /* there are 2^9 = 512 PTEs in a page table. */
  for(int i = 0; i < 512; i++){
    80000ed4:	84aa                	mv	s1,a0
    80000ed6:	6905                	lui	s2,0x1
    80000ed8:	992a                	add	s2,s2,a0
    pte_t pte = pagetable[i];
    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X)) == 0){
    80000eda:	4985                	li	s3,1
    80000edc:	a821                	j	80000ef4 <freewalk+0x32>
      /* this PTE points to a lower-level page table. */
      uint64 child = PTE2PA(pte);
    80000ede:	8129                	srli	a0,a0,0xa
      freewalk((pagetable_t)child);
    80000ee0:	0532                	slli	a0,a0,0xc
    80000ee2:	00000097          	auipc	ra,0x0
    80000ee6:	fe0080e7          	jalr	-32(ra) # 80000ec2 <freewalk>
      pagetable[i] = 0;
    80000eea:	0004b023          	sd	zero,0(s1)
  for(int i = 0; i < 512; i++){
    80000eee:	04a1                	addi	s1,s1,8
    80000ef0:	03248163          	beq	s1,s2,80000f12 <freewalk+0x50>
    pte_t pte = pagetable[i];
    80000ef4:	6088                	ld	a0,0(s1)
    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X)) == 0){
    80000ef6:	00f57793          	andi	a5,a0,15
    80000efa:	ff3782e3          	beq	a5,s3,80000ede <freewalk+0x1c>
    } else if(pte & PTE_V){
    80000efe:	8905                	andi	a0,a0,1
    80000f00:	d57d                	beqz	a0,80000eee <freewalk+0x2c>
      panic("freewalk: leaf");
    80000f02:	00005517          	auipc	a0,0x5
    80000f06:	2a650513          	addi	a0,a0,678 # 800061a8 <userret+0x118>
    80000f0a:	fffff097          	auipc	ra,0xfffff
    80000f0e:	644080e7          	jalr	1604(ra) # 8000054e <panic>
    }
  }
  kfree((void*)pagetable);
    80000f12:	8552                	mv	a0,s4
    80000f14:	00000097          	auipc	ra,0x0
    80000f18:	94c080e7          	jalr	-1716(ra) # 80000860 <kfree>
}
    80000f1c:	70a2                	ld	ra,40(sp)
    80000f1e:	7402                	ld	s0,32(sp)
    80000f20:	64e2                	ld	s1,24(sp)
    80000f22:	6942                	ld	s2,16(sp)
    80000f24:	69a2                	ld	s3,8(sp)
    80000f26:	6a02                	ld	s4,0(sp)
    80000f28:	6145                	addi	sp,sp,48
    80000f2a:	8082                	ret

0000000080000f2c <kvminithart>:
{
    80000f2c:	1141                	addi	sp,sp,-16
    80000f2e:	e422                	sd	s0,8(sp)
    80000f30:	0800                	addi	s0,sp,16
/* perhaps this also flushes the TLB. */
static inline void
sfence_vma()
{
  /* the zero, zero means flush all TLB entries. */
  asm volatile("sfence.vma zero, zero");
    80000f32:	12000073          	sfence.vma
  w_satp(MAKE_SATP(kernel_pagetable));
    80000f36:	00024797          	auipc	a5,0x24
    80000f3a:	0d27b783          	ld	a5,210(a5) # 80025008 <kernel_pagetable>
    80000f3e:	83b1                	srli	a5,a5,0xc
    80000f40:	577d                	li	a4,-1
    80000f42:	177e                	slli	a4,a4,0x3f
    80000f44:	8fd9                	or	a5,a5,a4
  asm volatile("csrw satp, %0" : : "r" (x));
    80000f46:	18079073          	csrw	satp,a5
}
    80000f4a:	6422                	ld	s0,8(sp)
    80000f4c:	0141                	addi	sp,sp,16
    80000f4e:	8082                	ret

0000000080000f50 <walkaddr>:
{
    80000f50:	1141                	addi	sp,sp,-16
    80000f52:	e406                	sd	ra,8(sp)
    80000f54:	e022                	sd	s0,0(sp)
    80000f56:	0800                	addi	s0,sp,16
  pte = walk(pagetable, va, 0);
    80000f58:	4601                	li	a2,0
    80000f5a:	00000097          	auipc	ra,0x0
    80000f5e:	ec2080e7          	jalr	-318(ra) # 80000e1c <walk>
  if(pte == 0)
    80000f62:	c105                	beqz	a0,80000f82 <walkaddr+0x32>
  if((*pte & PTE_V) == 0)
    80000f64:	611c                	ld	a5,0(a0)
  if((*pte & PTE_U) == 0)
    80000f66:	0117f693          	andi	a3,a5,17
    80000f6a:	4745                	li	a4,17
    return 0;
    80000f6c:	4501                	li	a0,0
  if((*pte & PTE_U) == 0)
    80000f6e:	00e68663          	beq	a3,a4,80000f7a <walkaddr+0x2a>
}
    80000f72:	60a2                	ld	ra,8(sp)
    80000f74:	6402                	ld	s0,0(sp)
    80000f76:	0141                	addi	sp,sp,16
    80000f78:	8082                	ret
  pa = PTE2PA(*pte);
    80000f7a:	83a9                	srli	a5,a5,0xa
    80000f7c:	00c79513          	slli	a0,a5,0xc
  return pa;
    80000f80:	bfcd                	j	80000f72 <walkaddr+0x22>
    return 0;
    80000f82:	4501                	li	a0,0
    80000f84:	b7fd                	j	80000f72 <walkaddr+0x22>

0000000080000f86 <kvmpa>:
{
    80000f86:	1101                	addi	sp,sp,-32
    80000f88:	ec06                	sd	ra,24(sp)
    80000f8a:	e822                	sd	s0,16(sp)
    80000f8c:	e426                	sd	s1,8(sp)
    80000f8e:	1000                	addi	s0,sp,32
    80000f90:	85aa                	mv	a1,a0
  uint64 off = va % PGSIZE;
    80000f92:	03451493          	slli	s1,a0,0x34
  pte = walk(kernel_pagetable, va, 0);
    80000f96:	4601                	li	a2,0
    80000f98:	00024517          	auipc	a0,0x24
    80000f9c:	07053503          	ld	a0,112(a0) # 80025008 <kernel_pagetable>
    80000fa0:	00000097          	auipc	ra,0x0
    80000fa4:	e7c080e7          	jalr	-388(ra) # 80000e1c <walk>
  if(pte == 0)
    80000fa8:	cd11                	beqz	a0,80000fc4 <kvmpa+0x3e>
    80000faa:	90d1                	srli	s1,s1,0x34
  if((*pte & PTE_V) == 0)
    80000fac:	6108                	ld	a0,0(a0)
    80000fae:	00157793          	andi	a5,a0,1
    80000fb2:	c38d                	beqz	a5,80000fd4 <kvmpa+0x4e>
  pa = PTE2PA(*pte);
    80000fb4:	8129                	srli	a0,a0,0xa
    80000fb6:	0532                	slli	a0,a0,0xc
}
    80000fb8:	9526                	add	a0,a0,s1
    80000fba:	60e2                	ld	ra,24(sp)
    80000fbc:	6442                	ld	s0,16(sp)
    80000fbe:	64a2                	ld	s1,8(sp)
    80000fc0:	6105                	addi	sp,sp,32
    80000fc2:	8082                	ret
    panic("kvmpa");
    80000fc4:	00005517          	auipc	a0,0x5
    80000fc8:	1f450513          	addi	a0,a0,500 # 800061b8 <userret+0x128>
    80000fcc:	fffff097          	auipc	ra,0xfffff
    80000fd0:	582080e7          	jalr	1410(ra) # 8000054e <panic>
    panic("kvmpa");
    80000fd4:	00005517          	auipc	a0,0x5
    80000fd8:	1e450513          	addi	a0,a0,484 # 800061b8 <userret+0x128>
    80000fdc:	fffff097          	auipc	ra,0xfffff
    80000fe0:	572080e7          	jalr	1394(ra) # 8000054e <panic>

0000000080000fe4 <mappages>:
{
    80000fe4:	715d                	addi	sp,sp,-80
    80000fe6:	e486                	sd	ra,72(sp)
    80000fe8:	e0a2                	sd	s0,64(sp)
    80000fea:	fc26                	sd	s1,56(sp)
    80000fec:	f84a                	sd	s2,48(sp)
    80000fee:	f44e                	sd	s3,40(sp)
    80000ff0:	f052                	sd	s4,32(sp)
    80000ff2:	ec56                	sd	s5,24(sp)
    80000ff4:	e85a                	sd	s6,16(sp)
    80000ff6:	e45e                	sd	s7,8(sp)
    80000ff8:	0880                	addi	s0,sp,80
    80000ffa:	8aaa                	mv	s5,a0
    80000ffc:	8b3a                	mv	s6,a4
  a = PGROUNDDOWN(va);
    80000ffe:	777d                	lui	a4,0xfffff
    80001000:	00e5f7b3          	and	a5,a1,a4
  last = PGROUNDDOWN(va + size - 1);
    80001004:	167d                	addi	a2,a2,-1
    80001006:	00b609b3          	add	s3,a2,a1
    8000100a:	00e9f9b3          	and	s3,s3,a4
  a = PGROUNDDOWN(va);
    8000100e:	893e                	mv	s2,a5
    80001010:	40f68a33          	sub	s4,a3,a5
    a += PGSIZE;
    80001014:	6b85                	lui	s7,0x1
    80001016:	012a04b3          	add	s1,s4,s2
    if((pte = walk(pagetable, a, 1)) == 0)
    8000101a:	4605                	li	a2,1
    8000101c:	85ca                	mv	a1,s2
    8000101e:	8556                	mv	a0,s5
    80001020:	00000097          	auipc	ra,0x0
    80001024:	dfc080e7          	jalr	-516(ra) # 80000e1c <walk>
    80001028:	c51d                	beqz	a0,80001056 <mappages+0x72>
    if(*pte & PTE_V)
    8000102a:	611c                	ld	a5,0(a0)
    8000102c:	8b85                	andi	a5,a5,1
    8000102e:	ef81                	bnez	a5,80001046 <mappages+0x62>
    *pte = PA2PTE(pa) | perm | PTE_V;
    80001030:	80b1                	srli	s1,s1,0xc
    80001032:	04aa                	slli	s1,s1,0xa
    80001034:	0164e4b3          	or	s1,s1,s6
    80001038:	0014e493          	ori	s1,s1,1
    8000103c:	e104                	sd	s1,0(a0)
    if(a == last)
    8000103e:	03390863          	beq	s2,s3,8000106e <mappages+0x8a>
    a += PGSIZE;
    80001042:	995e                	add	s2,s2,s7
    if((pte = walk(pagetable, a, 1)) == 0)
    80001044:	bfc9                	j	80001016 <mappages+0x32>
      panic("remap");
    80001046:	00005517          	auipc	a0,0x5
    8000104a:	17a50513          	addi	a0,a0,378 # 800061c0 <userret+0x130>
    8000104e:	fffff097          	auipc	ra,0xfffff
    80001052:	500080e7          	jalr	1280(ra) # 8000054e <panic>
      return -1;
    80001056:	557d                	li	a0,-1
}
    80001058:	60a6                	ld	ra,72(sp)
    8000105a:	6406                	ld	s0,64(sp)
    8000105c:	74e2                	ld	s1,56(sp)
    8000105e:	7942                	ld	s2,48(sp)
    80001060:	79a2                	ld	s3,40(sp)
    80001062:	7a02                	ld	s4,32(sp)
    80001064:	6ae2                	ld	s5,24(sp)
    80001066:	6b42                	ld	s6,16(sp)
    80001068:	6ba2                	ld	s7,8(sp)
    8000106a:	6161                	addi	sp,sp,80
    8000106c:	8082                	ret
  return 0;
    8000106e:	4501                	li	a0,0
    80001070:	b7e5                	j	80001058 <mappages+0x74>

0000000080001072 <kvmmap>:
{
    80001072:	1141                	addi	sp,sp,-16
    80001074:	e406                	sd	ra,8(sp)
    80001076:	e022                	sd	s0,0(sp)
    80001078:	0800                	addi	s0,sp,16
    8000107a:	8736                	mv	a4,a3
  if(mappages(kernel_pagetable, va, sz, pa, perm) != 0)
    8000107c:	86ae                	mv	a3,a1
    8000107e:	85aa                	mv	a1,a0
    80001080:	00024517          	auipc	a0,0x24
    80001084:	f8853503          	ld	a0,-120(a0) # 80025008 <kernel_pagetable>
    80001088:	00000097          	auipc	ra,0x0
    8000108c:	f5c080e7          	jalr	-164(ra) # 80000fe4 <mappages>
    80001090:	e509                	bnez	a0,8000109a <kvmmap+0x28>
}
    80001092:	60a2                	ld	ra,8(sp)
    80001094:	6402                	ld	s0,0(sp)
    80001096:	0141                	addi	sp,sp,16
    80001098:	8082                	ret
    panic("kvmmap");
    8000109a:	00005517          	auipc	a0,0x5
    8000109e:	12e50513          	addi	a0,a0,302 # 800061c8 <userret+0x138>
    800010a2:	fffff097          	auipc	ra,0xfffff
    800010a6:	4ac080e7          	jalr	1196(ra) # 8000054e <panic>

00000000800010aa <kvminit>:
{
    800010aa:	1101                	addi	sp,sp,-32
    800010ac:	ec06                	sd	ra,24(sp)
    800010ae:	e822                	sd	s0,16(sp)
    800010b0:	e426                	sd	s1,8(sp)
    800010b2:	1000                	addi	s0,sp,32
  kernel_pagetable = (pagetable_t) kalloc();
    800010b4:	00000097          	auipc	ra,0x0
    800010b8:	8a8080e7          	jalr	-1880(ra) # 8000095c <kalloc>
    800010bc:	00024797          	auipc	a5,0x24
    800010c0:	f4a7b623          	sd	a0,-180(a5) # 80025008 <kernel_pagetable>
  memset(kernel_pagetable, 0, PGSIZE);
    800010c4:	6605                	lui	a2,0x1
    800010c6:	4581                	li	a1,0
    800010c8:	00000097          	auipc	ra,0x0
    800010cc:	aa2080e7          	jalr	-1374(ra) # 80000b6a <memset>
  kvmmap(UART0, UART0, PGSIZE, PTE_R | PTE_W);
    800010d0:	4699                	li	a3,6
    800010d2:	6605                	lui	a2,0x1
    800010d4:	100005b7          	lui	a1,0x10000
    800010d8:	10000537          	lui	a0,0x10000
    800010dc:	00000097          	auipc	ra,0x0
    800010e0:	f96080e7          	jalr	-106(ra) # 80001072 <kvmmap>
  kvmmap(VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);
    800010e4:	4699                	li	a3,6
    800010e6:	6605                	lui	a2,0x1
    800010e8:	100015b7          	lui	a1,0x10001
    800010ec:	10001537          	lui	a0,0x10001
    800010f0:	00000097          	auipc	ra,0x0
    800010f4:	f82080e7          	jalr	-126(ra) # 80001072 <kvmmap>
  kvmmap(CLINT, CLINT, 0x10000, PTE_R | PTE_W);
    800010f8:	4699                	li	a3,6
    800010fa:	6641                	lui	a2,0x10
    800010fc:	020005b7          	lui	a1,0x2000
    80001100:	02000537          	lui	a0,0x2000
    80001104:	00000097          	auipc	ra,0x0
    80001108:	f6e080e7          	jalr	-146(ra) # 80001072 <kvmmap>
  kvmmap(PLIC, PLIC, 0x400000, PTE_R | PTE_W);
    8000110c:	4699                	li	a3,6
    8000110e:	00400637          	lui	a2,0x400
    80001112:	0c0005b7          	lui	a1,0xc000
    80001116:	0c000537          	lui	a0,0xc000
    8000111a:	00000097          	auipc	ra,0x0
    8000111e:	f58080e7          	jalr	-168(ra) # 80001072 <kvmmap>
  kvmmap(KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);
    80001122:	00006497          	auipc	s1,0x6
    80001126:	ede48493          	addi	s1,s1,-290 # 80007000 <initcode>
    8000112a:	46a9                	li	a3,10
    8000112c:	80006617          	auipc	a2,0x80006
    80001130:	ed460613          	addi	a2,a2,-300 # 7000 <_entry-0x7fff9000>
    80001134:	4585                	li	a1,1
    80001136:	05fe                	slli	a1,a1,0x1f
    80001138:	852e                	mv	a0,a1
    8000113a:	00000097          	auipc	ra,0x0
    8000113e:	f38080e7          	jalr	-200(ra) # 80001072 <kvmmap>
  kvmmap((uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);
    80001142:	4699                	li	a3,6
    80001144:	4645                	li	a2,17
    80001146:	066e                	slli	a2,a2,0x1b
    80001148:	8e05                	sub	a2,a2,s1
    8000114a:	85a6                	mv	a1,s1
    8000114c:	8526                	mv	a0,s1
    8000114e:	00000097          	auipc	ra,0x0
    80001152:	f24080e7          	jalr	-220(ra) # 80001072 <kvmmap>
  kvmmap(TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
    80001156:	46a9                	li	a3,10
    80001158:	6605                	lui	a2,0x1
    8000115a:	00005597          	auipc	a1,0x5
    8000115e:	ea658593          	addi	a1,a1,-346 # 80006000 <trampoline>
    80001162:	04000537          	lui	a0,0x4000
    80001166:	157d                	addi	a0,a0,-1
    80001168:	0532                	slli	a0,a0,0xc
    8000116a:	00000097          	auipc	ra,0x0
    8000116e:	f08080e7          	jalr	-248(ra) # 80001072 <kvmmap>
}
    80001172:	60e2                	ld	ra,24(sp)
    80001174:	6442                	ld	s0,16(sp)
    80001176:	64a2                	ld	s1,8(sp)
    80001178:	6105                	addi	sp,sp,32
    8000117a:	8082                	ret

000000008000117c <uvmunmap>:
{
    8000117c:	715d                	addi	sp,sp,-80
    8000117e:	e486                	sd	ra,72(sp)
    80001180:	e0a2                	sd	s0,64(sp)
    80001182:	fc26                	sd	s1,56(sp)
    80001184:	f84a                	sd	s2,48(sp)
    80001186:	f44e                	sd	s3,40(sp)
    80001188:	f052                	sd	s4,32(sp)
    8000118a:	ec56                	sd	s5,24(sp)
    8000118c:	e85a                	sd	s6,16(sp)
    8000118e:	e45e                	sd	s7,8(sp)
    80001190:	0880                	addi	s0,sp,80
    80001192:	8a2a                	mv	s4,a0
    80001194:	8ab6                	mv	s5,a3
  a = PGROUNDDOWN(va);
    80001196:	77fd                	lui	a5,0xfffff
    80001198:	00f5f933          	and	s2,a1,a5
  last = PGROUNDDOWN(va + size - 1);
    8000119c:	167d                	addi	a2,a2,-1
    8000119e:	00b609b3          	add	s3,a2,a1
    800011a2:	00f9f9b3          	and	s3,s3,a5
    if(PTE_FLAGS(*pte) == PTE_V)
    800011a6:	4b05                	li	s6,1
    a += PGSIZE;
    800011a8:	6b85                	lui	s7,0x1
    800011aa:	a8b1                	j	80001206 <uvmunmap+0x8a>
      panic("uvmunmap: walk");
    800011ac:	00005517          	auipc	a0,0x5
    800011b0:	02450513          	addi	a0,a0,36 # 800061d0 <userret+0x140>
    800011b4:	fffff097          	auipc	ra,0xfffff
    800011b8:	39a080e7          	jalr	922(ra) # 8000054e <panic>
      printf("va=%p pte=%p\n", a, *pte);
    800011bc:	862a                	mv	a2,a0
    800011be:	85ca                	mv	a1,s2
    800011c0:	00005517          	auipc	a0,0x5
    800011c4:	02050513          	addi	a0,a0,32 # 800061e0 <userret+0x150>
    800011c8:	fffff097          	auipc	ra,0xfffff
    800011cc:	3d0080e7          	jalr	976(ra) # 80000598 <printf>
      panic("uvmunmap: not mapped");
    800011d0:	00005517          	auipc	a0,0x5
    800011d4:	02050513          	addi	a0,a0,32 # 800061f0 <userret+0x160>
    800011d8:	fffff097          	auipc	ra,0xfffff
    800011dc:	376080e7          	jalr	886(ra) # 8000054e <panic>
      panic("uvmunmap: not a leaf");
    800011e0:	00005517          	auipc	a0,0x5
    800011e4:	02850513          	addi	a0,a0,40 # 80006208 <userret+0x178>
    800011e8:	fffff097          	auipc	ra,0xfffff
    800011ec:	366080e7          	jalr	870(ra) # 8000054e <panic>
      pa = PTE2PA(*pte);
    800011f0:	8129                	srli	a0,a0,0xa
      kfree((void*)pa);
    800011f2:	0532                	slli	a0,a0,0xc
    800011f4:	fffff097          	auipc	ra,0xfffff
    800011f8:	66c080e7          	jalr	1644(ra) # 80000860 <kfree>
    *pte = 0;
    800011fc:	0004b023          	sd	zero,0(s1)
    if(a == last)
    80001200:	03390763          	beq	s2,s3,8000122e <uvmunmap+0xb2>
    a += PGSIZE;
    80001204:	995e                	add	s2,s2,s7
    if((pte = walk(pagetable, a, 0)) == 0)
    80001206:	4601                	li	a2,0
    80001208:	85ca                	mv	a1,s2
    8000120a:	8552                	mv	a0,s4
    8000120c:	00000097          	auipc	ra,0x0
    80001210:	c10080e7          	jalr	-1008(ra) # 80000e1c <walk>
    80001214:	84aa                	mv	s1,a0
    80001216:	d959                	beqz	a0,800011ac <uvmunmap+0x30>
    if((*pte & PTE_V) == 0){
    80001218:	6108                	ld	a0,0(a0)
    8000121a:	00157793          	andi	a5,a0,1
    8000121e:	dfd9                	beqz	a5,800011bc <uvmunmap+0x40>
    if(PTE_FLAGS(*pte) == PTE_V)
    80001220:	01f57793          	andi	a5,a0,31
    80001224:	fb678ee3          	beq	a5,s6,800011e0 <uvmunmap+0x64>
    if(do_free){
    80001228:	fc0a8ae3          	beqz	s5,800011fc <uvmunmap+0x80>
    8000122c:	b7d1                	j	800011f0 <uvmunmap+0x74>
}
    8000122e:	60a6                	ld	ra,72(sp)
    80001230:	6406                	ld	s0,64(sp)
    80001232:	74e2                	ld	s1,56(sp)
    80001234:	7942                	ld	s2,48(sp)
    80001236:	79a2                	ld	s3,40(sp)
    80001238:	7a02                	ld	s4,32(sp)
    8000123a:	6ae2                	ld	s5,24(sp)
    8000123c:	6b42                	ld	s6,16(sp)
    8000123e:	6ba2                	ld	s7,8(sp)
    80001240:	6161                	addi	sp,sp,80
    80001242:	8082                	ret

0000000080001244 <uvmcreate>:
{
    80001244:	1101                	addi	sp,sp,-32
    80001246:	ec06                	sd	ra,24(sp)
    80001248:	e822                	sd	s0,16(sp)
    8000124a:	e426                	sd	s1,8(sp)
    8000124c:	1000                	addi	s0,sp,32
  pagetable = (pagetable_t) kalloc();
    8000124e:	fffff097          	auipc	ra,0xfffff
    80001252:	70e080e7          	jalr	1806(ra) # 8000095c <kalloc>
  if(pagetable == 0)
    80001256:	cd11                	beqz	a0,80001272 <uvmcreate+0x2e>
    80001258:	84aa                	mv	s1,a0
  memset(pagetable, 0, PGSIZE);
    8000125a:	6605                	lui	a2,0x1
    8000125c:	4581                	li	a1,0
    8000125e:	00000097          	auipc	ra,0x0
    80001262:	90c080e7          	jalr	-1780(ra) # 80000b6a <memset>
}
    80001266:	8526                	mv	a0,s1
    80001268:	60e2                	ld	ra,24(sp)
    8000126a:	6442                	ld	s0,16(sp)
    8000126c:	64a2                	ld	s1,8(sp)
    8000126e:	6105                	addi	sp,sp,32
    80001270:	8082                	ret
    panic("uvmcreate: out of memory");
    80001272:	00005517          	auipc	a0,0x5
    80001276:	fae50513          	addi	a0,a0,-82 # 80006220 <userret+0x190>
    8000127a:	fffff097          	auipc	ra,0xfffff
    8000127e:	2d4080e7          	jalr	724(ra) # 8000054e <panic>

0000000080001282 <uvminit>:
{
    80001282:	7179                	addi	sp,sp,-48
    80001284:	f406                	sd	ra,40(sp)
    80001286:	f022                	sd	s0,32(sp)
    80001288:	ec26                	sd	s1,24(sp)
    8000128a:	e84a                	sd	s2,16(sp)
    8000128c:	e44e                	sd	s3,8(sp)
    8000128e:	e052                	sd	s4,0(sp)
    80001290:	1800                	addi	s0,sp,48
  if(sz >= PGSIZE)
    80001292:	6785                	lui	a5,0x1
    80001294:	04f67863          	bgeu	a2,a5,800012e4 <uvminit+0x62>
    80001298:	8a2a                	mv	s4,a0
    8000129a:	89ae                	mv	s3,a1
    8000129c:	84b2                	mv	s1,a2
  mem = kalloc();
    8000129e:	fffff097          	auipc	ra,0xfffff
    800012a2:	6be080e7          	jalr	1726(ra) # 8000095c <kalloc>
    800012a6:	892a                	mv	s2,a0
  memset(mem, 0, PGSIZE);
    800012a8:	6605                	lui	a2,0x1
    800012aa:	4581                	li	a1,0
    800012ac:	00000097          	auipc	ra,0x0
    800012b0:	8be080e7          	jalr	-1858(ra) # 80000b6a <memset>
  mappages(pagetable, 0, PGSIZE, (uint64)mem, PTE_W|PTE_R|PTE_X|PTE_U);
    800012b4:	4779                	li	a4,30
    800012b6:	86ca                	mv	a3,s2
    800012b8:	6605                	lui	a2,0x1
    800012ba:	4581                	li	a1,0
    800012bc:	8552                	mv	a0,s4
    800012be:	00000097          	auipc	ra,0x0
    800012c2:	d26080e7          	jalr	-730(ra) # 80000fe4 <mappages>
  memmove(mem, src, sz);
    800012c6:	8626                	mv	a2,s1
    800012c8:	85ce                	mv	a1,s3
    800012ca:	854a                	mv	a0,s2
    800012cc:	00000097          	auipc	ra,0x0
    800012d0:	8fe080e7          	jalr	-1794(ra) # 80000bca <memmove>
}
    800012d4:	70a2                	ld	ra,40(sp)
    800012d6:	7402                	ld	s0,32(sp)
    800012d8:	64e2                	ld	s1,24(sp)
    800012da:	6942                	ld	s2,16(sp)
    800012dc:	69a2                	ld	s3,8(sp)
    800012de:	6a02                	ld	s4,0(sp)
    800012e0:	6145                	addi	sp,sp,48
    800012e2:	8082                	ret
    panic("inituvm: more than a page");
    800012e4:	00005517          	auipc	a0,0x5
    800012e8:	f5c50513          	addi	a0,a0,-164 # 80006240 <userret+0x1b0>
    800012ec:	fffff097          	auipc	ra,0xfffff
    800012f0:	262080e7          	jalr	610(ra) # 8000054e <panic>

00000000800012f4 <uvmdealloc>:
{
    800012f4:	87aa                	mv	a5,a0
    800012f6:	852e                	mv	a0,a1
  if(newsz >= oldsz)
    800012f8:	00b66363          	bltu	a2,a1,800012fe <uvmdealloc+0xa>
}
    800012fc:	8082                	ret
{
    800012fe:	1101                	addi	sp,sp,-32
    80001300:	ec06                	sd	ra,24(sp)
    80001302:	e822                	sd	s0,16(sp)
    80001304:	e426                	sd	s1,8(sp)
    80001306:	1000                	addi	s0,sp,32
    80001308:	84b2                	mv	s1,a2
  uvmunmap(pagetable, newsz, oldsz - newsz, 1);
    8000130a:	4685                	li	a3,1
    8000130c:	40c58633          	sub	a2,a1,a2
    80001310:	85a6                	mv	a1,s1
    80001312:	853e                	mv	a0,a5
    80001314:	00000097          	auipc	ra,0x0
    80001318:	e68080e7          	jalr	-408(ra) # 8000117c <uvmunmap>
  return newsz;
    8000131c:	8526                	mv	a0,s1
}
    8000131e:	60e2                	ld	ra,24(sp)
    80001320:	6442                	ld	s0,16(sp)
    80001322:	64a2                	ld	s1,8(sp)
    80001324:	6105                	addi	sp,sp,32
    80001326:	8082                	ret

0000000080001328 <uvmalloc>:
  if(newsz < oldsz)
    80001328:	0ab66163          	bltu	a2,a1,800013ca <uvmalloc+0xa2>
{
    8000132c:	7139                	addi	sp,sp,-64
    8000132e:	fc06                	sd	ra,56(sp)
    80001330:	f822                	sd	s0,48(sp)
    80001332:	f426                	sd	s1,40(sp)
    80001334:	f04a                	sd	s2,32(sp)
    80001336:	ec4e                	sd	s3,24(sp)
    80001338:	e852                	sd	s4,16(sp)
    8000133a:	e456                	sd	s5,8(sp)
    8000133c:	0080                	addi	s0,sp,64
    8000133e:	8aaa                	mv	s5,a0
    80001340:	8a32                	mv	s4,a2
  oldsz = PGROUNDUP(oldsz);
    80001342:	6985                	lui	s3,0x1
    80001344:	19fd                	addi	s3,s3,-1
    80001346:	95ce                	add	a1,a1,s3
    80001348:	79fd                	lui	s3,0xfffff
    8000134a:	0135f9b3          	and	s3,a1,s3
  for(; a < newsz; a += PGSIZE){
    8000134e:	08c9f063          	bgeu	s3,a2,800013ce <uvmalloc+0xa6>
  a = oldsz;
    80001352:	894e                	mv	s2,s3
    mem = kalloc();
    80001354:	fffff097          	auipc	ra,0xfffff
    80001358:	608080e7          	jalr	1544(ra) # 8000095c <kalloc>
    8000135c:	84aa                	mv	s1,a0
    if(mem == 0){
    8000135e:	c51d                	beqz	a0,8000138c <uvmalloc+0x64>
    memset(mem, 0, PGSIZE);
    80001360:	6605                	lui	a2,0x1
    80001362:	4581                	li	a1,0
    80001364:	00000097          	auipc	ra,0x0
    80001368:	806080e7          	jalr	-2042(ra) # 80000b6a <memset>
    if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_W|PTE_X|PTE_R|PTE_U) != 0){
    8000136c:	4779                	li	a4,30
    8000136e:	86a6                	mv	a3,s1
    80001370:	6605                	lui	a2,0x1
    80001372:	85ca                	mv	a1,s2
    80001374:	8556                	mv	a0,s5
    80001376:	00000097          	auipc	ra,0x0
    8000137a:	c6e080e7          	jalr	-914(ra) # 80000fe4 <mappages>
    8000137e:	e905                	bnez	a0,800013ae <uvmalloc+0x86>
  for(; a < newsz; a += PGSIZE){
    80001380:	6785                	lui	a5,0x1
    80001382:	993e                	add	s2,s2,a5
    80001384:	fd4968e3          	bltu	s2,s4,80001354 <uvmalloc+0x2c>
  return newsz;
    80001388:	8552                	mv	a0,s4
    8000138a:	a809                	j	8000139c <uvmalloc+0x74>
      uvmdealloc(pagetable, a, oldsz);
    8000138c:	864e                	mv	a2,s3
    8000138e:	85ca                	mv	a1,s2
    80001390:	8556                	mv	a0,s5
    80001392:	00000097          	auipc	ra,0x0
    80001396:	f62080e7          	jalr	-158(ra) # 800012f4 <uvmdealloc>
      return 0;
    8000139a:	4501                	li	a0,0
}
    8000139c:	70e2                	ld	ra,56(sp)
    8000139e:	7442                	ld	s0,48(sp)
    800013a0:	74a2                	ld	s1,40(sp)
    800013a2:	7902                	ld	s2,32(sp)
    800013a4:	69e2                	ld	s3,24(sp)
    800013a6:	6a42                	ld	s4,16(sp)
    800013a8:	6aa2                	ld	s5,8(sp)
    800013aa:	6121                	addi	sp,sp,64
    800013ac:	8082                	ret
      kfree(mem);
    800013ae:	8526                	mv	a0,s1
    800013b0:	fffff097          	auipc	ra,0xfffff
    800013b4:	4b0080e7          	jalr	1200(ra) # 80000860 <kfree>
      uvmdealloc(pagetable, a, oldsz);
    800013b8:	864e                	mv	a2,s3
    800013ba:	85ca                	mv	a1,s2
    800013bc:	8556                	mv	a0,s5
    800013be:	00000097          	auipc	ra,0x0
    800013c2:	f36080e7          	jalr	-202(ra) # 800012f4 <uvmdealloc>
      return 0;
    800013c6:	4501                	li	a0,0
    800013c8:	bfd1                	j	8000139c <uvmalloc+0x74>
    return oldsz;
    800013ca:	852e                	mv	a0,a1
}
    800013cc:	8082                	ret
  return newsz;
    800013ce:	8532                	mv	a0,a2
    800013d0:	b7f1                	j	8000139c <uvmalloc+0x74>

00000000800013d2 <uvmfree>:

/* Free user memory pages, */
/* then free page-table pages. */
void
uvmfree(pagetable_t pagetable, uint64 sz)
{
    800013d2:	1101                	addi	sp,sp,-32
    800013d4:	ec06                	sd	ra,24(sp)
    800013d6:	e822                	sd	s0,16(sp)
    800013d8:	e426                	sd	s1,8(sp)
    800013da:	1000                	addi	s0,sp,32
    800013dc:	84aa                	mv	s1,a0
    800013de:	862e                	mv	a2,a1
  uvmunmap(pagetable, 0, sz, 1);
    800013e0:	4685                	li	a3,1
    800013e2:	4581                	li	a1,0
    800013e4:	00000097          	auipc	ra,0x0
    800013e8:	d98080e7          	jalr	-616(ra) # 8000117c <uvmunmap>
  freewalk(pagetable);
    800013ec:	8526                	mv	a0,s1
    800013ee:	00000097          	auipc	ra,0x0
    800013f2:	ad4080e7          	jalr	-1324(ra) # 80000ec2 <freewalk>
}
    800013f6:	60e2                	ld	ra,24(sp)
    800013f8:	6442                	ld	s0,16(sp)
    800013fa:	64a2                	ld	s1,8(sp)
    800013fc:	6105                	addi	sp,sp,32
    800013fe:	8082                	ret

0000000080001400 <uvmcopy>:
  pte_t *pte;
  uint64 pa, i;
  uint flags;
  char *mem;

  for(i = 0; i < sz; i += PGSIZE){
    80001400:	c671                	beqz	a2,800014cc <uvmcopy+0xcc>
{
    80001402:	715d                	addi	sp,sp,-80
    80001404:	e486                	sd	ra,72(sp)
    80001406:	e0a2                	sd	s0,64(sp)
    80001408:	fc26                	sd	s1,56(sp)
    8000140a:	f84a                	sd	s2,48(sp)
    8000140c:	f44e                	sd	s3,40(sp)
    8000140e:	f052                	sd	s4,32(sp)
    80001410:	ec56                	sd	s5,24(sp)
    80001412:	e85a                	sd	s6,16(sp)
    80001414:	e45e                	sd	s7,8(sp)
    80001416:	0880                	addi	s0,sp,80
    80001418:	8b2a                	mv	s6,a0
    8000141a:	8aae                	mv	s5,a1
    8000141c:	8a32                	mv	s4,a2
  for(i = 0; i < sz; i += PGSIZE){
    8000141e:	4981                	li	s3,0
    if((pte = walk(old, i, 0)) == 0)
    80001420:	4601                	li	a2,0
    80001422:	85ce                	mv	a1,s3
    80001424:	855a                	mv	a0,s6
    80001426:	00000097          	auipc	ra,0x0
    8000142a:	9f6080e7          	jalr	-1546(ra) # 80000e1c <walk>
    8000142e:	c531                	beqz	a0,8000147a <uvmcopy+0x7a>
      panic("copyuvm: pte should exist");
    if((*pte & PTE_V) == 0)
    80001430:	6118                	ld	a4,0(a0)
    80001432:	00177793          	andi	a5,a4,1
    80001436:	cbb1                	beqz	a5,8000148a <uvmcopy+0x8a>
      panic("copyuvm: page not present");
    pa = PTE2PA(*pte);
    80001438:	00a75593          	srli	a1,a4,0xa
    8000143c:	00c59b93          	slli	s7,a1,0xc
    flags = PTE_FLAGS(*pte);
    80001440:	01f77493          	andi	s1,a4,31
    if((mem = kalloc()) == 0)
    80001444:	fffff097          	auipc	ra,0xfffff
    80001448:	518080e7          	jalr	1304(ra) # 8000095c <kalloc>
    8000144c:	892a                	mv	s2,a0
    8000144e:	c939                	beqz	a0,800014a4 <uvmcopy+0xa4>
      goto err;
    memmove(mem, (char*)pa, PGSIZE);
    80001450:	6605                	lui	a2,0x1
    80001452:	85de                	mv	a1,s7
    80001454:	fffff097          	auipc	ra,0xfffff
    80001458:	776080e7          	jalr	1910(ra) # 80000bca <memmove>
    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
    8000145c:	8726                	mv	a4,s1
    8000145e:	86ca                	mv	a3,s2
    80001460:	6605                	lui	a2,0x1
    80001462:	85ce                	mv	a1,s3
    80001464:	8556                	mv	a0,s5
    80001466:	00000097          	auipc	ra,0x0
    8000146a:	b7e080e7          	jalr	-1154(ra) # 80000fe4 <mappages>
    8000146e:	e515                	bnez	a0,8000149a <uvmcopy+0x9a>
  for(i = 0; i < sz; i += PGSIZE){
    80001470:	6785                	lui	a5,0x1
    80001472:	99be                	add	s3,s3,a5
    80001474:	fb49e6e3          	bltu	s3,s4,80001420 <uvmcopy+0x20>
    80001478:	a83d                	j	800014b6 <uvmcopy+0xb6>
      panic("copyuvm: pte should exist");
    8000147a:	00005517          	auipc	a0,0x5
    8000147e:	de650513          	addi	a0,a0,-538 # 80006260 <userret+0x1d0>
    80001482:	fffff097          	auipc	ra,0xfffff
    80001486:	0cc080e7          	jalr	204(ra) # 8000054e <panic>
      panic("copyuvm: page not present");
    8000148a:	00005517          	auipc	a0,0x5
    8000148e:	df650513          	addi	a0,a0,-522 # 80006280 <userret+0x1f0>
    80001492:	fffff097          	auipc	ra,0xfffff
    80001496:	0bc080e7          	jalr	188(ra) # 8000054e <panic>
      kfree(mem);
    8000149a:	854a                	mv	a0,s2
    8000149c:	fffff097          	auipc	ra,0xfffff
    800014a0:	3c4080e7          	jalr	964(ra) # 80000860 <kfree>
    }
  }
  return 0;

 err:
  uvmunmap(new, 0, i, 1);
    800014a4:	4685                	li	a3,1
    800014a6:	864e                	mv	a2,s3
    800014a8:	4581                	li	a1,0
    800014aa:	8556                	mv	a0,s5
    800014ac:	00000097          	auipc	ra,0x0
    800014b0:	cd0080e7          	jalr	-816(ra) # 8000117c <uvmunmap>
  return -1;
    800014b4:	557d                	li	a0,-1
}
    800014b6:	60a6                	ld	ra,72(sp)
    800014b8:	6406                	ld	s0,64(sp)
    800014ba:	74e2                	ld	s1,56(sp)
    800014bc:	7942                	ld	s2,48(sp)
    800014be:	79a2                	ld	s3,40(sp)
    800014c0:	7a02                	ld	s4,32(sp)
    800014c2:	6ae2                	ld	s5,24(sp)
    800014c4:	6b42                	ld	s6,16(sp)
    800014c6:	6ba2                	ld	s7,8(sp)
    800014c8:	6161                	addi	sp,sp,80
    800014ca:	8082                	ret
  return 0;
    800014cc:	4501                	li	a0,0
}
    800014ce:	8082                	ret

00000000800014d0 <uvmclear>:

/* mark a PTE invalid for user access. */
/* used by exec for the user stack guard page. */
void
uvmclear(pagetable_t pagetable, uint64 va)
{
    800014d0:	1141                	addi	sp,sp,-16
    800014d2:	e406                	sd	ra,8(sp)
    800014d4:	e022                	sd	s0,0(sp)
    800014d6:	0800                	addi	s0,sp,16
  pte_t *pte;
  
  pte = walk(pagetable, va, 0);
    800014d8:	4601                	li	a2,0
    800014da:	00000097          	auipc	ra,0x0
    800014de:	942080e7          	jalr	-1726(ra) # 80000e1c <walk>
  if(pte == 0)
    800014e2:	c901                	beqz	a0,800014f2 <uvmclear+0x22>
    panic("uvmclear");
  *pte &= ~PTE_U;
    800014e4:	611c                	ld	a5,0(a0)
    800014e6:	9bbd                	andi	a5,a5,-17
    800014e8:	e11c                	sd	a5,0(a0)
}
    800014ea:	60a2                	ld	ra,8(sp)
    800014ec:	6402                	ld	s0,0(sp)
    800014ee:	0141                	addi	sp,sp,16
    800014f0:	8082                	ret
    panic("uvmclear");
    800014f2:	00005517          	auipc	a0,0x5
    800014f6:	dae50513          	addi	a0,a0,-594 # 800062a0 <userret+0x210>
    800014fa:	fffff097          	auipc	ra,0xfffff
    800014fe:	054080e7          	jalr	84(ra) # 8000054e <panic>

0000000080001502 <copyout>:
int
copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
{
  uint64 n, va0, pa0;

  while(len > 0){
    80001502:	cab5                	beqz	a3,80001576 <copyout+0x74>
{
    80001504:	715d                	addi	sp,sp,-80
    80001506:	e486                	sd	ra,72(sp)
    80001508:	e0a2                	sd	s0,64(sp)
    8000150a:	fc26                	sd	s1,56(sp)
    8000150c:	f84a                	sd	s2,48(sp)
    8000150e:	f44e                	sd	s3,40(sp)
    80001510:	f052                	sd	s4,32(sp)
    80001512:	ec56                	sd	s5,24(sp)
    80001514:	e85a                	sd	s6,16(sp)
    80001516:	e45e                	sd	s7,8(sp)
    80001518:	e062                	sd	s8,0(sp)
    8000151a:	0880                	addi	s0,sp,80
    8000151c:	8baa                	mv	s7,a0
    8000151e:	8c2e                	mv	s8,a1
    80001520:	8a32                	mv	s4,a2
    80001522:	89b6                	mv	s3,a3
    va0 = (uint)PGROUNDDOWN(dstva);
    80001524:	00100b37          	lui	s6,0x100
    80001528:	1b7d                	addi	s6,s6,-1
    8000152a:	0b32                	slli	s6,s6,0xc
    pa0 = walkaddr(pagetable, va0);
    if(pa0 == 0)
      return -1;
    n = PGSIZE - (dstva - va0);
    8000152c:	6a85                	lui	s5,0x1
    8000152e:	a015                	j	80001552 <copyout+0x50>
    if(n > len)
      n = len;
    memmove((void *)(pa0 + (dstva - va0)), src, n);
    80001530:	9562                	add	a0,a0,s8
    80001532:	0004861b          	sext.w	a2,s1
    80001536:	85d2                	mv	a1,s4
    80001538:	41250533          	sub	a0,a0,s2
    8000153c:	fffff097          	auipc	ra,0xfffff
    80001540:	68e080e7          	jalr	1678(ra) # 80000bca <memmove>

    len -= n;
    80001544:	409989b3          	sub	s3,s3,s1
    src += n;
    80001548:	9a26                	add	s4,s4,s1
    dstva = va0 + PGSIZE;
    8000154a:	01590c33          	add	s8,s2,s5
  while(len > 0){
    8000154e:	02098263          	beqz	s3,80001572 <copyout+0x70>
    va0 = (uint)PGROUNDDOWN(dstva);
    80001552:	016c7933          	and	s2,s8,s6
    pa0 = walkaddr(pagetable, va0);
    80001556:	85ca                	mv	a1,s2
    80001558:	855e                	mv	a0,s7
    8000155a:	00000097          	auipc	ra,0x0
    8000155e:	9f6080e7          	jalr	-1546(ra) # 80000f50 <walkaddr>
    if(pa0 == 0)
    80001562:	cd01                	beqz	a0,8000157a <copyout+0x78>
    n = PGSIZE - (dstva - va0);
    80001564:	418904b3          	sub	s1,s2,s8
    80001568:	94d6                	add	s1,s1,s5
    if(n > len)
    8000156a:	fc99f3e3          	bgeu	s3,s1,80001530 <copyout+0x2e>
    8000156e:	84ce                	mv	s1,s3
    80001570:	b7c1                	j	80001530 <copyout+0x2e>
  }
  return 0;
    80001572:	4501                	li	a0,0
    80001574:	a021                	j	8000157c <copyout+0x7a>
    80001576:	4501                	li	a0,0
}
    80001578:	8082                	ret
      return -1;
    8000157a:	557d                	li	a0,-1
}
    8000157c:	60a6                	ld	ra,72(sp)
    8000157e:	6406                	ld	s0,64(sp)
    80001580:	74e2                	ld	s1,56(sp)
    80001582:	7942                	ld	s2,48(sp)
    80001584:	79a2                	ld	s3,40(sp)
    80001586:	7a02                	ld	s4,32(sp)
    80001588:	6ae2                	ld	s5,24(sp)
    8000158a:	6b42                	ld	s6,16(sp)
    8000158c:	6ba2                	ld	s7,8(sp)
    8000158e:	6c02                	ld	s8,0(sp)
    80001590:	6161                	addi	sp,sp,80
    80001592:	8082                	ret

0000000080001594 <copyin>:
int
copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
{
  uint64 n, va0, pa0;

  while(len > 0){
    80001594:	cab5                	beqz	a3,80001608 <copyin+0x74>
{
    80001596:	715d                	addi	sp,sp,-80
    80001598:	e486                	sd	ra,72(sp)
    8000159a:	e0a2                	sd	s0,64(sp)
    8000159c:	fc26                	sd	s1,56(sp)
    8000159e:	f84a                	sd	s2,48(sp)
    800015a0:	f44e                	sd	s3,40(sp)
    800015a2:	f052                	sd	s4,32(sp)
    800015a4:	ec56                	sd	s5,24(sp)
    800015a6:	e85a                	sd	s6,16(sp)
    800015a8:	e45e                	sd	s7,8(sp)
    800015aa:	e062                	sd	s8,0(sp)
    800015ac:	0880                	addi	s0,sp,80
    800015ae:	8baa                	mv	s7,a0
    800015b0:	8a2e                	mv	s4,a1
    800015b2:	8c32                	mv	s8,a2
    800015b4:	89b6                	mv	s3,a3
    va0 = (uint)PGROUNDDOWN(srcva);
    800015b6:	00100b37          	lui	s6,0x100
    800015ba:	1b7d                	addi	s6,s6,-1
    800015bc:	0b32                	slli	s6,s6,0xc
    pa0 = walkaddr(pagetable, va0);
    if(pa0 == 0)
      return -1;
    n = PGSIZE - (srcva - va0);
    800015be:	6a85                	lui	s5,0x1
    800015c0:	a015                	j	800015e4 <copyin+0x50>
    if(n > len)
      n = len;
    memmove(dst, (void *)(pa0 + (srcva - va0)), n);
    800015c2:	9562                	add	a0,a0,s8
    800015c4:	0004861b          	sext.w	a2,s1
    800015c8:	412505b3          	sub	a1,a0,s2
    800015cc:	8552                	mv	a0,s4
    800015ce:	fffff097          	auipc	ra,0xfffff
    800015d2:	5fc080e7          	jalr	1532(ra) # 80000bca <memmove>

    len -= n;
    800015d6:	409989b3          	sub	s3,s3,s1
    dst += n;
    800015da:	9a26                	add	s4,s4,s1
    srcva = va0 + PGSIZE;
    800015dc:	01590c33          	add	s8,s2,s5
  while(len > 0){
    800015e0:	02098263          	beqz	s3,80001604 <copyin+0x70>
    va0 = (uint)PGROUNDDOWN(srcva);
    800015e4:	016c7933          	and	s2,s8,s6
    pa0 = walkaddr(pagetable, va0);
    800015e8:	85ca                	mv	a1,s2
    800015ea:	855e                	mv	a0,s7
    800015ec:	00000097          	auipc	ra,0x0
    800015f0:	964080e7          	jalr	-1692(ra) # 80000f50 <walkaddr>
    if(pa0 == 0)
    800015f4:	cd01                	beqz	a0,8000160c <copyin+0x78>
    n = PGSIZE - (srcva - va0);
    800015f6:	418904b3          	sub	s1,s2,s8
    800015fa:	94d6                	add	s1,s1,s5
    if(n > len)
    800015fc:	fc99f3e3          	bgeu	s3,s1,800015c2 <copyin+0x2e>
    80001600:	84ce                	mv	s1,s3
    80001602:	b7c1                	j	800015c2 <copyin+0x2e>
  }
  return 0;
    80001604:	4501                	li	a0,0
    80001606:	a021                	j	8000160e <copyin+0x7a>
    80001608:	4501                	li	a0,0
}
    8000160a:	8082                	ret
      return -1;
    8000160c:	557d                	li	a0,-1
}
    8000160e:	60a6                	ld	ra,72(sp)
    80001610:	6406                	ld	s0,64(sp)
    80001612:	74e2                	ld	s1,56(sp)
    80001614:	7942                	ld	s2,48(sp)
    80001616:	79a2                	ld	s3,40(sp)
    80001618:	7a02                	ld	s4,32(sp)
    8000161a:	6ae2                	ld	s5,24(sp)
    8000161c:	6b42                	ld	s6,16(sp)
    8000161e:	6ba2                	ld	s7,8(sp)
    80001620:	6c02                	ld	s8,0(sp)
    80001622:	6161                	addi	sp,sp,80
    80001624:	8082                	ret

0000000080001626 <copyinstr>:
copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
{
  uint64 n, va0, pa0;
  int got_null = 0;

  while(got_null == 0 && max > 0){
    80001626:	c6dd                	beqz	a3,800016d4 <copyinstr+0xae>
{
    80001628:	715d                	addi	sp,sp,-80
    8000162a:	e486                	sd	ra,72(sp)
    8000162c:	e0a2                	sd	s0,64(sp)
    8000162e:	fc26                	sd	s1,56(sp)
    80001630:	f84a                	sd	s2,48(sp)
    80001632:	f44e                	sd	s3,40(sp)
    80001634:	f052                	sd	s4,32(sp)
    80001636:	ec56                	sd	s5,24(sp)
    80001638:	e85a                	sd	s6,16(sp)
    8000163a:	e45e                	sd	s7,8(sp)
    8000163c:	0880                	addi	s0,sp,80
    8000163e:	8aaa                	mv	s5,a0
    80001640:	8b2e                	mv	s6,a1
    80001642:	8bb2                	mv	s7,a2
    80001644:	84b6                	mv	s1,a3
    va0 = (uint)PGROUNDDOWN(srcva);
    80001646:	00100a37          	lui	s4,0x100
    8000164a:	1a7d                	addi	s4,s4,-1
    8000164c:	0a32                	slli	s4,s4,0xc
    pa0 = walkaddr(pagetable, va0);
    if(pa0 == 0)
      return -1;
    n = PGSIZE - (srcva - va0);
    8000164e:	6985                	lui	s3,0x1
    80001650:	a035                	j	8000167c <copyinstr+0x56>
      n = max;

    char *p = (char *) (pa0 + (srcva - va0));
    while(n > 0){
      if(*p == '\0'){
        *dst = '\0';
    80001652:	00078023          	sb	zero,0(a5) # 1000 <_entry-0x7ffff000>
    80001656:	4785                	li	a5,1
      dst++;
    }

    srcva = va0 + PGSIZE;
  }
  if(got_null){
    80001658:	0017b793          	seqz	a5,a5
    8000165c:	40f00533          	neg	a0,a5
    return 0;
  } else {
    return -1;
  }
}
    80001660:	60a6                	ld	ra,72(sp)
    80001662:	6406                	ld	s0,64(sp)
    80001664:	74e2                	ld	s1,56(sp)
    80001666:	7942                	ld	s2,48(sp)
    80001668:	79a2                	ld	s3,40(sp)
    8000166a:	7a02                	ld	s4,32(sp)
    8000166c:	6ae2                	ld	s5,24(sp)
    8000166e:	6b42                	ld	s6,16(sp)
    80001670:	6ba2                	ld	s7,8(sp)
    80001672:	6161                	addi	sp,sp,80
    80001674:	8082                	ret
    srcva = va0 + PGSIZE;
    80001676:	01390bb3          	add	s7,s2,s3
  while(got_null == 0 && max > 0){
    8000167a:	c8a9                	beqz	s1,800016cc <copyinstr+0xa6>
    va0 = (uint)PGROUNDDOWN(srcva);
    8000167c:	014bf933          	and	s2,s7,s4
    pa0 = walkaddr(pagetable, va0);
    80001680:	85ca                	mv	a1,s2
    80001682:	8556                	mv	a0,s5
    80001684:	00000097          	auipc	ra,0x0
    80001688:	8cc080e7          	jalr	-1844(ra) # 80000f50 <walkaddr>
    if(pa0 == 0)
    8000168c:	c131                	beqz	a0,800016d0 <copyinstr+0xaa>
    n = PGSIZE - (srcva - va0);
    8000168e:	41790833          	sub	a6,s2,s7
    80001692:	984e                	add	a6,a6,s3
    if(n > max)
    80001694:	0104f363          	bgeu	s1,a6,8000169a <copyinstr+0x74>
    80001698:	8826                	mv	a6,s1
    char *p = (char *) (pa0 + (srcva - va0));
    8000169a:	955e                	add	a0,a0,s7
    8000169c:	41250533          	sub	a0,a0,s2
    while(n > 0){
    800016a0:	fc080be3          	beqz	a6,80001676 <copyinstr+0x50>
    800016a4:	985a                	add	a6,a6,s6
    800016a6:	87da                	mv	a5,s6
      if(*p == '\0'){
    800016a8:	41650633          	sub	a2,a0,s6
    800016ac:	14fd                	addi	s1,s1,-1
    800016ae:	9b26                	add	s6,s6,s1
    800016b0:	00f60733          	add	a4,a2,a5
    800016b4:	00074703          	lbu	a4,0(a4) # fffffffffffff000 <ticks+0xffffffff7ffd9fe8>
    800016b8:	df49                	beqz	a4,80001652 <copyinstr+0x2c>
        *dst = *p;
    800016ba:	00e78023          	sb	a4,0(a5)
      --max;
    800016be:	40fb04b3          	sub	s1,s6,a5
      dst++;
    800016c2:	0785                	addi	a5,a5,1
    while(n > 0){
    800016c4:	ff0796e3          	bne	a5,a6,800016b0 <copyinstr+0x8a>
      dst++;
    800016c8:	8b42                	mv	s6,a6
    800016ca:	b775                	j	80001676 <copyinstr+0x50>
    800016cc:	4781                	li	a5,0
    800016ce:	b769                	j	80001658 <copyinstr+0x32>
      return -1;
    800016d0:	557d                	li	a0,-1
    800016d2:	b779                	j	80001660 <copyinstr+0x3a>
  int got_null = 0;
    800016d4:	4781                	li	a5,0
  if(got_null){
    800016d6:	0017b793          	seqz	a5,a5
    800016da:	40f00533          	neg	a0,a5
}
    800016de:	8082                	ret

00000000800016e0 <procinit>:

extern char trampoline[]; /* trampoline.S */

void
procinit(void)
{
    800016e0:	715d                	addi	sp,sp,-80
    800016e2:	e486                	sd	ra,72(sp)
    800016e4:	e0a2                	sd	s0,64(sp)
    800016e6:	fc26                	sd	s1,56(sp)
    800016e8:	f84a                	sd	s2,48(sp)
    800016ea:	f44e                	sd	s3,40(sp)
    800016ec:	f052                	sd	s4,32(sp)
    800016ee:	ec56                	sd	s5,24(sp)
    800016f0:	e85a                	sd	s6,16(sp)
    800016f2:	e45e                	sd	s7,8(sp)
    800016f4:	0880                	addi	s0,sp,80
  struct proc *p;
  
  initlock(&pid_lock, "nextpid");
    800016f6:	00005597          	auipc	a1,0x5
    800016fa:	bba58593          	addi	a1,a1,-1094 # 800062b0 <userret+0x220>
    800016fe:	0000f517          	auipc	a0,0xf
    80001702:	1ea50513          	addi	a0,a0,490 # 800108e8 <pid_lock>
    80001706:	fffff097          	auipc	ra,0xfffff
    8000170a:	2b6080e7          	jalr	694(ra) # 800009bc <initlock>
  for(p = proc; p < &proc[NPROC]; p++) {
    8000170e:	0000f917          	auipc	s2,0xf
    80001712:	5f290913          	addi	s2,s2,1522 # 80010d00 <proc>
      initlock(&p->lock, "proc");
    80001716:	00005b97          	auipc	s7,0x5
    8000171a:	ba2b8b93          	addi	s7,s7,-1118 # 800062b8 <userret+0x228>
      /* Map it high in memory, followed by an invalid */
      /* guard page. */
      char *pa = kalloc();
      if(pa == 0)
        panic("kalloc");
      uint64 va = KSTACK((int) (p - proc));
    8000171e:	8b4a                	mv	s6,s2
    80001720:	00005a97          	auipc	s5,0x5
    80001724:	1d8a8a93          	addi	s5,s5,472 # 800068f8 <syscalls+0xb0>
    80001728:	040009b7          	lui	s3,0x4000
    8000172c:	19fd                	addi	s3,s3,-1
    8000172e:	09b2                	slli	s3,s3,0xc
  for(p = proc; p < &proc[NPROC]; p++) {
    80001730:	00015a17          	auipc	s4,0x15
    80001734:	dd0a0a13          	addi	s4,s4,-560 # 80016500 <tickslock>
      initlock(&p->lock, "proc");
    80001738:	85de                	mv	a1,s7
    8000173a:	854a                	mv	a0,s2
    8000173c:	fffff097          	auipc	ra,0xfffff
    80001740:	280080e7          	jalr	640(ra) # 800009bc <initlock>
      char *pa = kalloc();
    80001744:	fffff097          	auipc	ra,0xfffff
    80001748:	218080e7          	jalr	536(ra) # 8000095c <kalloc>
    8000174c:	85aa                	mv	a1,a0
      if(pa == 0)
    8000174e:	c929                	beqz	a0,800017a0 <procinit+0xc0>
      uint64 va = KSTACK((int) (p - proc));
    80001750:	416904b3          	sub	s1,s2,s6
    80001754:	8495                	srai	s1,s1,0x5
    80001756:	000ab783          	ld	a5,0(s5)
    8000175a:	02f484b3          	mul	s1,s1,a5
    8000175e:	2485                	addiw	s1,s1,1
    80001760:	00d4949b          	slliw	s1,s1,0xd
    80001764:	409984b3          	sub	s1,s3,s1
      kvmmap(va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
    80001768:	4699                	li	a3,6
    8000176a:	6605                	lui	a2,0x1
    8000176c:	8526                	mv	a0,s1
    8000176e:	00000097          	auipc	ra,0x0
    80001772:	904080e7          	jalr	-1788(ra) # 80001072 <kvmmap>
      p->kstack = va;
    80001776:	02993c23          	sd	s1,56(s2)
  for(p = proc; p < &proc[NPROC]; p++) {
    8000177a:	16090913          	addi	s2,s2,352
    8000177e:	fb491de3          	bne	s2,s4,80001738 <procinit+0x58>
  }
  kvminithart();
    80001782:	fffff097          	auipc	ra,0xfffff
    80001786:	7aa080e7          	jalr	1962(ra) # 80000f2c <kvminithart>
}
    8000178a:	60a6                	ld	ra,72(sp)
    8000178c:	6406                	ld	s0,64(sp)
    8000178e:	74e2                	ld	s1,56(sp)
    80001790:	7942                	ld	s2,48(sp)
    80001792:	79a2                	ld	s3,40(sp)
    80001794:	7a02                	ld	s4,32(sp)
    80001796:	6ae2                	ld	s5,24(sp)
    80001798:	6b42                	ld	s6,16(sp)
    8000179a:	6ba2                	ld	s7,8(sp)
    8000179c:	6161                	addi	sp,sp,80
    8000179e:	8082                	ret
        panic("kalloc");
    800017a0:	00005517          	auipc	a0,0x5
    800017a4:	b2050513          	addi	a0,a0,-1248 # 800062c0 <userret+0x230>
    800017a8:	fffff097          	auipc	ra,0xfffff
    800017ac:	da6080e7          	jalr	-602(ra) # 8000054e <panic>

00000000800017b0 <cpuid>:
/* Must be called with interrupts disabled, */
/* to prevent race with process being moved */
/* to a different CPU. */
int
cpuid()
{
    800017b0:	1141                	addi	sp,sp,-16
    800017b2:	e422                	sd	s0,8(sp)
    800017b4:	0800                	addi	s0,sp,16
  asm volatile("mv %0, tp" : "=r" (x) );
    800017b6:	8512                	mv	a0,tp
  int id = r_tp();
  return id;
}
    800017b8:	2501                	sext.w	a0,a0
    800017ba:	6422                	ld	s0,8(sp)
    800017bc:	0141                	addi	sp,sp,16
    800017be:	8082                	ret

00000000800017c0 <mycpu>:

/* Return this CPU's cpu struct. */
/* Interrupts must be disabled. */
struct cpu*
mycpu(void) {
    800017c0:	1141                	addi	sp,sp,-16
    800017c2:	e422                	sd	s0,8(sp)
    800017c4:	0800                	addi	s0,sp,16
    800017c6:	8792                	mv	a5,tp
  int id = cpuid();
  struct cpu *c = &cpus[id];
    800017c8:	2781                	sext.w	a5,a5
    800017ca:	079e                	slli	a5,a5,0x7
  return c;
}
    800017cc:	0000f517          	auipc	a0,0xf
    800017d0:	13450513          	addi	a0,a0,308 # 80010900 <cpus>
    800017d4:	953e                	add	a0,a0,a5
    800017d6:	6422                	ld	s0,8(sp)
    800017d8:	0141                	addi	sp,sp,16
    800017da:	8082                	ret

00000000800017dc <myproc>:

/* Return the current struct proc *, or zero if none. */
struct proc*
myproc(void) {
    800017dc:	1101                	addi	sp,sp,-32
    800017de:	ec06                	sd	ra,24(sp)
    800017e0:	e822                	sd	s0,16(sp)
    800017e2:	e426                	sd	s1,8(sp)
    800017e4:	1000                	addi	s0,sp,32
  push_off();
    800017e6:	fffff097          	auipc	ra,0xfffff
    800017ea:	1ec080e7          	jalr	492(ra) # 800009d2 <push_off>
    800017ee:	8792                	mv	a5,tp
  struct cpu *c = mycpu();
  struct proc *p = c->proc;
    800017f0:	2781                	sext.w	a5,a5
    800017f2:	079e                	slli	a5,a5,0x7
    800017f4:	0000f717          	auipc	a4,0xf
    800017f8:	0f470713          	addi	a4,a4,244 # 800108e8 <pid_lock>
    800017fc:	97ba                	add	a5,a5,a4
    800017fe:	6f84                	ld	s1,24(a5)
  pop_off();
    80001800:	fffff097          	auipc	ra,0xfffff
    80001804:	21e080e7          	jalr	542(ra) # 80000a1e <pop_off>
  return p;
}
    80001808:	8526                	mv	a0,s1
    8000180a:	60e2                	ld	ra,24(sp)
    8000180c:	6442                	ld	s0,16(sp)
    8000180e:	64a2                	ld	s1,8(sp)
    80001810:	6105                	addi	sp,sp,32
    80001812:	8082                	ret

0000000080001814 <forkret>:

/* A fork child's very first scheduling by scheduler() */
/* will swtch to forkret. */
void
forkret(void)
{
    80001814:	1141                	addi	sp,sp,-16
    80001816:	e406                	sd	ra,8(sp)
    80001818:	e022                	sd	s0,0(sp)
    8000181a:	0800                	addi	s0,sp,16
  static int first = 1;

  /* Still holding p->lock from scheduler. */
  release(&myproc()->lock);
    8000181c:	00000097          	auipc	ra,0x0
    80001820:	fc0080e7          	jalr	-64(ra) # 800017dc <myproc>
    80001824:	fffff097          	auipc	ra,0xfffff
    80001828:	2fe080e7          	jalr	766(ra) # 80000b22 <release>

  if (first) {
    8000182c:	00006797          	auipc	a5,0x6
    80001830:	8087a783          	lw	a5,-2040(a5) # 80007034 <first.1653>
    80001834:	eb89                	bnez	a5,80001846 <forkret+0x32>
    /* be run from main(). */
    first = 0;
    fsinit(ROOTDEV);
  }

  usertrapret();
    80001836:	00001097          	auipc	ra,0x1
    8000183a:	ba6080e7          	jalr	-1114(ra) # 800023dc <usertrapret>
}
    8000183e:	60a2                	ld	ra,8(sp)
    80001840:	6402                	ld	s0,0(sp)
    80001842:	0141                	addi	sp,sp,16
    80001844:	8082                	ret
    first = 0;
    80001846:	00005797          	auipc	a5,0x5
    8000184a:	7e07a723          	sw	zero,2030(a5) # 80007034 <first.1653>
    fsinit(ROOTDEV);
    8000184e:	4505                	li	a0,1
    80001850:	00002097          	auipc	ra,0x2
    80001854:	88c080e7          	jalr	-1908(ra) # 800030dc <fsinit>
    80001858:	bff9                	j	80001836 <forkret+0x22>

000000008000185a <allocpid>:
allocpid() {
    8000185a:	1101                	addi	sp,sp,-32
    8000185c:	ec06                	sd	ra,24(sp)
    8000185e:	e822                	sd	s0,16(sp)
    80001860:	e426                	sd	s1,8(sp)
    80001862:	e04a                	sd	s2,0(sp)
    80001864:	1000                	addi	s0,sp,32
  acquire(&pid_lock);
    80001866:	0000f917          	auipc	s2,0xf
    8000186a:	08290913          	addi	s2,s2,130 # 800108e8 <pid_lock>
    8000186e:	854a                	mv	a0,s2
    80001870:	fffff097          	auipc	ra,0xfffff
    80001874:	25e080e7          	jalr	606(ra) # 80000ace <acquire>
  pid = nextpid;
    80001878:	00005797          	auipc	a5,0x5
    8000187c:	7c078793          	addi	a5,a5,1984 # 80007038 <nextpid>
    80001880:	4384                	lw	s1,0(a5)
  nextpid = nextpid + 1;
    80001882:	0014871b          	addiw	a4,s1,1
    80001886:	c398                	sw	a4,0(a5)
  release(&pid_lock);
    80001888:	854a                	mv	a0,s2
    8000188a:	fffff097          	auipc	ra,0xfffff
    8000188e:	298080e7          	jalr	664(ra) # 80000b22 <release>
}
    80001892:	8526                	mv	a0,s1
    80001894:	60e2                	ld	ra,24(sp)
    80001896:	6442                	ld	s0,16(sp)
    80001898:	64a2                	ld	s1,8(sp)
    8000189a:	6902                	ld	s2,0(sp)
    8000189c:	6105                	addi	sp,sp,32
    8000189e:	8082                	ret

00000000800018a0 <proc_pagetable>:
{
    800018a0:	1101                	addi	sp,sp,-32
    800018a2:	ec06                	sd	ra,24(sp)
    800018a4:	e822                	sd	s0,16(sp)
    800018a6:	e426                	sd	s1,8(sp)
    800018a8:	e04a                	sd	s2,0(sp)
    800018aa:	1000                	addi	s0,sp,32
    800018ac:	892a                	mv	s2,a0
  pagetable = uvmcreate();
    800018ae:	00000097          	auipc	ra,0x0
    800018b2:	996080e7          	jalr	-1642(ra) # 80001244 <uvmcreate>
    800018b6:	84aa                	mv	s1,a0
  mappages(pagetable, TRAMPOLINE, PGSIZE,
    800018b8:	4729                	li	a4,10
    800018ba:	00004697          	auipc	a3,0x4
    800018be:	74668693          	addi	a3,a3,1862 # 80006000 <trampoline>
    800018c2:	6605                	lui	a2,0x1
    800018c4:	040005b7          	lui	a1,0x4000
    800018c8:	15fd                	addi	a1,a1,-1
    800018ca:	05b2                	slli	a1,a1,0xc
    800018cc:	fffff097          	auipc	ra,0xfffff
    800018d0:	718080e7          	jalr	1816(ra) # 80000fe4 <mappages>
  mappages(pagetable, TRAPFRAME, PGSIZE,
    800018d4:	4719                	li	a4,6
    800018d6:	05093683          	ld	a3,80(s2)
    800018da:	6605                	lui	a2,0x1
    800018dc:	020005b7          	lui	a1,0x2000
    800018e0:	15fd                	addi	a1,a1,-1
    800018e2:	05b6                	slli	a1,a1,0xd
    800018e4:	8526                	mv	a0,s1
    800018e6:	fffff097          	auipc	ra,0xfffff
    800018ea:	6fe080e7          	jalr	1790(ra) # 80000fe4 <mappages>
}
    800018ee:	8526                	mv	a0,s1
    800018f0:	60e2                	ld	ra,24(sp)
    800018f2:	6442                	ld	s0,16(sp)
    800018f4:	64a2                	ld	s1,8(sp)
    800018f6:	6902                	ld	s2,0(sp)
    800018f8:	6105                	addi	sp,sp,32
    800018fa:	8082                	ret

00000000800018fc <allocproc>:
{
    800018fc:	1101                	addi	sp,sp,-32
    800018fe:	ec06                	sd	ra,24(sp)
    80001900:	e822                	sd	s0,16(sp)
    80001902:	e426                	sd	s1,8(sp)
    80001904:	e04a                	sd	s2,0(sp)
    80001906:	1000                	addi	s0,sp,32
  for(p = proc; p < &proc[NPROC]; p++) {
    80001908:	0000f497          	auipc	s1,0xf
    8000190c:	3f848493          	addi	s1,s1,1016 # 80010d00 <proc>
    80001910:	00015917          	auipc	s2,0x15
    80001914:	bf090913          	addi	s2,s2,-1040 # 80016500 <tickslock>
    acquire(&p->lock);
    80001918:	8526                	mv	a0,s1
    8000191a:	fffff097          	auipc	ra,0xfffff
    8000191e:	1b4080e7          	jalr	436(ra) # 80000ace <acquire>
    if(p->state == UNUSED) {
    80001922:	4c9c                	lw	a5,24(s1)
    80001924:	cf81                	beqz	a5,8000193c <allocproc+0x40>
      release(&p->lock);
    80001926:	8526                	mv	a0,s1
    80001928:	fffff097          	auipc	ra,0xfffff
    8000192c:	1fa080e7          	jalr	506(ra) # 80000b22 <release>
  for(p = proc; p < &proc[NPROC]; p++) {
    80001930:	16048493          	addi	s1,s1,352
    80001934:	ff2492e3          	bne	s1,s2,80001918 <allocproc+0x1c>
  return 0;
    80001938:	4481                	li	s1,0
    8000193a:	a0a9                	j	80001984 <allocproc+0x88>
  p->pid = allocpid();
    8000193c:	00000097          	auipc	ra,0x0
    80001940:	f1e080e7          	jalr	-226(ra) # 8000185a <allocpid>
    80001944:	d8c8                	sw	a0,52(s1)
  if((p->tf = (struct trapframe *)kalloc()) == 0){
    80001946:	fffff097          	auipc	ra,0xfffff
    8000194a:	016080e7          	jalr	22(ra) # 8000095c <kalloc>
    8000194e:	892a                	mv	s2,a0
    80001950:	e8a8                	sd	a0,80(s1)
    80001952:	c121                	beqz	a0,80001992 <allocproc+0x96>
  p->pagetable = proc_pagetable(p);
    80001954:	8526                	mv	a0,s1
    80001956:	00000097          	auipc	ra,0x0
    8000195a:	f4a080e7          	jalr	-182(ra) # 800018a0 <proc_pagetable>
    8000195e:	e4a8                	sd	a0,72(s1)
  memset(&p->context, 0, sizeof p->context);
    80001960:	07000613          	li	a2,112
    80001964:	4581                	li	a1,0
    80001966:	05848513          	addi	a0,s1,88
    8000196a:	fffff097          	auipc	ra,0xfffff
    8000196e:	200080e7          	jalr	512(ra) # 80000b6a <memset>
  p->context.ra = (uint64)forkret;
    80001972:	00000797          	auipc	a5,0x0
    80001976:	ea278793          	addi	a5,a5,-350 # 80001814 <forkret>
    8000197a:	ecbc                	sd	a5,88(s1)
  p->context.sp = p->kstack + PGSIZE;
    8000197c:	7c9c                	ld	a5,56(s1)
    8000197e:	6705                	lui	a4,0x1
    80001980:	97ba                	add	a5,a5,a4
    80001982:	f0bc                	sd	a5,96(s1)
}
    80001984:	8526                	mv	a0,s1
    80001986:	60e2                	ld	ra,24(sp)
    80001988:	6442                	ld	s0,16(sp)
    8000198a:	64a2                	ld	s1,8(sp)
    8000198c:	6902                	ld	s2,0(sp)
    8000198e:	6105                	addi	sp,sp,32
    80001990:	8082                	ret
    release(&p->lock);
    80001992:	8526                	mv	a0,s1
    80001994:	fffff097          	auipc	ra,0xfffff
    80001998:	18e080e7          	jalr	398(ra) # 80000b22 <release>
    return 0;
    8000199c:	84ca                	mv	s1,s2
    8000199e:	b7dd                	j	80001984 <allocproc+0x88>

00000000800019a0 <proc_freepagetable>:
{
    800019a0:	1101                	addi	sp,sp,-32
    800019a2:	ec06                	sd	ra,24(sp)
    800019a4:	e822                	sd	s0,16(sp)
    800019a6:	e426                	sd	s1,8(sp)
    800019a8:	e04a                	sd	s2,0(sp)
    800019aa:	1000                	addi	s0,sp,32
    800019ac:	84aa                	mv	s1,a0
    800019ae:	892e                	mv	s2,a1
  uvmunmap(pagetable, TRAMPOLINE, PGSIZE, 0);
    800019b0:	4681                	li	a3,0
    800019b2:	6605                	lui	a2,0x1
    800019b4:	040005b7          	lui	a1,0x4000
    800019b8:	15fd                	addi	a1,a1,-1
    800019ba:	05b2                	slli	a1,a1,0xc
    800019bc:	fffff097          	auipc	ra,0xfffff
    800019c0:	7c0080e7          	jalr	1984(ra) # 8000117c <uvmunmap>
  uvmunmap(pagetable, TRAPFRAME, PGSIZE, 0);
    800019c4:	4681                	li	a3,0
    800019c6:	6605                	lui	a2,0x1
    800019c8:	020005b7          	lui	a1,0x2000
    800019cc:	15fd                	addi	a1,a1,-1
    800019ce:	05b6                	slli	a1,a1,0xd
    800019d0:	8526                	mv	a0,s1
    800019d2:	fffff097          	auipc	ra,0xfffff
    800019d6:	7aa080e7          	jalr	1962(ra) # 8000117c <uvmunmap>
  if(sz > 0)
    800019da:	00091863          	bnez	s2,800019ea <proc_freepagetable+0x4a>
}
    800019de:	60e2                	ld	ra,24(sp)
    800019e0:	6442                	ld	s0,16(sp)
    800019e2:	64a2                	ld	s1,8(sp)
    800019e4:	6902                	ld	s2,0(sp)
    800019e6:	6105                	addi	sp,sp,32
    800019e8:	8082                	ret
    uvmfree(pagetable, sz);
    800019ea:	85ca                	mv	a1,s2
    800019ec:	8526                	mv	a0,s1
    800019ee:	00000097          	auipc	ra,0x0
    800019f2:	9e4080e7          	jalr	-1564(ra) # 800013d2 <uvmfree>
}
    800019f6:	b7e5                	j	800019de <proc_freepagetable+0x3e>

00000000800019f8 <freeproc>:
{
    800019f8:	1101                	addi	sp,sp,-32
    800019fa:	ec06                	sd	ra,24(sp)
    800019fc:	e822                	sd	s0,16(sp)
    800019fe:	e426                	sd	s1,8(sp)
    80001a00:	1000                	addi	s0,sp,32
    80001a02:	84aa                	mv	s1,a0
  if(p->tf)
    80001a04:	6928                	ld	a0,80(a0)
    80001a06:	c509                	beqz	a0,80001a10 <freeproc+0x18>
    kfree((void*)p->tf);
    80001a08:	fffff097          	auipc	ra,0xfffff
    80001a0c:	e58080e7          	jalr	-424(ra) # 80000860 <kfree>
  p->tf = 0;
    80001a10:	0404b823          	sd	zero,80(s1)
  if(p->pagetable)
    80001a14:	64a8                	ld	a0,72(s1)
    80001a16:	c511                	beqz	a0,80001a22 <freeproc+0x2a>
    proc_freepagetable(p->pagetable, p->sz);
    80001a18:	60ac                	ld	a1,64(s1)
    80001a1a:	00000097          	auipc	ra,0x0
    80001a1e:	f86080e7          	jalr	-122(ra) # 800019a0 <proc_freepagetable>
  p->pagetable = 0;
    80001a22:	0404b423          	sd	zero,72(s1)
  p->sz = 0;
    80001a26:	0404b023          	sd	zero,64(s1)
  p->pid = 0;
    80001a2a:	0204aa23          	sw	zero,52(s1)
  p->parent = 0;
    80001a2e:	0204b023          	sd	zero,32(s1)
  p->name[0] = 0;
    80001a32:	14048823          	sb	zero,336(s1)
  p->chan = 0;
    80001a36:	0204b423          	sd	zero,40(s1)
  p->killed = 0;
    80001a3a:	0204a823          	sw	zero,48(s1)
  p->state = UNUSED;
    80001a3e:	0004ac23          	sw	zero,24(s1)
}
    80001a42:	60e2                	ld	ra,24(sp)
    80001a44:	6442                	ld	s0,16(sp)
    80001a46:	64a2                	ld	s1,8(sp)
    80001a48:	6105                	addi	sp,sp,32
    80001a4a:	8082                	ret

0000000080001a4c <userinit>:
{
    80001a4c:	1101                	addi	sp,sp,-32
    80001a4e:	ec06                	sd	ra,24(sp)
    80001a50:	e822                	sd	s0,16(sp)
    80001a52:	e426                	sd	s1,8(sp)
    80001a54:	1000                	addi	s0,sp,32
  p = allocproc();
    80001a56:	00000097          	auipc	ra,0x0
    80001a5a:	ea6080e7          	jalr	-346(ra) # 800018fc <allocproc>
    80001a5e:	84aa                	mv	s1,a0
  initproc = p;
    80001a60:	00023797          	auipc	a5,0x23
    80001a64:	5aa7b823          	sd	a0,1456(a5) # 80025010 <initproc>
  uvminit(p->pagetable, initcode, sizeof(initcode));
    80001a68:	03300613          	li	a2,51
    80001a6c:	00005597          	auipc	a1,0x5
    80001a70:	59458593          	addi	a1,a1,1428 # 80007000 <initcode>
    80001a74:	6528                	ld	a0,72(a0)
    80001a76:	00000097          	auipc	ra,0x0
    80001a7a:	80c080e7          	jalr	-2036(ra) # 80001282 <uvminit>
  p->sz = PGSIZE;
    80001a7e:	6785                	lui	a5,0x1
    80001a80:	e0bc                	sd	a5,64(s1)
  p->tf->epc = 0;      /* user program counter */
    80001a82:	68b8                	ld	a4,80(s1)
    80001a84:	00073c23          	sd	zero,24(a4) # 1018 <_entry-0x7fffefe8>
  p->tf->sp = PGSIZE;  /* user stack pointer */
    80001a88:	68b8                	ld	a4,80(s1)
    80001a8a:	fb1c                	sd	a5,48(a4)
  safestrcpy(p->name, "initcode", sizeof(p->name));
    80001a8c:	4641                	li	a2,16
    80001a8e:	00005597          	auipc	a1,0x5
    80001a92:	83a58593          	addi	a1,a1,-1990 # 800062c8 <userret+0x238>
    80001a96:	15048513          	addi	a0,s1,336
    80001a9a:	fffff097          	auipc	ra,0xfffff
    80001a9e:	226080e7          	jalr	550(ra) # 80000cc0 <safestrcpy>
  p->cwd = namei("/");
    80001aa2:	00005517          	auipc	a0,0x5
    80001aa6:	83650513          	addi	a0,a0,-1994 # 800062d8 <userret+0x248>
    80001aaa:	00002097          	auipc	ra,0x2
    80001aae:	036080e7          	jalr	54(ra) # 80003ae0 <namei>
    80001ab2:	14a4b423          	sd	a0,328(s1)
  p->state = RUNNABLE;
    80001ab6:	4789                	li	a5,2
    80001ab8:	cc9c                	sw	a5,24(s1)
  release(&p->lock);
    80001aba:	8526                	mv	a0,s1
    80001abc:	fffff097          	auipc	ra,0xfffff
    80001ac0:	066080e7          	jalr	102(ra) # 80000b22 <release>
}
    80001ac4:	60e2                	ld	ra,24(sp)
    80001ac6:	6442                	ld	s0,16(sp)
    80001ac8:	64a2                	ld	s1,8(sp)
    80001aca:	6105                	addi	sp,sp,32
    80001acc:	8082                	ret

0000000080001ace <growproc>:
{
    80001ace:	1101                	addi	sp,sp,-32
    80001ad0:	ec06                	sd	ra,24(sp)
    80001ad2:	e822                	sd	s0,16(sp)
    80001ad4:	e426                	sd	s1,8(sp)
    80001ad6:	e04a                	sd	s2,0(sp)
    80001ad8:	1000                	addi	s0,sp,32
    80001ada:	84aa                	mv	s1,a0
  struct proc *p = myproc();
    80001adc:	00000097          	auipc	ra,0x0
    80001ae0:	d00080e7          	jalr	-768(ra) # 800017dc <myproc>
    80001ae4:	892a                	mv	s2,a0
  sz = p->sz;
    80001ae6:	612c                	ld	a1,64(a0)
    80001ae8:	0005861b          	sext.w	a2,a1
  if(n > 0){
    80001aec:	00904f63          	bgtz	s1,80001b0a <growproc+0x3c>
  } else if(n < 0){
    80001af0:	0204cc63          	bltz	s1,80001b28 <growproc+0x5a>
  p->sz = sz;
    80001af4:	1602                	slli	a2,a2,0x20
    80001af6:	9201                	srli	a2,a2,0x20
    80001af8:	04c93023          	sd	a2,64(s2)
  return 0;
    80001afc:	4501                	li	a0,0
}
    80001afe:	60e2                	ld	ra,24(sp)
    80001b00:	6442                	ld	s0,16(sp)
    80001b02:	64a2                	ld	s1,8(sp)
    80001b04:	6902                	ld	s2,0(sp)
    80001b06:	6105                	addi	sp,sp,32
    80001b08:	8082                	ret
    if((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
    80001b0a:	9e25                	addw	a2,a2,s1
    80001b0c:	1602                	slli	a2,a2,0x20
    80001b0e:	9201                	srli	a2,a2,0x20
    80001b10:	1582                	slli	a1,a1,0x20
    80001b12:	9181                	srli	a1,a1,0x20
    80001b14:	6528                	ld	a0,72(a0)
    80001b16:	00000097          	auipc	ra,0x0
    80001b1a:	812080e7          	jalr	-2030(ra) # 80001328 <uvmalloc>
    80001b1e:	0005061b          	sext.w	a2,a0
    80001b22:	fa69                	bnez	a2,80001af4 <growproc+0x26>
      return -1;
    80001b24:	557d                	li	a0,-1
    80001b26:	bfe1                	j	80001afe <growproc+0x30>
    if((sz = uvmdealloc(p->pagetable, sz, sz + n)) == 0) {
    80001b28:	9e25                	addw	a2,a2,s1
    80001b2a:	1602                	slli	a2,a2,0x20
    80001b2c:	9201                	srli	a2,a2,0x20
    80001b2e:	1582                	slli	a1,a1,0x20
    80001b30:	9181                	srli	a1,a1,0x20
    80001b32:	6528                	ld	a0,72(a0)
    80001b34:	fffff097          	auipc	ra,0xfffff
    80001b38:	7c0080e7          	jalr	1984(ra) # 800012f4 <uvmdealloc>
    80001b3c:	0005061b          	sext.w	a2,a0
    80001b40:	fa55                	bnez	a2,80001af4 <growproc+0x26>
      return -1;
    80001b42:	557d                	li	a0,-1
    80001b44:	bf6d                	j	80001afe <growproc+0x30>

0000000080001b46 <fork>:
{
    80001b46:	7179                	addi	sp,sp,-48
    80001b48:	f406                	sd	ra,40(sp)
    80001b4a:	f022                	sd	s0,32(sp)
    80001b4c:	ec26                	sd	s1,24(sp)
    80001b4e:	e84a                	sd	s2,16(sp)
    80001b50:	e44e                	sd	s3,8(sp)
    80001b52:	e052                	sd	s4,0(sp)
    80001b54:	1800                	addi	s0,sp,48
  struct proc *p = myproc();
    80001b56:	00000097          	auipc	ra,0x0
    80001b5a:	c86080e7          	jalr	-890(ra) # 800017dc <myproc>
    80001b5e:	892a                	mv	s2,a0
  if((np = allocproc()) == 0){
    80001b60:	00000097          	auipc	ra,0x0
    80001b64:	d9c080e7          	jalr	-612(ra) # 800018fc <allocproc>
    80001b68:	c175                	beqz	a0,80001c4c <fork+0x106>
    80001b6a:	89aa                	mv	s3,a0
  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
    80001b6c:	04093603          	ld	a2,64(s2)
    80001b70:	652c                	ld	a1,72(a0)
    80001b72:	04893503          	ld	a0,72(s2)
    80001b76:	00000097          	auipc	ra,0x0
    80001b7a:	88a080e7          	jalr	-1910(ra) # 80001400 <uvmcopy>
    80001b7e:	04054863          	bltz	a0,80001bce <fork+0x88>
  np->sz = p->sz;
    80001b82:	04093783          	ld	a5,64(s2)
    80001b86:	04f9b023          	sd	a5,64(s3) # 4000040 <_entry-0x7bffffc0>
  np->parent = p;
    80001b8a:	0329b023          	sd	s2,32(s3)
  *(np->tf) = *(p->tf);
    80001b8e:	05093683          	ld	a3,80(s2)
    80001b92:	87b6                	mv	a5,a3
    80001b94:	0509b703          	ld	a4,80(s3)
    80001b98:	12068693          	addi	a3,a3,288
    80001b9c:	0007b803          	ld	a6,0(a5) # 1000 <_entry-0x7ffff000>
    80001ba0:	6788                	ld	a0,8(a5)
    80001ba2:	6b8c                	ld	a1,16(a5)
    80001ba4:	6f90                	ld	a2,24(a5)
    80001ba6:	01073023          	sd	a6,0(a4)
    80001baa:	e708                	sd	a0,8(a4)
    80001bac:	eb0c                	sd	a1,16(a4)
    80001bae:	ef10                	sd	a2,24(a4)
    80001bb0:	02078793          	addi	a5,a5,32
    80001bb4:	02070713          	addi	a4,a4,32
    80001bb8:	fed792e3          	bne	a5,a3,80001b9c <fork+0x56>
  np->tf->a0 = 0;
    80001bbc:	0509b783          	ld	a5,80(s3)
    80001bc0:	0607b823          	sd	zero,112(a5)
    80001bc4:	0c800493          	li	s1,200
  for(i = 0; i < NOFILE; i++)
    80001bc8:	14800a13          	li	s4,328
    80001bcc:	a03d                	j	80001bfa <fork+0xb4>
    freeproc(np);
    80001bce:	854e                	mv	a0,s3
    80001bd0:	00000097          	auipc	ra,0x0
    80001bd4:	e28080e7          	jalr	-472(ra) # 800019f8 <freeproc>
    release(&np->lock);
    80001bd8:	854e                	mv	a0,s3
    80001bda:	fffff097          	auipc	ra,0xfffff
    80001bde:	f48080e7          	jalr	-184(ra) # 80000b22 <release>
    return -1;
    80001be2:	54fd                	li	s1,-1
    80001be4:	a899                	j	80001c3a <fork+0xf4>
      np->ofile[i] = filedup(p->ofile[i]);
    80001be6:	00002097          	auipc	ra,0x2
    80001bea:	586080e7          	jalr	1414(ra) # 8000416c <filedup>
    80001bee:	009987b3          	add	a5,s3,s1
    80001bf2:	e388                	sd	a0,0(a5)
  for(i = 0; i < NOFILE; i++)
    80001bf4:	04a1                	addi	s1,s1,8
    80001bf6:	01448763          	beq	s1,s4,80001c04 <fork+0xbe>
    if(p->ofile[i])
    80001bfa:	009907b3          	add	a5,s2,s1
    80001bfe:	6388                	ld	a0,0(a5)
    80001c00:	f17d                	bnez	a0,80001be6 <fork+0xa0>
    80001c02:	bfcd                	j	80001bf4 <fork+0xae>
  np->cwd = idup(p->cwd);
    80001c04:	14893503          	ld	a0,328(s2)
    80001c08:	00001097          	auipc	ra,0x1
    80001c0c:	70e080e7          	jalr	1806(ra) # 80003316 <idup>
    80001c10:	14a9b423          	sd	a0,328(s3)
  safestrcpy(np->name, p->name, sizeof(p->name));
    80001c14:	4641                	li	a2,16
    80001c16:	15090593          	addi	a1,s2,336
    80001c1a:	15098513          	addi	a0,s3,336
    80001c1e:	fffff097          	auipc	ra,0xfffff
    80001c22:	0a2080e7          	jalr	162(ra) # 80000cc0 <safestrcpy>
  pid = np->pid;
    80001c26:	0349a483          	lw	s1,52(s3)
  np->state = RUNNABLE;
    80001c2a:	4789                	li	a5,2
    80001c2c:	00f9ac23          	sw	a5,24(s3)
  release(&np->lock);
    80001c30:	854e                	mv	a0,s3
    80001c32:	fffff097          	auipc	ra,0xfffff
    80001c36:	ef0080e7          	jalr	-272(ra) # 80000b22 <release>
}
    80001c3a:	8526                	mv	a0,s1
    80001c3c:	70a2                	ld	ra,40(sp)
    80001c3e:	7402                	ld	s0,32(sp)
    80001c40:	64e2                	ld	s1,24(sp)
    80001c42:	6942                	ld	s2,16(sp)
    80001c44:	69a2                	ld	s3,8(sp)
    80001c46:	6a02                	ld	s4,0(sp)
    80001c48:	6145                	addi	sp,sp,48
    80001c4a:	8082                	ret
    return -1;
    80001c4c:	54fd                	li	s1,-1
    80001c4e:	b7f5                	j	80001c3a <fork+0xf4>

0000000080001c50 <reparent>:
reparent(struct proc *p, struct proc *parent) {
    80001c50:	711d                	addi	sp,sp,-96
    80001c52:	ec86                	sd	ra,88(sp)
    80001c54:	e8a2                	sd	s0,80(sp)
    80001c56:	e4a6                	sd	s1,72(sp)
    80001c58:	e0ca                	sd	s2,64(sp)
    80001c5a:	fc4e                	sd	s3,56(sp)
    80001c5c:	f852                	sd	s4,48(sp)
    80001c5e:	f456                	sd	s5,40(sp)
    80001c60:	f05a                	sd	s6,32(sp)
    80001c62:	ec5e                	sd	s7,24(sp)
    80001c64:	e862                	sd	s8,16(sp)
    80001c66:	e466                	sd	s9,8(sp)
    80001c68:	1080                	addi	s0,sp,96
    80001c6a:	892a                	mv	s2,a0
  int child_of_init = (p->parent == initproc);
    80001c6c:	02053b83          	ld	s7,32(a0)
    80001c70:	00023b17          	auipc	s6,0x23
    80001c74:	3a0b3b03          	ld	s6,928(s6) # 80025010 <initproc>
  for(pp = proc; pp < &proc[NPROC]; pp++){
    80001c78:	0000f497          	auipc	s1,0xf
    80001c7c:	08848493          	addi	s1,s1,136 # 80010d00 <proc>
      pp->parent = initproc;
    80001c80:	00023a17          	auipc	s4,0x23
    80001c84:	390a0a13          	addi	s4,s4,912 # 80025010 <initproc>
      if(pp->state == ZOMBIE) {
    80001c88:	4a91                	li	s5,4
/* Wake up p if it is sleeping in wait(); used by exit(). */
/* Caller must hold p->lock. */
static void
wakeup1(struct proc *p)
{
  if(p->chan == p && p->state == SLEEPING) {
    80001c8a:	4c05                	li	s8,1
    p->state = RUNNABLE;
    80001c8c:	4c89                	li	s9,2
  for(pp = proc; pp < &proc[NPROC]; pp++){
    80001c8e:	00015997          	auipc	s3,0x15
    80001c92:	87298993          	addi	s3,s3,-1934 # 80016500 <tickslock>
    80001c96:	a805                	j	80001cc6 <reparent+0x76>
  if(p->chan == p && p->state == SLEEPING) {
    80001c98:	751c                	ld	a5,40(a0)
    80001c9a:	00f51d63          	bne	a0,a5,80001cb4 <reparent+0x64>
    80001c9e:	4d1c                	lw	a5,24(a0)
    80001ca0:	01879a63          	bne	a5,s8,80001cb4 <reparent+0x64>
    p->state = RUNNABLE;
    80001ca4:	01952c23          	sw	s9,24(a0)
        if(!child_of_init)
    80001ca8:	016b8663          	beq	s7,s6,80001cb4 <reparent+0x64>
          release(&initproc->lock);
    80001cac:	fffff097          	auipc	ra,0xfffff
    80001cb0:	e76080e7          	jalr	-394(ra) # 80000b22 <release>
      release(&pp->lock);
    80001cb4:	8526                	mv	a0,s1
    80001cb6:	fffff097          	auipc	ra,0xfffff
    80001cba:	e6c080e7          	jalr	-404(ra) # 80000b22 <release>
  for(pp = proc; pp < &proc[NPROC]; pp++){
    80001cbe:	16048493          	addi	s1,s1,352
    80001cc2:	03348f63          	beq	s1,s3,80001d00 <reparent+0xb0>
    if(pp->parent == p){
    80001cc6:	709c                	ld	a5,32(s1)
    80001cc8:	ff279be3          	bne	a5,s2,80001cbe <reparent+0x6e>
      acquire(&pp->lock);
    80001ccc:	8526                	mv	a0,s1
    80001cce:	fffff097          	auipc	ra,0xfffff
    80001cd2:	e00080e7          	jalr	-512(ra) # 80000ace <acquire>
      pp->parent = initproc;
    80001cd6:	000a3503          	ld	a0,0(s4)
    80001cda:	f088                	sd	a0,32(s1)
      if(pp->state == ZOMBIE) {
    80001cdc:	4c9c                	lw	a5,24(s1)
    80001cde:	fd579be3          	bne	a5,s5,80001cb4 <reparent+0x64>
        if(!child_of_init)
    80001ce2:	fb6b8be3          	beq	s7,s6,80001c98 <reparent+0x48>
          acquire(&initproc->lock);
    80001ce6:	fffff097          	auipc	ra,0xfffff
    80001cea:	de8080e7          	jalr	-536(ra) # 80000ace <acquire>
        wakeup1(initproc);
    80001cee:	000a3503          	ld	a0,0(s4)
  if(p->chan == p && p->state == SLEEPING) {
    80001cf2:	751c                	ld	a5,40(a0)
    80001cf4:	faa79ce3          	bne	a5,a0,80001cac <reparent+0x5c>
    80001cf8:	4d1c                	lw	a5,24(a0)
    80001cfa:	fb8799e3          	bne	a5,s8,80001cac <reparent+0x5c>
    80001cfe:	b75d                	j	80001ca4 <reparent+0x54>
}
    80001d00:	60e6                	ld	ra,88(sp)
    80001d02:	6446                	ld	s0,80(sp)
    80001d04:	64a6                	ld	s1,72(sp)
    80001d06:	6906                	ld	s2,64(sp)
    80001d08:	79e2                	ld	s3,56(sp)
    80001d0a:	7a42                	ld	s4,48(sp)
    80001d0c:	7aa2                	ld	s5,40(sp)
    80001d0e:	7b02                	ld	s6,32(sp)
    80001d10:	6be2                	ld	s7,24(sp)
    80001d12:	6c42                	ld	s8,16(sp)
    80001d14:	6ca2                	ld	s9,8(sp)
    80001d16:	6125                	addi	sp,sp,96
    80001d18:	8082                	ret

0000000080001d1a <scheduler>:
{
    80001d1a:	7139                	addi	sp,sp,-64
    80001d1c:	fc06                	sd	ra,56(sp)
    80001d1e:	f822                	sd	s0,48(sp)
    80001d20:	f426                	sd	s1,40(sp)
    80001d22:	f04a                	sd	s2,32(sp)
    80001d24:	ec4e                	sd	s3,24(sp)
    80001d26:	e852                	sd	s4,16(sp)
    80001d28:	e456                	sd	s5,8(sp)
    80001d2a:	e05a                	sd	s6,0(sp)
    80001d2c:	0080                	addi	s0,sp,64
    80001d2e:	8792                	mv	a5,tp
  int id = r_tp();
    80001d30:	2781                	sext.w	a5,a5
  c->proc = 0;
    80001d32:	00779a93          	slli	s5,a5,0x7
    80001d36:	0000f717          	auipc	a4,0xf
    80001d3a:	bb270713          	addi	a4,a4,-1102 # 800108e8 <pid_lock>
    80001d3e:	9756                	add	a4,a4,s5
    80001d40:	00073c23          	sd	zero,24(a4)
        swtch(&c->scheduler, &p->context);
    80001d44:	0000f717          	auipc	a4,0xf
    80001d48:	bc470713          	addi	a4,a4,-1084 # 80010908 <cpus+0x8>
    80001d4c:	9aba                	add	s5,s5,a4
      if(p->state == RUNNABLE) {
    80001d4e:	4989                	li	s3,2
        p->state = RUNNING;
    80001d50:	4b0d                	li	s6,3
        c->proc = p;
    80001d52:	079e                	slli	a5,a5,0x7
    80001d54:	0000fa17          	auipc	s4,0xf
    80001d58:	b94a0a13          	addi	s4,s4,-1132 # 800108e8 <pid_lock>
    80001d5c:	9a3e                	add	s4,s4,a5
    for(p = proc; p < &proc[NPROC]; p++) {
    80001d5e:	00014917          	auipc	s2,0x14
    80001d62:	7a290913          	addi	s2,s2,1954 # 80016500 <tickslock>
  asm volatile("csrr %0, sie" : "=r" (x) );
    80001d66:	104027f3          	csrr	a5,sie
  w_sie(r_sie() | SIE_SEIE | SIE_STIE | SIE_SSIE);
    80001d6a:	2227e793          	ori	a5,a5,546
  asm volatile("csrw sie, %0" : : "r" (x));
    80001d6e:	10479073          	csrw	sie,a5
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    80001d72:	100027f3          	csrr	a5,sstatus
  w_sstatus(r_sstatus() | SSTATUS_SIE);
    80001d76:	0027e793          	ori	a5,a5,2
  asm volatile("csrw sstatus, %0" : : "r" (x));
    80001d7a:	10079073          	csrw	sstatus,a5
    80001d7e:	0000f497          	auipc	s1,0xf
    80001d82:	f8248493          	addi	s1,s1,-126 # 80010d00 <proc>
    80001d86:	a03d                	j	80001db4 <scheduler+0x9a>
        p->state = RUNNING;
    80001d88:	0164ac23          	sw	s6,24(s1)
        c->proc = p;
    80001d8c:	009a3c23          	sd	s1,24(s4)
        swtch(&c->scheduler, &p->context);
    80001d90:	05848593          	addi	a1,s1,88
    80001d94:	8556                	mv	a0,s5
    80001d96:	00000097          	auipc	ra,0x0
    80001d9a:	59c080e7          	jalr	1436(ra) # 80002332 <swtch>
        c->proc = 0;
    80001d9e:	000a3c23          	sd	zero,24(s4)
      release(&p->lock);
    80001da2:	8526                	mv	a0,s1
    80001da4:	fffff097          	auipc	ra,0xfffff
    80001da8:	d7e080e7          	jalr	-642(ra) # 80000b22 <release>
    for(p = proc; p < &proc[NPROC]; p++) {
    80001dac:	16048493          	addi	s1,s1,352
    80001db0:	fb248be3          	beq	s1,s2,80001d66 <scheduler+0x4c>
      acquire(&p->lock);
    80001db4:	8526                	mv	a0,s1
    80001db6:	fffff097          	auipc	ra,0xfffff
    80001dba:	d18080e7          	jalr	-744(ra) # 80000ace <acquire>
      if(p->state == RUNNABLE) {
    80001dbe:	4c9c                	lw	a5,24(s1)
    80001dc0:	ff3791e3          	bne	a5,s3,80001da2 <scheduler+0x88>
    80001dc4:	b7d1                	j	80001d88 <scheduler+0x6e>

0000000080001dc6 <sched>:
{
    80001dc6:	7179                	addi	sp,sp,-48
    80001dc8:	f406                	sd	ra,40(sp)
    80001dca:	f022                	sd	s0,32(sp)
    80001dcc:	ec26                	sd	s1,24(sp)
    80001dce:	e84a                	sd	s2,16(sp)
    80001dd0:	e44e                	sd	s3,8(sp)
    80001dd2:	1800                	addi	s0,sp,48
  struct proc *p = myproc();
    80001dd4:	00000097          	auipc	ra,0x0
    80001dd8:	a08080e7          	jalr	-1528(ra) # 800017dc <myproc>
    80001ddc:	84aa                	mv	s1,a0
  if(!holding(&p->lock))
    80001dde:	fffff097          	auipc	ra,0xfffff
    80001de2:	cb0080e7          	jalr	-848(ra) # 80000a8e <holding>
    80001de6:	c93d                	beqz	a0,80001e5c <sched+0x96>
  asm volatile("mv %0, tp" : "=r" (x) );
    80001de8:	8792                	mv	a5,tp
  if(mycpu()->noff != 1)
    80001dea:	2781                	sext.w	a5,a5
    80001dec:	079e                	slli	a5,a5,0x7
    80001dee:	0000f717          	auipc	a4,0xf
    80001df2:	afa70713          	addi	a4,a4,-1286 # 800108e8 <pid_lock>
    80001df6:	97ba                	add	a5,a5,a4
    80001df8:	0907a703          	lw	a4,144(a5)
    80001dfc:	4785                	li	a5,1
    80001dfe:	06f71763          	bne	a4,a5,80001e6c <sched+0xa6>
  if(p->state == RUNNING)
    80001e02:	4c98                	lw	a4,24(s1)
    80001e04:	478d                	li	a5,3
    80001e06:	06f70b63          	beq	a4,a5,80001e7c <sched+0xb6>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    80001e0a:	100027f3          	csrr	a5,sstatus
  return (x & SSTATUS_SIE) != 0;
    80001e0e:	8b89                	andi	a5,a5,2
  if(intr_get())
    80001e10:	efb5                	bnez	a5,80001e8c <sched+0xc6>
  asm volatile("mv %0, tp" : "=r" (x) );
    80001e12:	8792                	mv	a5,tp
  intena = mycpu()->intena;
    80001e14:	0000f917          	auipc	s2,0xf
    80001e18:	ad490913          	addi	s2,s2,-1324 # 800108e8 <pid_lock>
    80001e1c:	2781                	sext.w	a5,a5
    80001e1e:	079e                	slli	a5,a5,0x7
    80001e20:	97ca                	add	a5,a5,s2
    80001e22:	0947a983          	lw	s3,148(a5)
    80001e26:	8792                	mv	a5,tp
  swtch(&p->context, &mycpu()->scheduler);
    80001e28:	2781                	sext.w	a5,a5
    80001e2a:	079e                	slli	a5,a5,0x7
    80001e2c:	0000f597          	auipc	a1,0xf
    80001e30:	adc58593          	addi	a1,a1,-1316 # 80010908 <cpus+0x8>
    80001e34:	95be                	add	a1,a1,a5
    80001e36:	05848513          	addi	a0,s1,88
    80001e3a:	00000097          	auipc	ra,0x0
    80001e3e:	4f8080e7          	jalr	1272(ra) # 80002332 <swtch>
    80001e42:	8792                	mv	a5,tp
  mycpu()->intena = intena;
    80001e44:	2781                	sext.w	a5,a5
    80001e46:	079e                	slli	a5,a5,0x7
    80001e48:	97ca                	add	a5,a5,s2
    80001e4a:	0937aa23          	sw	s3,148(a5)
}
    80001e4e:	70a2                	ld	ra,40(sp)
    80001e50:	7402                	ld	s0,32(sp)
    80001e52:	64e2                	ld	s1,24(sp)
    80001e54:	6942                	ld	s2,16(sp)
    80001e56:	69a2                	ld	s3,8(sp)
    80001e58:	6145                	addi	sp,sp,48
    80001e5a:	8082                	ret
    panic("sched p->lock");
    80001e5c:	00004517          	auipc	a0,0x4
    80001e60:	48450513          	addi	a0,a0,1156 # 800062e0 <userret+0x250>
    80001e64:	ffffe097          	auipc	ra,0xffffe
    80001e68:	6ea080e7          	jalr	1770(ra) # 8000054e <panic>
    panic("sched locks");
    80001e6c:	00004517          	auipc	a0,0x4
    80001e70:	48450513          	addi	a0,a0,1156 # 800062f0 <userret+0x260>
    80001e74:	ffffe097          	auipc	ra,0xffffe
    80001e78:	6da080e7          	jalr	1754(ra) # 8000054e <panic>
    panic("sched running");
    80001e7c:	00004517          	auipc	a0,0x4
    80001e80:	48450513          	addi	a0,a0,1156 # 80006300 <userret+0x270>
    80001e84:	ffffe097          	auipc	ra,0xffffe
    80001e88:	6ca080e7          	jalr	1738(ra) # 8000054e <panic>
    panic("sched interruptible");
    80001e8c:	00004517          	auipc	a0,0x4
    80001e90:	48450513          	addi	a0,a0,1156 # 80006310 <userret+0x280>
    80001e94:	ffffe097          	auipc	ra,0xffffe
    80001e98:	6ba080e7          	jalr	1722(ra) # 8000054e <panic>

0000000080001e9c <exit>:
{
    80001e9c:	7179                	addi	sp,sp,-48
    80001e9e:	f406                	sd	ra,40(sp)
    80001ea0:	f022                	sd	s0,32(sp)
    80001ea2:	ec26                	sd	s1,24(sp)
    80001ea4:	e84a                	sd	s2,16(sp)
    80001ea6:	e44e                	sd	s3,8(sp)
    80001ea8:	1800                	addi	s0,sp,48
  struct proc *p = myproc();
    80001eaa:	00000097          	auipc	ra,0x0
    80001eae:	932080e7          	jalr	-1742(ra) # 800017dc <myproc>
    80001eb2:	89aa                	mv	s3,a0
  if(p == initproc)
    80001eb4:	00023797          	auipc	a5,0x23
    80001eb8:	15c7b783          	ld	a5,348(a5) # 80025010 <initproc>
    80001ebc:	0c850493          	addi	s1,a0,200
    80001ec0:	14850913          	addi	s2,a0,328
    80001ec4:	02a79363          	bne	a5,a0,80001eea <exit+0x4e>
    panic("init exiting");
    80001ec8:	00004517          	auipc	a0,0x4
    80001ecc:	46050513          	addi	a0,a0,1120 # 80006328 <userret+0x298>
    80001ed0:	ffffe097          	auipc	ra,0xffffe
    80001ed4:	67e080e7          	jalr	1662(ra) # 8000054e <panic>
      fileclose(f);
    80001ed8:	00002097          	auipc	ra,0x2
    80001edc:	2e6080e7          	jalr	742(ra) # 800041be <fileclose>
      p->ofile[fd] = 0;
    80001ee0:	0004b023          	sd	zero,0(s1)
  for(int fd = 0; fd < NOFILE; fd++){
    80001ee4:	04a1                	addi	s1,s1,8
    80001ee6:	01248563          	beq	s1,s2,80001ef0 <exit+0x54>
    if(p->ofile[fd]){
    80001eea:	6088                	ld	a0,0(s1)
    80001eec:	f575                	bnez	a0,80001ed8 <exit+0x3c>
    80001eee:	bfdd                	j	80001ee4 <exit+0x48>
  begin_op();
    80001ef0:	00002097          	auipc	ra,0x2
    80001ef4:	dfc080e7          	jalr	-516(ra) # 80003cec <begin_op>
  iput(p->cwd);
    80001ef8:	1489b503          	ld	a0,328(s3)
    80001efc:	00001097          	auipc	ra,0x1
    80001f00:	566080e7          	jalr	1382(ra) # 80003462 <iput>
  end_op();
    80001f04:	00002097          	auipc	ra,0x2
    80001f08:	e68080e7          	jalr	-408(ra) # 80003d6c <end_op>
  p->cwd = 0;
    80001f0c:	1409b423          	sd	zero,328(s3)
  acquire(&p->parent->lock);
    80001f10:	0209b503          	ld	a0,32(s3)
    80001f14:	fffff097          	auipc	ra,0xfffff
    80001f18:	bba080e7          	jalr	-1094(ra) # 80000ace <acquire>
  acquire(&p->lock);
    80001f1c:	854e                	mv	a0,s3
    80001f1e:	fffff097          	auipc	ra,0xfffff
    80001f22:	bb0080e7          	jalr	-1104(ra) # 80000ace <acquire>
  reparent(p, p->parent);
    80001f26:	0209b583          	ld	a1,32(s3)
    80001f2a:	854e                	mv	a0,s3
    80001f2c:	00000097          	auipc	ra,0x0
    80001f30:	d24080e7          	jalr	-732(ra) # 80001c50 <reparent>
  wakeup1(p->parent);
    80001f34:	0209b783          	ld	a5,32(s3)
  if(p->chan == p && p->state == SLEEPING) {
    80001f38:	7798                	ld	a4,40(a5)
    80001f3a:	02e78763          	beq	a5,a4,80001f68 <exit+0xcc>
  p->state = ZOMBIE;
    80001f3e:	4791                	li	a5,4
    80001f40:	00f9ac23          	sw	a5,24(s3)
  release(&p->parent->lock);
    80001f44:	0209b503          	ld	a0,32(s3)
    80001f48:	fffff097          	auipc	ra,0xfffff
    80001f4c:	bda080e7          	jalr	-1062(ra) # 80000b22 <release>
  sched();
    80001f50:	00000097          	auipc	ra,0x0
    80001f54:	e76080e7          	jalr	-394(ra) # 80001dc6 <sched>
  panic("zombie exit");
    80001f58:	00004517          	auipc	a0,0x4
    80001f5c:	3e050513          	addi	a0,a0,992 # 80006338 <userret+0x2a8>
    80001f60:	ffffe097          	auipc	ra,0xffffe
    80001f64:	5ee080e7          	jalr	1518(ra) # 8000054e <panic>
  if(p->chan == p && p->state == SLEEPING) {
    80001f68:	4f94                	lw	a3,24(a5)
    80001f6a:	4705                	li	a4,1
    80001f6c:	fce699e3          	bne	a3,a4,80001f3e <exit+0xa2>
    p->state = RUNNABLE;
    80001f70:	4709                	li	a4,2
    80001f72:	cf98                	sw	a4,24(a5)
    80001f74:	b7e9                	j	80001f3e <exit+0xa2>

0000000080001f76 <yield>:
{
    80001f76:	1101                	addi	sp,sp,-32
    80001f78:	ec06                	sd	ra,24(sp)
    80001f7a:	e822                	sd	s0,16(sp)
    80001f7c:	e426                	sd	s1,8(sp)
    80001f7e:	1000                	addi	s0,sp,32
  struct proc *p = myproc();
    80001f80:	00000097          	auipc	ra,0x0
    80001f84:	85c080e7          	jalr	-1956(ra) # 800017dc <myproc>
    80001f88:	84aa                	mv	s1,a0
  acquire(&p->lock);
    80001f8a:	fffff097          	auipc	ra,0xfffff
    80001f8e:	b44080e7          	jalr	-1212(ra) # 80000ace <acquire>
  p->state = RUNNABLE;
    80001f92:	4789                	li	a5,2
    80001f94:	cc9c                	sw	a5,24(s1)
  sched();
    80001f96:	00000097          	auipc	ra,0x0
    80001f9a:	e30080e7          	jalr	-464(ra) # 80001dc6 <sched>
  release(&p->lock);
    80001f9e:	8526                	mv	a0,s1
    80001fa0:	fffff097          	auipc	ra,0xfffff
    80001fa4:	b82080e7          	jalr	-1150(ra) # 80000b22 <release>
}
    80001fa8:	60e2                	ld	ra,24(sp)
    80001faa:	6442                	ld	s0,16(sp)
    80001fac:	64a2                	ld	s1,8(sp)
    80001fae:	6105                	addi	sp,sp,32
    80001fb0:	8082                	ret

0000000080001fb2 <sleep>:
{
    80001fb2:	7179                	addi	sp,sp,-48
    80001fb4:	f406                	sd	ra,40(sp)
    80001fb6:	f022                	sd	s0,32(sp)
    80001fb8:	ec26                	sd	s1,24(sp)
    80001fba:	e84a                	sd	s2,16(sp)
    80001fbc:	e44e                	sd	s3,8(sp)
    80001fbe:	1800                	addi	s0,sp,48
    80001fc0:	89aa                	mv	s3,a0
    80001fc2:	892e                	mv	s2,a1
  struct proc *p = myproc();
    80001fc4:	00000097          	auipc	ra,0x0
    80001fc8:	818080e7          	jalr	-2024(ra) # 800017dc <myproc>
    80001fcc:	84aa                	mv	s1,a0
  if(lk != &p->lock){  /*DOC: sleeplock0 */
    80001fce:	05250663          	beq	a0,s2,8000201a <sleep+0x68>
    acquire(&p->lock);  /*DOC: sleeplock1 */
    80001fd2:	fffff097          	auipc	ra,0xfffff
    80001fd6:	afc080e7          	jalr	-1284(ra) # 80000ace <acquire>
    release(lk);
    80001fda:	854a                	mv	a0,s2
    80001fdc:	fffff097          	auipc	ra,0xfffff
    80001fe0:	b46080e7          	jalr	-1210(ra) # 80000b22 <release>
  p->chan = chan;
    80001fe4:	0334b423          	sd	s3,40(s1)
  p->state = SLEEPING;
    80001fe8:	4785                	li	a5,1
    80001fea:	cc9c                	sw	a5,24(s1)
  sched();
    80001fec:	00000097          	auipc	ra,0x0
    80001ff0:	dda080e7          	jalr	-550(ra) # 80001dc6 <sched>
  p->chan = 0;
    80001ff4:	0204b423          	sd	zero,40(s1)
    release(&p->lock);
    80001ff8:	8526                	mv	a0,s1
    80001ffa:	fffff097          	auipc	ra,0xfffff
    80001ffe:	b28080e7          	jalr	-1240(ra) # 80000b22 <release>
    acquire(lk);
    80002002:	854a                	mv	a0,s2
    80002004:	fffff097          	auipc	ra,0xfffff
    80002008:	aca080e7          	jalr	-1334(ra) # 80000ace <acquire>
}
    8000200c:	70a2                	ld	ra,40(sp)
    8000200e:	7402                	ld	s0,32(sp)
    80002010:	64e2                	ld	s1,24(sp)
    80002012:	6942                	ld	s2,16(sp)
    80002014:	69a2                	ld	s3,8(sp)
    80002016:	6145                	addi	sp,sp,48
    80002018:	8082                	ret
  p->chan = chan;
    8000201a:	03353423          	sd	s3,40(a0)
  p->state = SLEEPING;
    8000201e:	4785                	li	a5,1
    80002020:	cd1c                	sw	a5,24(a0)
  sched();
    80002022:	00000097          	auipc	ra,0x0
    80002026:	da4080e7          	jalr	-604(ra) # 80001dc6 <sched>
  p->chan = 0;
    8000202a:	0204b423          	sd	zero,40(s1)
  if(lk != &p->lock){
    8000202e:	bff9                	j	8000200c <sleep+0x5a>

0000000080002030 <wait>:
{
    80002030:	715d                	addi	sp,sp,-80
    80002032:	e486                	sd	ra,72(sp)
    80002034:	e0a2                	sd	s0,64(sp)
    80002036:	fc26                	sd	s1,56(sp)
    80002038:	f84a                	sd	s2,48(sp)
    8000203a:	f44e                	sd	s3,40(sp)
    8000203c:	f052                	sd	s4,32(sp)
    8000203e:	ec56                	sd	s5,24(sp)
    80002040:	e85a                	sd	s6,16(sp)
    80002042:	e45e                	sd	s7,8(sp)
    80002044:	0880                	addi	s0,sp,80
  struct proc *p = myproc();
    80002046:	fffff097          	auipc	ra,0xfffff
    8000204a:	796080e7          	jalr	1942(ra) # 800017dc <myproc>
    8000204e:	892a                	mv	s2,a0
  acquire(&p->lock);
    80002050:	8baa                	mv	s7,a0
    80002052:	fffff097          	auipc	ra,0xfffff
    80002056:	a7c080e7          	jalr	-1412(ra) # 80000ace <acquire>
    havekids = 0;
    8000205a:	4b01                	li	s6,0
        if(np->state == ZOMBIE){
    8000205c:	4a11                	li	s4,4
    for(np = proc; np < &proc[NPROC]; np++){
    8000205e:	00014997          	auipc	s3,0x14
    80002062:	4a298993          	addi	s3,s3,1186 # 80016500 <tickslock>
        havekids = 1;
    80002066:	4a85                	li	s5,1
    havekids = 0;
    80002068:	875a                	mv	a4,s6
    for(np = proc; np < &proc[NPROC]; np++){
    8000206a:	0000f497          	auipc	s1,0xf
    8000206e:	c9648493          	addi	s1,s1,-874 # 80010d00 <proc>
    80002072:	a03d                	j	800020a0 <wait+0x70>
          pid = np->pid;
    80002074:	0344a983          	lw	s3,52(s1)
          freeproc(np);
    80002078:	8526                	mv	a0,s1
    8000207a:	00000097          	auipc	ra,0x0
    8000207e:	97e080e7          	jalr	-1666(ra) # 800019f8 <freeproc>
          release(&np->lock);
    80002082:	8526                	mv	a0,s1
    80002084:	fffff097          	auipc	ra,0xfffff
    80002088:	a9e080e7          	jalr	-1378(ra) # 80000b22 <release>
          release(&p->lock);
    8000208c:	854a                	mv	a0,s2
    8000208e:	fffff097          	auipc	ra,0xfffff
    80002092:	a94080e7          	jalr	-1388(ra) # 80000b22 <release>
          return pid;
    80002096:	a089                	j	800020d8 <wait+0xa8>
    for(np = proc; np < &proc[NPROC]; np++){
    80002098:	16048493          	addi	s1,s1,352
    8000209c:	03348463          	beq	s1,s3,800020c4 <wait+0x94>
      if(np->parent == p){
    800020a0:	709c                	ld	a5,32(s1)
    800020a2:	ff279be3          	bne	a5,s2,80002098 <wait+0x68>
        acquire(&np->lock);
    800020a6:	8526                	mv	a0,s1
    800020a8:	fffff097          	auipc	ra,0xfffff
    800020ac:	a26080e7          	jalr	-1498(ra) # 80000ace <acquire>
        if(np->state == ZOMBIE){
    800020b0:	4c9c                	lw	a5,24(s1)
    800020b2:	fd4781e3          	beq	a5,s4,80002074 <wait+0x44>
        release(&np->lock);
    800020b6:	8526                	mv	a0,s1
    800020b8:	fffff097          	auipc	ra,0xfffff
    800020bc:	a6a080e7          	jalr	-1430(ra) # 80000b22 <release>
        havekids = 1;
    800020c0:	8756                	mv	a4,s5
    800020c2:	bfd9                	j	80002098 <wait+0x68>
    if(!havekids || p->killed){
    800020c4:	c701                	beqz	a4,800020cc <wait+0x9c>
    800020c6:	03092783          	lw	a5,48(s2)
    800020ca:	c39d                	beqz	a5,800020f0 <wait+0xc0>
      release(&p->lock);
    800020cc:	854a                	mv	a0,s2
    800020ce:	fffff097          	auipc	ra,0xfffff
    800020d2:	a54080e7          	jalr	-1452(ra) # 80000b22 <release>
      return -1;
    800020d6:	59fd                	li	s3,-1
}
    800020d8:	854e                	mv	a0,s3
    800020da:	60a6                	ld	ra,72(sp)
    800020dc:	6406                	ld	s0,64(sp)
    800020de:	74e2                	ld	s1,56(sp)
    800020e0:	7942                	ld	s2,48(sp)
    800020e2:	79a2                	ld	s3,40(sp)
    800020e4:	7a02                	ld	s4,32(sp)
    800020e6:	6ae2                	ld	s5,24(sp)
    800020e8:	6b42                	ld	s6,16(sp)
    800020ea:	6ba2                	ld	s7,8(sp)
    800020ec:	6161                	addi	sp,sp,80
    800020ee:	8082                	ret
    sleep(p, &p->lock);  /*DOC: wait-sleep */
    800020f0:	85de                	mv	a1,s7
    800020f2:	854a                	mv	a0,s2
    800020f4:	00000097          	auipc	ra,0x0
    800020f8:	ebe080e7          	jalr	-322(ra) # 80001fb2 <sleep>
    havekids = 0;
    800020fc:	b7b5                	j	80002068 <wait+0x38>

00000000800020fe <wakeup>:
{
    800020fe:	7139                	addi	sp,sp,-64
    80002100:	fc06                	sd	ra,56(sp)
    80002102:	f822                	sd	s0,48(sp)
    80002104:	f426                	sd	s1,40(sp)
    80002106:	f04a                	sd	s2,32(sp)
    80002108:	ec4e                	sd	s3,24(sp)
    8000210a:	e852                	sd	s4,16(sp)
    8000210c:	e456                	sd	s5,8(sp)
    8000210e:	0080                	addi	s0,sp,64
    80002110:	8a2a                	mv	s4,a0
  for(p = proc; p < &proc[NPROC]; p++) {
    80002112:	0000f497          	auipc	s1,0xf
    80002116:	bee48493          	addi	s1,s1,-1042 # 80010d00 <proc>
    if(p->state == SLEEPING && p->chan == chan) {
    8000211a:	4985                	li	s3,1
      p->state = RUNNABLE;
    8000211c:	4a89                	li	s5,2
  for(p = proc; p < &proc[NPROC]; p++) {
    8000211e:	00014917          	auipc	s2,0x14
    80002122:	3e290913          	addi	s2,s2,994 # 80016500 <tickslock>
    80002126:	a821                	j	8000213e <wakeup+0x40>
      p->state = RUNNABLE;
    80002128:	0154ac23          	sw	s5,24(s1)
    release(&p->lock);
    8000212c:	8526                	mv	a0,s1
    8000212e:	fffff097          	auipc	ra,0xfffff
    80002132:	9f4080e7          	jalr	-1548(ra) # 80000b22 <release>
  for(p = proc; p < &proc[NPROC]; p++) {
    80002136:	16048493          	addi	s1,s1,352
    8000213a:	01248e63          	beq	s1,s2,80002156 <wakeup+0x58>
    acquire(&p->lock);
    8000213e:	8526                	mv	a0,s1
    80002140:	fffff097          	auipc	ra,0xfffff
    80002144:	98e080e7          	jalr	-1650(ra) # 80000ace <acquire>
    if(p->state == SLEEPING && p->chan == chan) {
    80002148:	4c9c                	lw	a5,24(s1)
    8000214a:	ff3791e3          	bne	a5,s3,8000212c <wakeup+0x2e>
    8000214e:	749c                	ld	a5,40(s1)
    80002150:	fd479ee3          	bne	a5,s4,8000212c <wakeup+0x2e>
    80002154:	bfd1                	j	80002128 <wakeup+0x2a>
}
    80002156:	70e2                	ld	ra,56(sp)
    80002158:	7442                	ld	s0,48(sp)
    8000215a:	74a2                	ld	s1,40(sp)
    8000215c:	7902                	ld	s2,32(sp)
    8000215e:	69e2                	ld	s3,24(sp)
    80002160:	6a42                	ld	s4,16(sp)
    80002162:	6aa2                	ld	s5,8(sp)
    80002164:	6121                	addi	sp,sp,64
    80002166:	8082                	ret

0000000080002168 <kill>:
/* Kill the process with the given pid. */
/* The victim won't exit until it tries to return */
/* to user space (see usertrap() in trap.c). */
int
kill(int pid)
{
    80002168:	7179                	addi	sp,sp,-48
    8000216a:	f406                	sd	ra,40(sp)
    8000216c:	f022                	sd	s0,32(sp)
    8000216e:	ec26                	sd	s1,24(sp)
    80002170:	e84a                	sd	s2,16(sp)
    80002172:	e44e                	sd	s3,8(sp)
    80002174:	1800                	addi	s0,sp,48
    80002176:	892a                	mv	s2,a0
  struct proc *p;

  for(p = proc; p < &proc[NPROC]; p++){
    80002178:	0000f497          	auipc	s1,0xf
    8000217c:	b8848493          	addi	s1,s1,-1144 # 80010d00 <proc>
    80002180:	00014997          	auipc	s3,0x14
    80002184:	38098993          	addi	s3,s3,896 # 80016500 <tickslock>
    acquire(&p->lock);
    80002188:	8526                	mv	a0,s1
    8000218a:	fffff097          	auipc	ra,0xfffff
    8000218e:	944080e7          	jalr	-1724(ra) # 80000ace <acquire>
    if(p->pid == pid){
    80002192:	58dc                	lw	a5,52(s1)
    80002194:	01278d63          	beq	a5,s2,800021ae <kill+0x46>
        p->state = RUNNABLE;
      }
      release(&p->lock);
      return 0;
    }
    release(&p->lock);
    80002198:	8526                	mv	a0,s1
    8000219a:	fffff097          	auipc	ra,0xfffff
    8000219e:	988080e7          	jalr	-1656(ra) # 80000b22 <release>
  for(p = proc; p < &proc[NPROC]; p++){
    800021a2:	16048493          	addi	s1,s1,352
    800021a6:	ff3491e3          	bne	s1,s3,80002188 <kill+0x20>
  }
  return -1;
    800021aa:	557d                	li	a0,-1
    800021ac:	a821                	j	800021c4 <kill+0x5c>
      p->killed = 1;
    800021ae:	4785                	li	a5,1
    800021b0:	d89c                	sw	a5,48(s1)
      if(p->state == SLEEPING){
    800021b2:	4c98                	lw	a4,24(s1)
    800021b4:	00f70f63          	beq	a4,a5,800021d2 <kill+0x6a>
      release(&p->lock);
    800021b8:	8526                	mv	a0,s1
    800021ba:	fffff097          	auipc	ra,0xfffff
    800021be:	968080e7          	jalr	-1688(ra) # 80000b22 <release>
      return 0;
    800021c2:	4501                	li	a0,0
}
    800021c4:	70a2                	ld	ra,40(sp)
    800021c6:	7402                	ld	s0,32(sp)
    800021c8:	64e2                	ld	s1,24(sp)
    800021ca:	6942                	ld	s2,16(sp)
    800021cc:	69a2                	ld	s3,8(sp)
    800021ce:	6145                	addi	sp,sp,48
    800021d0:	8082                	ret
        p->state = RUNNABLE;
    800021d2:	4789                	li	a5,2
    800021d4:	cc9c                	sw	a5,24(s1)
    800021d6:	b7cd                	j	800021b8 <kill+0x50>

00000000800021d8 <either_copyout>:
/* Copy to either a user address, or kernel address, */
/* depending on usr_dst. */
/* Returns 0 on success, -1 on error. */
int
either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
{
    800021d8:	7179                	addi	sp,sp,-48
    800021da:	f406                	sd	ra,40(sp)
    800021dc:	f022                	sd	s0,32(sp)
    800021de:	ec26                	sd	s1,24(sp)
    800021e0:	e84a                	sd	s2,16(sp)
    800021e2:	e44e                	sd	s3,8(sp)
    800021e4:	e052                	sd	s4,0(sp)
    800021e6:	1800                	addi	s0,sp,48
    800021e8:	84aa                	mv	s1,a0
    800021ea:	892e                	mv	s2,a1
    800021ec:	89b2                	mv	s3,a2
    800021ee:	8a36                	mv	s4,a3
  struct proc *p = myproc();
    800021f0:	fffff097          	auipc	ra,0xfffff
    800021f4:	5ec080e7          	jalr	1516(ra) # 800017dc <myproc>
  if(user_dst){
    800021f8:	c08d                	beqz	s1,8000221a <either_copyout+0x42>
    return copyout(p->pagetable, dst, src, len);
    800021fa:	86d2                	mv	a3,s4
    800021fc:	864e                	mv	a2,s3
    800021fe:	85ca                	mv	a1,s2
    80002200:	6528                	ld	a0,72(a0)
    80002202:	fffff097          	auipc	ra,0xfffff
    80002206:	300080e7          	jalr	768(ra) # 80001502 <copyout>
  } else {
    memmove((char *)dst, src, len);
    return 0;
  }
}
    8000220a:	70a2                	ld	ra,40(sp)
    8000220c:	7402                	ld	s0,32(sp)
    8000220e:	64e2                	ld	s1,24(sp)
    80002210:	6942                	ld	s2,16(sp)
    80002212:	69a2                	ld	s3,8(sp)
    80002214:	6a02                	ld	s4,0(sp)
    80002216:	6145                	addi	sp,sp,48
    80002218:	8082                	ret
    memmove((char *)dst, src, len);
    8000221a:	000a061b          	sext.w	a2,s4
    8000221e:	85ce                	mv	a1,s3
    80002220:	854a                	mv	a0,s2
    80002222:	fffff097          	auipc	ra,0xfffff
    80002226:	9a8080e7          	jalr	-1624(ra) # 80000bca <memmove>
    return 0;
    8000222a:	8526                	mv	a0,s1
    8000222c:	bff9                	j	8000220a <either_copyout+0x32>

000000008000222e <either_copyin>:
/* Copy from either a user address, or kernel address, */
/* depending on usr_src. */
/* Returns 0 on success, -1 on error. */
int
either_copyin(void *dst, int user_src, uint64 src, uint64 len)
{
    8000222e:	7179                	addi	sp,sp,-48
    80002230:	f406                	sd	ra,40(sp)
    80002232:	f022                	sd	s0,32(sp)
    80002234:	ec26                	sd	s1,24(sp)
    80002236:	e84a                	sd	s2,16(sp)
    80002238:	e44e                	sd	s3,8(sp)
    8000223a:	e052                	sd	s4,0(sp)
    8000223c:	1800                	addi	s0,sp,48
    8000223e:	892a                	mv	s2,a0
    80002240:	84ae                	mv	s1,a1
    80002242:	89b2                	mv	s3,a2
    80002244:	8a36                	mv	s4,a3
  struct proc *p = myproc();
    80002246:	fffff097          	auipc	ra,0xfffff
    8000224a:	596080e7          	jalr	1430(ra) # 800017dc <myproc>
  if(user_src){
    8000224e:	c08d                	beqz	s1,80002270 <either_copyin+0x42>
    return copyin(p->pagetable, dst, src, len);
    80002250:	86d2                	mv	a3,s4
    80002252:	864e                	mv	a2,s3
    80002254:	85ca                	mv	a1,s2
    80002256:	6528                	ld	a0,72(a0)
    80002258:	fffff097          	auipc	ra,0xfffff
    8000225c:	33c080e7          	jalr	828(ra) # 80001594 <copyin>
  } else {
    memmove(dst, (char*)src, len);
    return 0;
  }
}
    80002260:	70a2                	ld	ra,40(sp)
    80002262:	7402                	ld	s0,32(sp)
    80002264:	64e2                	ld	s1,24(sp)
    80002266:	6942                	ld	s2,16(sp)
    80002268:	69a2                	ld	s3,8(sp)
    8000226a:	6a02                	ld	s4,0(sp)
    8000226c:	6145                	addi	sp,sp,48
    8000226e:	8082                	ret
    memmove(dst, (char*)src, len);
    80002270:	000a061b          	sext.w	a2,s4
    80002274:	85ce                	mv	a1,s3
    80002276:	854a                	mv	a0,s2
    80002278:	fffff097          	auipc	ra,0xfffff
    8000227c:	952080e7          	jalr	-1710(ra) # 80000bca <memmove>
    return 0;
    80002280:	8526                	mv	a0,s1
    80002282:	bff9                	j	80002260 <either_copyin+0x32>

0000000080002284 <procdump>:
/* Print a process listing to console.  For debugging. */
/* Runs when user types ^P on console. */
/* No lock to avoid wedging a stuck machine further. */
void
procdump(void)
{
    80002284:	715d                	addi	sp,sp,-80
    80002286:	e486                	sd	ra,72(sp)
    80002288:	e0a2                	sd	s0,64(sp)
    8000228a:	fc26                	sd	s1,56(sp)
    8000228c:	f84a                	sd	s2,48(sp)
    8000228e:	f44e                	sd	s3,40(sp)
    80002290:	f052                	sd	s4,32(sp)
    80002292:	ec56                	sd	s5,24(sp)
    80002294:	e85a                	sd	s6,16(sp)
    80002296:	e45e                	sd	s7,8(sp)
    80002298:	0880                	addi	s0,sp,80
  [ZOMBIE]    "zombie"
  };
  struct proc *p;
  char *state;

  printf("\n");
    8000229a:	00004517          	auipc	a0,0x4
    8000229e:	efe50513          	addi	a0,a0,-258 # 80006198 <userret+0x108>
    800022a2:	ffffe097          	auipc	ra,0xffffe
    800022a6:	2f6080e7          	jalr	758(ra) # 80000598 <printf>
  for(p = proc; p < &proc[NPROC]; p++){
    800022aa:	0000f497          	auipc	s1,0xf
    800022ae:	ba648493          	addi	s1,s1,-1114 # 80010e50 <proc+0x150>
    800022b2:	00014917          	auipc	s2,0x14
    800022b6:	39e90913          	addi	s2,s2,926 # 80016650 <bcache+0x138>
    if(p->state == UNUSED)
      continue;
    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
    800022ba:	4b11                	li	s6,4
      state = states[p->state];
    else
      state = "???";
    800022bc:	00004997          	auipc	s3,0x4
    800022c0:	08c98993          	addi	s3,s3,140 # 80006348 <userret+0x2b8>
    printf("%d %s %s", p->pid, state, p->name);
    800022c4:	00004a97          	auipc	s5,0x4
    800022c8:	08ca8a93          	addi	s5,s5,140 # 80006350 <userret+0x2c0>
    printf("\n");
    800022cc:	00004a17          	auipc	s4,0x4
    800022d0:	ecca0a13          	addi	s4,s4,-308 # 80006198 <userret+0x108>
    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
    800022d4:	00004b97          	auipc	s7,0x4
    800022d8:	534b8b93          	addi	s7,s7,1332 # 80006808 <states.1693>
    800022dc:	a00d                	j	800022fe <procdump+0x7a>
    printf("%d %s %s", p->pid, state, p->name);
    800022de:	ee46a583          	lw	a1,-284(a3)
    800022e2:	8556                	mv	a0,s5
    800022e4:	ffffe097          	auipc	ra,0xffffe
    800022e8:	2b4080e7          	jalr	692(ra) # 80000598 <printf>
    printf("\n");
    800022ec:	8552                	mv	a0,s4
    800022ee:	ffffe097          	auipc	ra,0xffffe
    800022f2:	2aa080e7          	jalr	682(ra) # 80000598 <printf>
  for(p = proc; p < &proc[NPROC]; p++){
    800022f6:	16048493          	addi	s1,s1,352
    800022fa:	03248163          	beq	s1,s2,8000231c <procdump+0x98>
    if(p->state == UNUSED)
    800022fe:	86a6                	mv	a3,s1
    80002300:	ec84a783          	lw	a5,-312(s1)
    80002304:	dbed                	beqz	a5,800022f6 <procdump+0x72>
      state = "???";
    80002306:	864e                	mv	a2,s3
    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
    80002308:	fcfb6be3          	bltu	s6,a5,800022de <procdump+0x5a>
    8000230c:	1782                	slli	a5,a5,0x20
    8000230e:	9381                	srli	a5,a5,0x20
    80002310:	078e                	slli	a5,a5,0x3
    80002312:	97de                	add	a5,a5,s7
    80002314:	6390                	ld	a2,0(a5)
    80002316:	f661                	bnez	a2,800022de <procdump+0x5a>
      state = "???";
    80002318:	864e                	mv	a2,s3
    8000231a:	b7d1                	j	800022de <procdump+0x5a>
  }
}
    8000231c:	60a6                	ld	ra,72(sp)
    8000231e:	6406                	ld	s0,64(sp)
    80002320:	74e2                	ld	s1,56(sp)
    80002322:	7942                	ld	s2,48(sp)
    80002324:	79a2                	ld	s3,40(sp)
    80002326:	7a02                	ld	s4,32(sp)
    80002328:	6ae2                	ld	s5,24(sp)
    8000232a:	6b42                	ld	s6,16(sp)
    8000232c:	6ba2                	ld	s7,8(sp)
    8000232e:	6161                	addi	sp,sp,80
    80002330:	8082                	ret

0000000080002332 <swtch>:
    80002332:	00153023          	sd	ra,0(a0)
    80002336:	00253423          	sd	sp,8(a0)
    8000233a:	e900                	sd	s0,16(a0)
    8000233c:	ed04                	sd	s1,24(a0)
    8000233e:	03253023          	sd	s2,32(a0)
    80002342:	03353423          	sd	s3,40(a0)
    80002346:	03453823          	sd	s4,48(a0)
    8000234a:	03553c23          	sd	s5,56(a0)
    8000234e:	05653023          	sd	s6,64(a0)
    80002352:	05753423          	sd	s7,72(a0)
    80002356:	05853823          	sd	s8,80(a0)
    8000235a:	05953c23          	sd	s9,88(a0)
    8000235e:	07a53023          	sd	s10,96(a0)
    80002362:	07b53423          	sd	s11,104(a0)
    80002366:	0005b083          	ld	ra,0(a1)
    8000236a:	0085b103          	ld	sp,8(a1)
    8000236e:	6980                	ld	s0,16(a1)
    80002370:	6d84                	ld	s1,24(a1)
    80002372:	0205b903          	ld	s2,32(a1)
    80002376:	0285b983          	ld	s3,40(a1)
    8000237a:	0305ba03          	ld	s4,48(a1)
    8000237e:	0385ba83          	ld	s5,56(a1)
    80002382:	0405bb03          	ld	s6,64(a1)
    80002386:	0485bb83          	ld	s7,72(a1)
    8000238a:	0505bc03          	ld	s8,80(a1)
    8000238e:	0585bc83          	ld	s9,88(a1)
    80002392:	0605bd03          	ld	s10,96(a1)
    80002396:	0685bd83          	ld	s11,104(a1)
    8000239a:	8082                	ret

000000008000239c <trapinit>:

extern int devintr();

void
trapinit(void)
{
    8000239c:	1141                	addi	sp,sp,-16
    8000239e:	e406                	sd	ra,8(sp)
    800023a0:	e022                	sd	s0,0(sp)
    800023a2:	0800                	addi	s0,sp,16
  initlock(&tickslock, "time");
    800023a4:	00004597          	auipc	a1,0x4
    800023a8:	fe458593          	addi	a1,a1,-28 # 80006388 <userret+0x2f8>
    800023ac:	00014517          	auipc	a0,0x14
    800023b0:	15450513          	addi	a0,a0,340 # 80016500 <tickslock>
    800023b4:	ffffe097          	auipc	ra,0xffffe
    800023b8:	608080e7          	jalr	1544(ra) # 800009bc <initlock>
}
    800023bc:	60a2                	ld	ra,8(sp)
    800023be:	6402                	ld	s0,0(sp)
    800023c0:	0141                	addi	sp,sp,16
    800023c2:	8082                	ret

00000000800023c4 <trapinithart>:

/* set up to take exceptions and traps while in the kernel. */
void
trapinithart(void)
{
    800023c4:	1141                	addi	sp,sp,-16
    800023c6:	e422                	sd	s0,8(sp)
    800023c8:	0800                	addi	s0,sp,16
  asm volatile("csrw stvec, %0" : : "r" (x));
    800023ca:	00003797          	auipc	a5,0x3
    800023ce:	3e678793          	addi	a5,a5,998 # 800057b0 <kernelvec>
    800023d2:	10579073          	csrw	stvec,a5
  w_stvec((uint64)kernelvec);
}
    800023d6:	6422                	ld	s0,8(sp)
    800023d8:	0141                	addi	sp,sp,16
    800023da:	8082                	ret

00000000800023dc <usertrapret>:
/* */
/* return to user space */
/* */
void
usertrapret(void)
{
    800023dc:	1141                	addi	sp,sp,-16
    800023de:	e406                	sd	ra,8(sp)
    800023e0:	e022                	sd	s0,0(sp)
    800023e2:	0800                	addi	s0,sp,16
  struct proc *p = myproc();
    800023e4:	fffff097          	auipc	ra,0xfffff
    800023e8:	3f8080e7          	jalr	1016(ra) # 800017dc <myproc>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    800023ec:	100027f3          	csrr	a5,sstatus
  w_sstatus(r_sstatus() & ~SSTATUS_SIE);
    800023f0:	9bf5                	andi	a5,a5,-3
  asm volatile("csrw sstatus, %0" : : "r" (x));
    800023f2:	10079073          	csrw	sstatus,a5
  /* turn off interrupts, since we're switching */
  /* now from kerneltrap() to usertrap(). */
  intr_off();

  /* send interrupts and exceptions to trampoline.S */
  w_stvec(TRAMPOLINE + (uservec - trampoline));
    800023f6:	00004617          	auipc	a2,0x4
    800023fa:	c0a60613          	addi	a2,a2,-1014 # 80006000 <trampoline>
    800023fe:	00004697          	auipc	a3,0x4
    80002402:	c0268693          	addi	a3,a3,-1022 # 80006000 <trampoline>
    80002406:	8e91                	sub	a3,a3,a2
    80002408:	040007b7          	lui	a5,0x4000
    8000240c:	17fd                	addi	a5,a5,-1
    8000240e:	07b2                	slli	a5,a5,0xc
    80002410:	96be                	add	a3,a3,a5
  asm volatile("csrw stvec, %0" : : "r" (x));
    80002412:	10569073          	csrw	stvec,a3

  /* set up values that uservec will need when */
  /* the process next re-enters the kernel. */
  p->tf->kernel_satp = r_satp();         /* kernel page table */
    80002416:	6938                	ld	a4,80(a0)
  asm volatile("csrr %0, satp" : "=r" (x) );
    80002418:	180026f3          	csrr	a3,satp
    8000241c:	e314                	sd	a3,0(a4)
  p->tf->kernel_sp = p->kstack + PGSIZE; /* process's kernel stack */
    8000241e:	6938                	ld	a4,80(a0)
    80002420:	7d14                	ld	a3,56(a0)
    80002422:	6585                	lui	a1,0x1
    80002424:	96ae                	add	a3,a3,a1
    80002426:	e714                	sd	a3,8(a4)
  p->tf->kernel_trap = (uint64)usertrap;
    80002428:	6938                	ld	a4,80(a0)
    8000242a:	00000697          	auipc	a3,0x0
    8000242e:	12268693          	addi	a3,a3,290 # 8000254c <usertrap>
    80002432:	eb14                	sd	a3,16(a4)
  p->tf->kernel_hartid = r_tp();         /* hartid for cpuid() */
    80002434:	6938                	ld	a4,80(a0)
  asm volatile("mv %0, tp" : "=r" (x) );
    80002436:	8692                	mv	a3,tp
    80002438:	f314                	sd	a3,32(a4)
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8000243a:	100026f3          	csrr	a3,sstatus
  /* set up the registers that trampoline.S's sret will use */
  /* to get to user space. */
  
  /* set S Previous Privilege mode to User. */
  unsigned long x = r_sstatus();
  x &= ~SSTATUS_SPP; /* clear SPP to 0 for user mode */
    8000243e:	eff6f693          	andi	a3,a3,-257
  x |= SSTATUS_SPIE; /* enable interrupts in user mode */
    80002442:	0206e693          	ori	a3,a3,32
  asm volatile("csrw sstatus, %0" : : "r" (x));
    80002446:	10069073          	csrw	sstatus,a3
  w_sstatus(x);

  /* set S Exception Program Counter to the saved user pc. */
  w_sepc(p->tf->epc);
    8000244a:	6938                	ld	a4,80(a0)
  asm volatile("csrw sepc, %0" : : "r" (x));
    8000244c:	6f18                	ld	a4,24(a4)
    8000244e:	14171073          	csrw	sepc,a4

  /* tell trampoline.S the user page table to switch to. */
  uint64 satp = MAKE_SATP(p->pagetable);
    80002452:	652c                	ld	a1,72(a0)
    80002454:	81b1                	srli	a1,a1,0xc

  /* jump to trampoline.S at the top of memory, which  */
  /* switches to the user page table, restores user registers, */
  /* and switches to user mode with sret. */
  uint64 fn = TRAMPOLINE + (userret - trampoline);
    80002456:	00004717          	auipc	a4,0x4
    8000245a:	c3a70713          	addi	a4,a4,-966 # 80006090 <userret>
    8000245e:	8f11                	sub	a4,a4,a2
    80002460:	97ba                	add	a5,a5,a4
  ((void (*)(uint64,uint64))fn)(TRAPFRAME, satp);
    80002462:	577d                	li	a4,-1
    80002464:	177e                	slli	a4,a4,0x3f
    80002466:	8dd9                	or	a1,a1,a4
    80002468:	02000537          	lui	a0,0x2000
    8000246c:	157d                	addi	a0,a0,-1
    8000246e:	0536                	slli	a0,a0,0xd
    80002470:	9782                	jalr	a5
}
    80002472:	60a2                	ld	ra,8(sp)
    80002474:	6402                	ld	s0,0(sp)
    80002476:	0141                	addi	sp,sp,16
    80002478:	8082                	ret

000000008000247a <clockintr>:
  w_sstatus(sstatus);
}

void
clockintr()
{
    8000247a:	1101                	addi	sp,sp,-32
    8000247c:	ec06                	sd	ra,24(sp)
    8000247e:	e822                	sd	s0,16(sp)
    80002480:	e426                	sd	s1,8(sp)
    80002482:	1000                	addi	s0,sp,32
  acquire(&tickslock);
    80002484:	00014497          	auipc	s1,0x14
    80002488:	07c48493          	addi	s1,s1,124 # 80016500 <tickslock>
    8000248c:	8526                	mv	a0,s1
    8000248e:	ffffe097          	auipc	ra,0xffffe
    80002492:	640080e7          	jalr	1600(ra) # 80000ace <acquire>
  ticks++;
    80002496:	00023517          	auipc	a0,0x23
    8000249a:	b8250513          	addi	a0,a0,-1150 # 80025018 <ticks>
    8000249e:	411c                	lw	a5,0(a0)
    800024a0:	2785                	addiw	a5,a5,1
    800024a2:	c11c                	sw	a5,0(a0)
  wakeup(&ticks);
    800024a4:	00000097          	auipc	ra,0x0
    800024a8:	c5a080e7          	jalr	-934(ra) # 800020fe <wakeup>
  release(&tickslock);
    800024ac:	8526                	mv	a0,s1
    800024ae:	ffffe097          	auipc	ra,0xffffe
    800024b2:	674080e7          	jalr	1652(ra) # 80000b22 <release>
}
    800024b6:	60e2                	ld	ra,24(sp)
    800024b8:	6442                	ld	s0,16(sp)
    800024ba:	64a2                	ld	s1,8(sp)
    800024bc:	6105                	addi	sp,sp,32
    800024be:	8082                	ret

00000000800024c0 <devintr>:
/* returns 2 if timer interrupt, */
/* 1 if other device, */
/* 0 if not recognized. */
int
devintr()
{
    800024c0:	1101                	addi	sp,sp,-32
    800024c2:	ec06                	sd	ra,24(sp)
    800024c4:	e822                	sd	s0,16(sp)
    800024c6:	e426                	sd	s1,8(sp)
    800024c8:	1000                	addi	s0,sp,32
  asm volatile("csrr %0, scause" : "=r" (x) );
    800024ca:	14202773          	csrr	a4,scause
  uint64 scause = r_scause();

  if((scause & 0x8000000000000000L) &&
    800024ce:	00074d63          	bltz	a4,800024e8 <devintr+0x28>
      virtio_disk_intr();
    }

    plic_complete(irq);
    return 1;
  } else if(scause == 0x8000000000000001L){
    800024d2:	57fd                	li	a5,-1
    800024d4:	17fe                	slli	a5,a5,0x3f
    800024d6:	0785                	addi	a5,a5,1
    /* the SSIP bit in sip. */
    w_sip(r_sip() & ~2);

    return 2;
  } else {
    return 0;
    800024d8:	4501                	li	a0,0
  } else if(scause == 0x8000000000000001L){
    800024da:	04f70863          	beq	a4,a5,8000252a <devintr+0x6a>
  }
}
    800024de:	60e2                	ld	ra,24(sp)
    800024e0:	6442                	ld	s0,16(sp)
    800024e2:	64a2                	ld	s1,8(sp)
    800024e4:	6105                	addi	sp,sp,32
    800024e6:	8082                	ret
     (scause & 0xff) == 9){
    800024e8:	0ff77793          	andi	a5,a4,255
  if((scause & 0x8000000000000000L) &&
    800024ec:	46a5                	li	a3,9
    800024ee:	fed792e3          	bne	a5,a3,800024d2 <devintr+0x12>
    int irq = plic_claim();
    800024f2:	00003097          	auipc	ra,0x3
    800024f6:	3d8080e7          	jalr	984(ra) # 800058ca <plic_claim>
    800024fa:	84aa                	mv	s1,a0
    if(irq == UART0_IRQ){
    800024fc:	47a9                	li	a5,10
    800024fe:	00f50c63          	beq	a0,a5,80002516 <devintr+0x56>
    } else if(irq == VIRTIO0_IRQ){
    80002502:	4785                	li	a5,1
    80002504:	00f50e63          	beq	a0,a5,80002520 <devintr+0x60>
    plic_complete(irq);
    80002508:	8526                	mv	a0,s1
    8000250a:	00003097          	auipc	ra,0x3
    8000250e:	3e4080e7          	jalr	996(ra) # 800058ee <plic_complete>
    return 1;
    80002512:	4505                	li	a0,1
    80002514:	b7e9                	j	800024de <devintr+0x1e>
      uartintr();
    80002516:	ffffe097          	auipc	ra,0xffffe
    8000251a:	31e080e7          	jalr	798(ra) # 80000834 <uartintr>
    8000251e:	b7ed                	j	80002508 <devintr+0x48>
      virtio_disk_intr();
    80002520:	00004097          	auipc	ra,0x4
    80002524:	85e080e7          	jalr	-1954(ra) # 80005d7e <virtio_disk_intr>
    80002528:	b7c5                	j	80002508 <devintr+0x48>
    if(cpuid() == 0){
    8000252a:	fffff097          	auipc	ra,0xfffff
    8000252e:	286080e7          	jalr	646(ra) # 800017b0 <cpuid>
    80002532:	c901                	beqz	a0,80002542 <devintr+0x82>
  asm volatile("csrr %0, sip" : "=r" (x) );
    80002534:	144027f3          	csrr	a5,sip
    w_sip(r_sip() & ~2);
    80002538:	9bf5                	andi	a5,a5,-3
  asm volatile("csrw sip, %0" : : "r" (x));
    8000253a:	14479073          	csrw	sip,a5
    return 2;
    8000253e:	4509                	li	a0,2
    80002540:	bf79                	j	800024de <devintr+0x1e>
      clockintr();
    80002542:	00000097          	auipc	ra,0x0
    80002546:	f38080e7          	jalr	-200(ra) # 8000247a <clockintr>
    8000254a:	b7ed                	j	80002534 <devintr+0x74>

000000008000254c <usertrap>:
{
    8000254c:	1101                	addi	sp,sp,-32
    8000254e:	ec06                	sd	ra,24(sp)
    80002550:	e822                	sd	s0,16(sp)
    80002552:	e426                	sd	s1,8(sp)
    80002554:	e04a                	sd	s2,0(sp)
    80002556:	1000                	addi	s0,sp,32
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    80002558:	100027f3          	csrr	a5,sstatus
  if((r_sstatus() & SSTATUS_SPP) != 0)
    8000255c:	1007f793          	andi	a5,a5,256
    80002560:	e7bd                	bnez	a5,800025ce <usertrap+0x82>
  asm volatile("csrw stvec, %0" : : "r" (x));
    80002562:	00003797          	auipc	a5,0x3
    80002566:	24e78793          	addi	a5,a5,590 # 800057b0 <kernelvec>
    8000256a:	10579073          	csrw	stvec,a5
  struct proc *p = myproc();
    8000256e:	fffff097          	auipc	ra,0xfffff
    80002572:	26e080e7          	jalr	622(ra) # 800017dc <myproc>
    80002576:	84aa                	mv	s1,a0
  p->tf->epc = r_sepc();
    80002578:	693c                	ld	a5,80(a0)
  asm volatile("csrr %0, sepc" : "=r" (x) );
    8000257a:	14102773          	csrr	a4,sepc
    8000257e:	ef98                	sd	a4,24(a5)
  asm volatile("csrr %0, scause" : "=r" (x) );
    80002580:	14202773          	csrr	a4,scause
  if(r_scause() == 8){
    80002584:	47a1                	li	a5,8
    80002586:	06f71163          	bne	a4,a5,800025e8 <usertrap+0x9c>
    if(p->killed)
    8000258a:	591c                	lw	a5,48(a0)
    8000258c:	eba9                	bnez	a5,800025de <usertrap+0x92>
    p->tf->epc += 4;
    8000258e:	68b8                	ld	a4,80(s1)
    80002590:	6f1c                	ld	a5,24(a4)
    80002592:	0791                	addi	a5,a5,4
    80002594:	ef1c                	sd	a5,24(a4)
  asm volatile("csrr %0, sie" : "=r" (x) );
    80002596:	104027f3          	csrr	a5,sie
  w_sie(r_sie() | SIE_SEIE | SIE_STIE | SIE_SSIE);
    8000259a:	2227e793          	ori	a5,a5,546
  asm volatile("csrw sie, %0" : : "r" (x));
    8000259e:	10479073          	csrw	sie,a5
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    800025a2:	100027f3          	csrr	a5,sstatus
  w_sstatus(r_sstatus() | SSTATUS_SIE);
    800025a6:	0027e793          	ori	a5,a5,2
  asm volatile("csrw sstatus, %0" : : "r" (x));
    800025aa:	10079073          	csrw	sstatus,a5
    syscall();
    800025ae:	00000097          	auipc	ra,0x0
    800025b2:	2dc080e7          	jalr	732(ra) # 8000288a <syscall>
  if(p->killed)
    800025b6:	589c                	lw	a5,48(s1)
    800025b8:	e7d1                	bnez	a5,80002644 <usertrap+0xf8>
  usertrapret();
    800025ba:	00000097          	auipc	ra,0x0
    800025be:	e22080e7          	jalr	-478(ra) # 800023dc <usertrapret>
}
    800025c2:	60e2                	ld	ra,24(sp)
    800025c4:	6442                	ld	s0,16(sp)
    800025c6:	64a2                	ld	s1,8(sp)
    800025c8:	6902                	ld	s2,0(sp)
    800025ca:	6105                	addi	sp,sp,32
    800025cc:	8082                	ret
    panic("usertrap: not from user mode");
    800025ce:	00004517          	auipc	a0,0x4
    800025d2:	dc250513          	addi	a0,a0,-574 # 80006390 <userret+0x300>
    800025d6:	ffffe097          	auipc	ra,0xffffe
    800025da:	f78080e7          	jalr	-136(ra) # 8000054e <panic>
      exit();
    800025de:	00000097          	auipc	ra,0x0
    800025e2:	8be080e7          	jalr	-1858(ra) # 80001e9c <exit>
    800025e6:	b765                	j	8000258e <usertrap+0x42>
  } else if((which_dev = devintr()) != 0){
    800025e8:	00000097          	auipc	ra,0x0
    800025ec:	ed8080e7          	jalr	-296(ra) # 800024c0 <devintr>
    800025f0:	892a                	mv	s2,a0
    800025f2:	c501                	beqz	a0,800025fa <usertrap+0xae>
  if(p->killed)
    800025f4:	589c                	lw	a5,48(s1)
    800025f6:	cf9d                	beqz	a5,80002634 <usertrap+0xe8>
    800025f8:	a815                	j	8000262c <usertrap+0xe0>
  asm volatile("csrr %0, scause" : "=r" (x) );
    800025fa:	142025f3          	csrr	a1,scause
    printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
    800025fe:	58d0                	lw	a2,52(s1)
    80002600:	00004517          	auipc	a0,0x4
    80002604:	db050513          	addi	a0,a0,-592 # 800063b0 <userret+0x320>
    80002608:	ffffe097          	auipc	ra,0xffffe
    8000260c:	f90080e7          	jalr	-112(ra) # 80000598 <printf>
  asm volatile("csrr %0, sepc" : "=r" (x) );
    80002610:	141025f3          	csrr	a1,sepc
  asm volatile("csrr %0, stval" : "=r" (x) );
    80002614:	14302673          	csrr	a2,stval
    printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
    80002618:	00004517          	auipc	a0,0x4
    8000261c:	dc850513          	addi	a0,a0,-568 # 800063e0 <userret+0x350>
    80002620:	ffffe097          	auipc	ra,0xffffe
    80002624:	f78080e7          	jalr	-136(ra) # 80000598 <printf>
    p->killed = 1;
    80002628:	4785                	li	a5,1
    8000262a:	d89c                	sw	a5,48(s1)
    exit();
    8000262c:	00000097          	auipc	ra,0x0
    80002630:	870080e7          	jalr	-1936(ra) # 80001e9c <exit>
  if(which_dev == 2)
    80002634:	4789                	li	a5,2
    80002636:	f8f912e3          	bne	s2,a5,800025ba <usertrap+0x6e>
    yield();
    8000263a:	00000097          	auipc	ra,0x0
    8000263e:	93c080e7          	jalr	-1732(ra) # 80001f76 <yield>
    80002642:	bfa5                	j	800025ba <usertrap+0x6e>
  int which_dev = 0;
    80002644:	4901                	li	s2,0
    80002646:	b7dd                	j	8000262c <usertrap+0xe0>

0000000080002648 <kerneltrap>:
{
    80002648:	7179                	addi	sp,sp,-48
    8000264a:	f406                	sd	ra,40(sp)
    8000264c:	f022                	sd	s0,32(sp)
    8000264e:	ec26                	sd	s1,24(sp)
    80002650:	e84a                	sd	s2,16(sp)
    80002652:	e44e                	sd	s3,8(sp)
    80002654:	1800                	addi	s0,sp,48
  asm volatile("csrr %0, sepc" : "=r" (x) );
    80002656:	14102973          	csrr	s2,sepc
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    8000265a:	100024f3          	csrr	s1,sstatus
  asm volatile("csrr %0, scause" : "=r" (x) );
    8000265e:	142029f3          	csrr	s3,scause
  if((sstatus & SSTATUS_SPP) == 0)
    80002662:	1004f793          	andi	a5,s1,256
    80002666:	cb85                	beqz	a5,80002696 <kerneltrap+0x4e>
  asm volatile("csrr %0, sstatus" : "=r" (x) );
    80002668:	100027f3          	csrr	a5,sstatus
  return (x & SSTATUS_SIE) != 0;
    8000266c:	8b89                	andi	a5,a5,2
  if(intr_get() != 0)
    8000266e:	ef85                	bnez	a5,800026a6 <kerneltrap+0x5e>
  if((which_dev = devintr()) == 0){
    80002670:	00000097          	auipc	ra,0x0
    80002674:	e50080e7          	jalr	-432(ra) # 800024c0 <devintr>
    80002678:	cd1d                	beqz	a0,800026b6 <kerneltrap+0x6e>
  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)
    8000267a:	4789                	li	a5,2
    8000267c:	06f50a63          	beq	a0,a5,800026f0 <kerneltrap+0xa8>
  asm volatile("csrw sepc, %0" : : "r" (x));
    80002680:	14191073          	csrw	sepc,s2
  asm volatile("csrw sstatus, %0" : : "r" (x));
    80002684:	10049073          	csrw	sstatus,s1
}
    80002688:	70a2                	ld	ra,40(sp)
    8000268a:	7402                	ld	s0,32(sp)
    8000268c:	64e2                	ld	s1,24(sp)
    8000268e:	6942                	ld	s2,16(sp)
    80002690:	69a2                	ld	s3,8(sp)
    80002692:	6145                	addi	sp,sp,48
    80002694:	8082                	ret
    panic("kerneltrap: not from supervisor mode");
    80002696:	00004517          	auipc	a0,0x4
    8000269a:	d6a50513          	addi	a0,a0,-662 # 80006400 <userret+0x370>
    8000269e:	ffffe097          	auipc	ra,0xffffe
    800026a2:	eb0080e7          	jalr	-336(ra) # 8000054e <panic>
    panic("kerneltrap: interrupts enabled");
    800026a6:	00004517          	auipc	a0,0x4
    800026aa:	d8250513          	addi	a0,a0,-638 # 80006428 <userret+0x398>
    800026ae:	ffffe097          	auipc	ra,0xffffe
    800026b2:	ea0080e7          	jalr	-352(ra) # 8000054e <panic>
    printf("scause %p\n", scause);
    800026b6:	85ce                	mv	a1,s3
    800026b8:	00004517          	auipc	a0,0x4
    800026bc:	d9050513          	addi	a0,a0,-624 # 80006448 <userret+0x3b8>
    800026c0:	ffffe097          	auipc	ra,0xffffe
    800026c4:	ed8080e7          	jalr	-296(ra) # 80000598 <printf>
  asm volatile("csrr %0, sepc" : "=r" (x) );
    800026c8:	141025f3          	csrr	a1,sepc
  asm volatile("csrr %0, stval" : "=r" (x) );
    800026cc:	14302673          	csrr	a2,stval
    printf("sepc=%p stval=%p\n", r_sepc(), r_stval());
    800026d0:	00004517          	auipc	a0,0x4
    800026d4:	d8850513          	addi	a0,a0,-632 # 80006458 <userret+0x3c8>
    800026d8:	ffffe097          	auipc	ra,0xffffe
    800026dc:	ec0080e7          	jalr	-320(ra) # 80000598 <printf>
    panic("kerneltrap");
    800026e0:	00004517          	auipc	a0,0x4
    800026e4:	d9050513          	addi	a0,a0,-624 # 80006470 <userret+0x3e0>
    800026e8:	ffffe097          	auipc	ra,0xffffe
    800026ec:	e66080e7          	jalr	-410(ra) # 8000054e <panic>
  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)
    800026f0:	fffff097          	auipc	ra,0xfffff
    800026f4:	0ec080e7          	jalr	236(ra) # 800017dc <myproc>
    800026f8:	d541                	beqz	a0,80002680 <kerneltrap+0x38>
    800026fa:	fffff097          	auipc	ra,0xfffff
    800026fe:	0e2080e7          	jalr	226(ra) # 800017dc <myproc>
    80002702:	4d18                	lw	a4,24(a0)
    80002704:	478d                	li	a5,3
    80002706:	f6f71de3          	bne	a4,a5,80002680 <kerneltrap+0x38>
    yield();
    8000270a:	00000097          	auipc	ra,0x0
    8000270e:	86c080e7          	jalr	-1940(ra) # 80001f76 <yield>
    80002712:	b7bd                	j	80002680 <kerneltrap+0x38>

0000000080002714 <argraw>:
  return strlen(buf);
}

static uint64
argraw(int n)
{
    80002714:	1101                	addi	sp,sp,-32
    80002716:	ec06                	sd	ra,24(sp)
    80002718:	e822                	sd	s0,16(sp)
    8000271a:	e426                	sd	s1,8(sp)
    8000271c:	1000                	addi	s0,sp,32
    8000271e:	84aa                	mv	s1,a0
  struct proc *p = myproc();
    80002720:	fffff097          	auipc	ra,0xfffff
    80002724:	0bc080e7          	jalr	188(ra) # 800017dc <myproc>
  switch (n) {
    80002728:	4795                	li	a5,5
    8000272a:	0497e163          	bltu	a5,s1,8000276c <argraw+0x58>
    8000272e:	048a                	slli	s1,s1,0x2
    80002730:	00004717          	auipc	a4,0x4
    80002734:	10070713          	addi	a4,a4,256 # 80006830 <states.1693+0x28>
    80002738:	94ba                	add	s1,s1,a4
    8000273a:	409c                	lw	a5,0(s1)
    8000273c:	97ba                	add	a5,a5,a4
    8000273e:	8782                	jr	a5
  case 0:
    return p->tf->a0;
    80002740:	693c                	ld	a5,80(a0)
    80002742:	7ba8                	ld	a0,112(a5)
  case 5:
    return p->tf->a5;
  }
  panic("argraw");
  return -1;
}
    80002744:	60e2                	ld	ra,24(sp)
    80002746:	6442                	ld	s0,16(sp)
    80002748:	64a2                	ld	s1,8(sp)
    8000274a:	6105                	addi	sp,sp,32
    8000274c:	8082                	ret
    return p->tf->a1;
    8000274e:	693c                	ld	a5,80(a0)
    80002750:	7fa8                	ld	a0,120(a5)
    80002752:	bfcd                	j	80002744 <argraw+0x30>
    return p->tf->a2;
    80002754:	693c                	ld	a5,80(a0)
    80002756:	63c8                	ld	a0,128(a5)
    80002758:	b7f5                	j	80002744 <argraw+0x30>
    return p->tf->a3;
    8000275a:	693c                	ld	a5,80(a0)
    8000275c:	67c8                	ld	a0,136(a5)
    8000275e:	b7dd                	j	80002744 <argraw+0x30>
    return p->tf->a4;
    80002760:	693c                	ld	a5,80(a0)
    80002762:	6bc8                	ld	a0,144(a5)
    80002764:	b7c5                	j	80002744 <argraw+0x30>
    return p->tf->a5;
    80002766:	693c                	ld	a5,80(a0)
    80002768:	6fc8                	ld	a0,152(a5)
    8000276a:	bfe9                	j	80002744 <argraw+0x30>
  panic("argraw");
    8000276c:	00004517          	auipc	a0,0x4
    80002770:	d1450513          	addi	a0,a0,-748 # 80006480 <userret+0x3f0>
    80002774:	ffffe097          	auipc	ra,0xffffe
    80002778:	dda080e7          	jalr	-550(ra) # 8000054e <panic>

000000008000277c <fetchaddr>:
{
    8000277c:	1101                	addi	sp,sp,-32
    8000277e:	ec06                	sd	ra,24(sp)
    80002780:	e822                	sd	s0,16(sp)
    80002782:	e426                	sd	s1,8(sp)
    80002784:	e04a                	sd	s2,0(sp)
    80002786:	1000                	addi	s0,sp,32
    80002788:	84aa                	mv	s1,a0
    8000278a:	892e                	mv	s2,a1
  struct proc *p = myproc();
    8000278c:	fffff097          	auipc	ra,0xfffff
    80002790:	050080e7          	jalr	80(ra) # 800017dc <myproc>
  if(addr >= p->sz || addr+sizeof(uint64) > p->sz)
    80002794:	613c                	ld	a5,64(a0)
    80002796:	02f4f863          	bgeu	s1,a5,800027c6 <fetchaddr+0x4a>
    8000279a:	00848713          	addi	a4,s1,8
    8000279e:	02e7e663          	bltu	a5,a4,800027ca <fetchaddr+0x4e>
  if(copyin(p->pagetable, (char *)ip, addr, sizeof(*ip)) != 0)
    800027a2:	46a1                	li	a3,8
    800027a4:	8626                	mv	a2,s1
    800027a6:	85ca                	mv	a1,s2
    800027a8:	6528                	ld	a0,72(a0)
    800027aa:	fffff097          	auipc	ra,0xfffff
    800027ae:	dea080e7          	jalr	-534(ra) # 80001594 <copyin>
    800027b2:	00a03533          	snez	a0,a0
    800027b6:	40a00533          	neg	a0,a0
}
    800027ba:	60e2                	ld	ra,24(sp)
    800027bc:	6442                	ld	s0,16(sp)
    800027be:	64a2                	ld	s1,8(sp)
    800027c0:	6902                	ld	s2,0(sp)
    800027c2:	6105                	addi	sp,sp,32
    800027c4:	8082                	ret
    return -1;
    800027c6:	557d                	li	a0,-1
    800027c8:	bfcd                	j	800027ba <fetchaddr+0x3e>
    800027ca:	557d                	li	a0,-1
    800027cc:	b7fd                	j	800027ba <fetchaddr+0x3e>

00000000800027ce <fetchstr>:
{
    800027ce:	7179                	addi	sp,sp,-48
    800027d0:	f406                	sd	ra,40(sp)
    800027d2:	f022                	sd	s0,32(sp)
    800027d4:	ec26                	sd	s1,24(sp)
    800027d6:	e84a                	sd	s2,16(sp)
    800027d8:	e44e                	sd	s3,8(sp)
    800027da:	1800                	addi	s0,sp,48
    800027dc:	892a                	mv	s2,a0
    800027de:	84ae                	mv	s1,a1
    800027e0:	89b2                	mv	s3,a2
  struct proc *p = myproc();
    800027e2:	fffff097          	auipc	ra,0xfffff
    800027e6:	ffa080e7          	jalr	-6(ra) # 800017dc <myproc>
  int err = copyinstr(p->pagetable, buf, addr, max);
    800027ea:	86ce                	mv	a3,s3
    800027ec:	864a                	mv	a2,s2
    800027ee:	85a6                	mv	a1,s1
    800027f0:	6528                	ld	a0,72(a0)
    800027f2:	fffff097          	auipc	ra,0xfffff
    800027f6:	e34080e7          	jalr	-460(ra) # 80001626 <copyinstr>
  if(err < 0)
    800027fa:	00054763          	bltz	a0,80002808 <fetchstr+0x3a>
  return strlen(buf);
    800027fe:	8526                	mv	a0,s1
    80002800:	ffffe097          	auipc	ra,0xffffe
    80002804:	4f2080e7          	jalr	1266(ra) # 80000cf2 <strlen>
}
    80002808:	70a2                	ld	ra,40(sp)
    8000280a:	7402                	ld	s0,32(sp)
    8000280c:	64e2                	ld	s1,24(sp)
    8000280e:	6942                	ld	s2,16(sp)
    80002810:	69a2                	ld	s3,8(sp)
    80002812:	6145                	addi	sp,sp,48
    80002814:	8082                	ret

0000000080002816 <argint>:

/* Fetch the nth 32-bit system call argument. */
int
argint(int n, int *ip)
{
    80002816:	1101                	addi	sp,sp,-32
    80002818:	ec06                	sd	ra,24(sp)
    8000281a:	e822                	sd	s0,16(sp)
    8000281c:	e426                	sd	s1,8(sp)
    8000281e:	1000                	addi	s0,sp,32
    80002820:	84ae                	mv	s1,a1
  *ip = argraw(n);
    80002822:	00000097          	auipc	ra,0x0
    80002826:	ef2080e7          	jalr	-270(ra) # 80002714 <argraw>
    8000282a:	c088                	sw	a0,0(s1)
  return 0;
}
    8000282c:	4501                	li	a0,0
    8000282e:	60e2                	ld	ra,24(sp)
    80002830:	6442                	ld	s0,16(sp)
    80002832:	64a2                	ld	s1,8(sp)
    80002834:	6105                	addi	sp,sp,32
    80002836:	8082                	ret

0000000080002838 <argaddr>:
/* Retrieve an argument as a pointer. */
/* Doesn't check for legality, since */
/* copyin/copyout will do that. */
int
argaddr(int n, uint64 *ip)
{
    80002838:	1101                	addi	sp,sp,-32
    8000283a:	ec06                	sd	ra,24(sp)
    8000283c:	e822                	sd	s0,16(sp)
    8000283e:	e426                	sd	s1,8(sp)
    80002840:	1000                	addi	s0,sp,32
    80002842:	84ae                	mv	s1,a1
  *ip = argraw(n);
    80002844:	00000097          	auipc	ra,0x0
    80002848:	ed0080e7          	jalr	-304(ra) # 80002714 <argraw>
    8000284c:	e088                	sd	a0,0(s1)
  return 0;
}
    8000284e:	4501                	li	a0,0
    80002850:	60e2                	ld	ra,24(sp)
    80002852:	6442                	ld	s0,16(sp)
    80002854:	64a2                	ld	s1,8(sp)
    80002856:	6105                	addi	sp,sp,32
    80002858:	8082                	ret

000000008000285a <argstr>:
/* Fetch the nth word-sized system call argument as a null-terminated string. */
/* Copies into buf, at most max. */
/* Returns string length if OK (including nul), -1 if error. */
int
argstr(int n, char *buf, int max)
{
    8000285a:	1101                	addi	sp,sp,-32
    8000285c:	ec06                	sd	ra,24(sp)
    8000285e:	e822                	sd	s0,16(sp)
    80002860:	e426                	sd	s1,8(sp)
    80002862:	e04a                	sd	s2,0(sp)
    80002864:	1000                	addi	s0,sp,32
    80002866:	84ae                	mv	s1,a1
    80002868:	8932                	mv	s2,a2
  *ip = argraw(n);
    8000286a:	00000097          	auipc	ra,0x0
    8000286e:	eaa080e7          	jalr	-342(ra) # 80002714 <argraw>
  uint64 addr;
  if(argaddr(n, &addr) < 0)
    return -1;
  return fetchstr(addr, buf, max);
    80002872:	864a                	mv	a2,s2
    80002874:	85a6                	mv	a1,s1
    80002876:	00000097          	auipc	ra,0x0
    8000287a:	f58080e7          	jalr	-168(ra) # 800027ce <fetchstr>
}
    8000287e:	60e2                	ld	ra,24(sp)
    80002880:	6442                	ld	s0,16(sp)
    80002882:	64a2                	ld	s1,8(sp)
    80002884:	6902                	ld	s2,0(sp)
    80002886:	6105                	addi	sp,sp,32
    80002888:	8082                	ret

000000008000288a <syscall>:
[SYS_close]   sys_close,
};

void
syscall(void)
{
    8000288a:	1101                	addi	sp,sp,-32
    8000288c:	ec06                	sd	ra,24(sp)
    8000288e:	e822                	sd	s0,16(sp)
    80002890:	e426                	sd	s1,8(sp)
    80002892:	e04a                	sd	s2,0(sp)
    80002894:	1000                	addi	s0,sp,32
  int num;
  struct proc *p = myproc();
    80002896:	fffff097          	auipc	ra,0xfffff
    8000289a:	f46080e7          	jalr	-186(ra) # 800017dc <myproc>
    8000289e:	84aa                	mv	s1,a0

  num = p->tf->a7;
    800028a0:	05053903          	ld	s2,80(a0)
    800028a4:	0a893783          	ld	a5,168(s2)
    800028a8:	0007869b          	sext.w	a3,a5
  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
    800028ac:	37fd                	addiw	a5,a5,-1
    800028ae:	4751                	li	a4,20
    800028b0:	00f76f63          	bltu	a4,a5,800028ce <syscall+0x44>
    800028b4:	00369713          	slli	a4,a3,0x3
    800028b8:	00004797          	auipc	a5,0x4
    800028bc:	f9078793          	addi	a5,a5,-112 # 80006848 <syscalls>
    800028c0:	97ba                	add	a5,a5,a4
    800028c2:	639c                	ld	a5,0(a5)
    800028c4:	c789                	beqz	a5,800028ce <syscall+0x44>
    p->tf->a0 = syscalls[num]();
    800028c6:	9782                	jalr	a5
    800028c8:	06a93823          	sd	a0,112(s2)
    800028cc:	a839                	j	800028ea <syscall+0x60>
  } else {
    printf("%d %s: unknown sys call %d\n",
    800028ce:	15048613          	addi	a2,s1,336
    800028d2:	58cc                	lw	a1,52(s1)
    800028d4:	00004517          	auipc	a0,0x4
    800028d8:	bb450513          	addi	a0,a0,-1100 # 80006488 <userret+0x3f8>
    800028dc:	ffffe097          	auipc	ra,0xffffe
    800028e0:	cbc080e7          	jalr	-836(ra) # 80000598 <printf>
            p->pid, p->name, num);
    p->tf->a0 = -1;
    800028e4:	68bc                	ld	a5,80(s1)
    800028e6:	577d                	li	a4,-1
    800028e8:	fbb8                	sd	a4,112(a5)
  }
}
    800028ea:	60e2                	ld	ra,24(sp)
    800028ec:	6442                	ld	s0,16(sp)
    800028ee:	64a2                	ld	s1,8(sp)
    800028f0:	6902                	ld	s2,0(sp)
    800028f2:	6105                	addi	sp,sp,32
    800028f4:	8082                	ret

00000000800028f6 <sys_exit>:
#include "spinlock.h"
#include "proc.h"

uint64
sys_exit(void)
{
    800028f6:	1141                	addi	sp,sp,-16
    800028f8:	e406                	sd	ra,8(sp)
    800028fa:	e022                	sd	s0,0(sp)
    800028fc:	0800                	addi	s0,sp,16
  exit();
    800028fe:	fffff097          	auipc	ra,0xfffff
    80002902:	59e080e7          	jalr	1438(ra) # 80001e9c <exit>
  return 0;  /* not reached */
}
    80002906:	4501                	li	a0,0
    80002908:	60a2                	ld	ra,8(sp)
    8000290a:	6402                	ld	s0,0(sp)
    8000290c:	0141                	addi	sp,sp,16
    8000290e:	8082                	ret

0000000080002910 <sys_getpid>:

uint64
sys_getpid(void)
{
    80002910:	1141                	addi	sp,sp,-16
    80002912:	e406                	sd	ra,8(sp)
    80002914:	e022                	sd	s0,0(sp)
    80002916:	0800                	addi	s0,sp,16
  return myproc()->pid;
    80002918:	fffff097          	auipc	ra,0xfffff
    8000291c:	ec4080e7          	jalr	-316(ra) # 800017dc <myproc>
}
    80002920:	5948                	lw	a0,52(a0)
    80002922:	60a2                	ld	ra,8(sp)
    80002924:	6402                	ld	s0,0(sp)
    80002926:	0141                	addi	sp,sp,16
    80002928:	8082                	ret

000000008000292a <sys_fork>:

uint64
sys_fork(void)
{
    8000292a:	1141                	addi	sp,sp,-16
    8000292c:	e406                	sd	ra,8(sp)
    8000292e:	e022                	sd	s0,0(sp)
    80002930:	0800                	addi	s0,sp,16
  return fork();
    80002932:	fffff097          	auipc	ra,0xfffff
    80002936:	214080e7          	jalr	532(ra) # 80001b46 <fork>
}
    8000293a:	60a2                	ld	ra,8(sp)
    8000293c:	6402                	ld	s0,0(sp)
    8000293e:	0141                	addi	sp,sp,16
    80002940:	8082                	ret

0000000080002942 <sys_wait>:

uint64
sys_wait(void)
{
    80002942:	1141                	addi	sp,sp,-16
    80002944:	e406                	sd	ra,8(sp)
    80002946:	e022                	sd	s0,0(sp)
    80002948:	0800                	addi	s0,sp,16
  return wait();
    8000294a:	fffff097          	auipc	ra,0xfffff
    8000294e:	6e6080e7          	jalr	1766(ra) # 80002030 <wait>
}
    80002952:	60a2                	ld	ra,8(sp)
    80002954:	6402                	ld	s0,0(sp)
    80002956:	0141                	addi	sp,sp,16
    80002958:	8082                	ret

000000008000295a <sys_sbrk>:

uint64
sys_sbrk(void)
{
    8000295a:	7179                	addi	sp,sp,-48
    8000295c:	f406                	sd	ra,40(sp)
    8000295e:	f022                	sd	s0,32(sp)
    80002960:	ec26                	sd	s1,24(sp)
    80002962:	1800                	addi	s0,sp,48
  int addr;
  int n;

  if(argint(0, &n) < 0)
    80002964:	fdc40593          	addi	a1,s0,-36
    80002968:	4501                	li	a0,0
    8000296a:	00000097          	auipc	ra,0x0
    8000296e:	eac080e7          	jalr	-340(ra) # 80002816 <argint>
    80002972:	87aa                	mv	a5,a0
    return -1;
    80002974:	557d                	li	a0,-1
  if(argint(0, &n) < 0)
    80002976:	0207c063          	bltz	a5,80002996 <sys_sbrk+0x3c>
  addr = myproc()->sz;
    8000297a:	fffff097          	auipc	ra,0xfffff
    8000297e:	e62080e7          	jalr	-414(ra) # 800017dc <myproc>
    80002982:	4124                	lw	s1,64(a0)
  if(growproc(n) < 0)
    80002984:	fdc42503          	lw	a0,-36(s0)
    80002988:	fffff097          	auipc	ra,0xfffff
    8000298c:	146080e7          	jalr	326(ra) # 80001ace <growproc>
    80002990:	00054863          	bltz	a0,800029a0 <sys_sbrk+0x46>
    return -1;
  return addr;
    80002994:	8526                	mv	a0,s1
}
    80002996:	70a2                	ld	ra,40(sp)
    80002998:	7402                	ld	s0,32(sp)
    8000299a:	64e2                	ld	s1,24(sp)
    8000299c:	6145                	addi	sp,sp,48
    8000299e:	8082                	ret
    return -1;
    800029a0:	557d                	li	a0,-1
    800029a2:	bfd5                	j	80002996 <sys_sbrk+0x3c>

00000000800029a4 <sys_sleep>:

uint64
sys_sleep(void)
{
    800029a4:	7139                	addi	sp,sp,-64
    800029a6:	fc06                	sd	ra,56(sp)
    800029a8:	f822                	sd	s0,48(sp)
    800029aa:	f426                	sd	s1,40(sp)
    800029ac:	f04a                	sd	s2,32(sp)
    800029ae:	ec4e                	sd	s3,24(sp)
    800029b0:	0080                	addi	s0,sp,64
  int n;
  uint ticks0;

  if(argint(0, &n) < 0)
    800029b2:	fcc40593          	addi	a1,s0,-52
    800029b6:	4501                	li	a0,0
    800029b8:	00000097          	auipc	ra,0x0
    800029bc:	e5e080e7          	jalr	-418(ra) # 80002816 <argint>
    return -1;
    800029c0:	57fd                	li	a5,-1
  if(argint(0, &n) < 0)
    800029c2:	06054563          	bltz	a0,80002a2c <sys_sleep+0x88>
  acquire(&tickslock);
    800029c6:	00014517          	auipc	a0,0x14
    800029ca:	b3a50513          	addi	a0,a0,-1222 # 80016500 <tickslock>
    800029ce:	ffffe097          	auipc	ra,0xffffe
    800029d2:	100080e7          	jalr	256(ra) # 80000ace <acquire>
  ticks0 = ticks;
    800029d6:	00022917          	auipc	s2,0x22
    800029da:	64292903          	lw	s2,1602(s2) # 80025018 <ticks>
  while(ticks - ticks0 < n){
    800029de:	fcc42783          	lw	a5,-52(s0)
    800029e2:	cf85                	beqz	a5,80002a1a <sys_sleep+0x76>
    if(myproc()->killed){
      release(&tickslock);
      return -1;
    }
    sleep(&ticks, &tickslock);
    800029e4:	00014997          	auipc	s3,0x14
    800029e8:	b1c98993          	addi	s3,s3,-1252 # 80016500 <tickslock>
    800029ec:	00022497          	auipc	s1,0x22
    800029f0:	62c48493          	addi	s1,s1,1580 # 80025018 <ticks>
    if(myproc()->killed){
    800029f4:	fffff097          	auipc	ra,0xfffff
    800029f8:	de8080e7          	jalr	-536(ra) # 800017dc <myproc>
    800029fc:	591c                	lw	a5,48(a0)
    800029fe:	ef9d                	bnez	a5,80002a3c <sys_sleep+0x98>
    sleep(&ticks, &tickslock);
    80002a00:	85ce                	mv	a1,s3
    80002a02:	8526                	mv	a0,s1
    80002a04:	fffff097          	auipc	ra,0xfffff
    80002a08:	5ae080e7          	jalr	1454(ra) # 80001fb2 <sleep>
  while(ticks - ticks0 < n){
    80002a0c:	409c                	lw	a5,0(s1)
    80002a0e:	412787bb          	subw	a5,a5,s2
    80002a12:	fcc42703          	lw	a4,-52(s0)
    80002a16:	fce7efe3          	bltu	a5,a4,800029f4 <sys_sleep+0x50>
  }
  release(&tickslock);
    80002a1a:	00014517          	auipc	a0,0x14
    80002a1e:	ae650513          	addi	a0,a0,-1306 # 80016500 <tickslock>
    80002a22:	ffffe097          	auipc	ra,0xffffe
    80002a26:	100080e7          	jalr	256(ra) # 80000b22 <release>
  return 0;
    80002a2a:	4781                	li	a5,0
}
    80002a2c:	853e                	mv	a0,a5
    80002a2e:	70e2                	ld	ra,56(sp)
    80002a30:	7442                	ld	s0,48(sp)
    80002a32:	74a2                	ld	s1,40(sp)
    80002a34:	7902                	ld	s2,32(sp)
    80002a36:	69e2                	ld	s3,24(sp)
    80002a38:	6121                	addi	sp,sp,64
    80002a3a:	8082                	ret
      release(&tickslock);
    80002a3c:	00014517          	auipc	a0,0x14
    80002a40:	ac450513          	addi	a0,a0,-1340 # 80016500 <tickslock>
    80002a44:	ffffe097          	auipc	ra,0xffffe
    80002a48:	0de080e7          	jalr	222(ra) # 80000b22 <release>
      return -1;
    80002a4c:	57fd                	li	a5,-1
    80002a4e:	bff9                	j	80002a2c <sys_sleep+0x88>

0000000080002a50 <sys_kill>:

uint64
sys_kill(void)
{
    80002a50:	1101                	addi	sp,sp,-32
    80002a52:	ec06                	sd	ra,24(sp)
    80002a54:	e822                	sd	s0,16(sp)
    80002a56:	1000                	addi	s0,sp,32
  int pid;

  if(argint(0, &pid) < 0)
    80002a58:	fec40593          	addi	a1,s0,-20
    80002a5c:	4501                	li	a0,0
    80002a5e:	00000097          	auipc	ra,0x0
    80002a62:	db8080e7          	jalr	-584(ra) # 80002816 <argint>
    80002a66:	87aa                	mv	a5,a0
    return -1;
    80002a68:	557d                	li	a0,-1
  if(argint(0, &pid) < 0)
    80002a6a:	0007c863          	bltz	a5,80002a7a <sys_kill+0x2a>
  return kill(pid);
    80002a6e:	fec42503          	lw	a0,-20(s0)
    80002a72:	fffff097          	auipc	ra,0xfffff
    80002a76:	6f6080e7          	jalr	1782(ra) # 80002168 <kill>
}
    80002a7a:	60e2                	ld	ra,24(sp)
    80002a7c:	6442                	ld	s0,16(sp)
    80002a7e:	6105                	addi	sp,sp,32
    80002a80:	8082                	ret

0000000080002a82 <sys_uptime>:

/* return how many clock tick interrupts have occurred */
/* since start. */
uint64
sys_uptime(void)
{
    80002a82:	1101                	addi	sp,sp,-32
    80002a84:	ec06                	sd	ra,24(sp)
    80002a86:	e822                	sd	s0,16(sp)
    80002a88:	e426                	sd	s1,8(sp)
    80002a8a:	1000                	addi	s0,sp,32
  uint xticks;

  acquire(&tickslock);
    80002a8c:	00014517          	auipc	a0,0x14
    80002a90:	a7450513          	addi	a0,a0,-1420 # 80016500 <tickslock>
    80002a94:	ffffe097          	auipc	ra,0xffffe
    80002a98:	03a080e7          	jalr	58(ra) # 80000ace <acquire>
  xticks = ticks;
    80002a9c:	00022497          	auipc	s1,0x22
    80002aa0:	57c4a483          	lw	s1,1404(s1) # 80025018 <ticks>
  release(&tickslock);
    80002aa4:	00014517          	auipc	a0,0x14
    80002aa8:	a5c50513          	addi	a0,a0,-1444 # 80016500 <tickslock>
    80002aac:	ffffe097          	auipc	ra,0xffffe
    80002ab0:	076080e7          	jalr	118(ra) # 80000b22 <release>
  return xticks;
}
    80002ab4:	02049513          	slli	a0,s1,0x20
    80002ab8:	9101                	srli	a0,a0,0x20
    80002aba:	60e2                	ld	ra,24(sp)
    80002abc:	6442                	ld	s0,16(sp)
    80002abe:	64a2                	ld	s1,8(sp)
    80002ac0:	6105                	addi	sp,sp,32
    80002ac2:	8082                	ret

0000000080002ac4 <binit>:
  struct buf head;
} bcache;

void
binit(void)
{
    80002ac4:	7179                	addi	sp,sp,-48
    80002ac6:	f406                	sd	ra,40(sp)
    80002ac8:	f022                	sd	s0,32(sp)
    80002aca:	ec26                	sd	s1,24(sp)
    80002acc:	e84a                	sd	s2,16(sp)
    80002ace:	e44e                	sd	s3,8(sp)
    80002ad0:	e052                	sd	s4,0(sp)
    80002ad2:	1800                	addi	s0,sp,48
  struct buf *b;

  initlock(&bcache.lock, "bcache");
    80002ad4:	00004597          	auipc	a1,0x4
    80002ad8:	9d458593          	addi	a1,a1,-1580 # 800064a8 <userret+0x418>
    80002adc:	00014517          	auipc	a0,0x14
    80002ae0:	a3c50513          	addi	a0,a0,-1476 # 80016518 <bcache>
    80002ae4:	ffffe097          	auipc	ra,0xffffe
    80002ae8:	ed8080e7          	jalr	-296(ra) # 800009bc <initlock>

  /* Create linked list of buffers */
  bcache.head.prev = &bcache.head;
    80002aec:	0001c797          	auipc	a5,0x1c
    80002af0:	a2c78793          	addi	a5,a5,-1492 # 8001e518 <bcache+0x8000>
    80002af4:	0001c717          	auipc	a4,0x1c
    80002af8:	d7c70713          	addi	a4,a4,-644 # 8001e870 <bcache+0x8358>
    80002afc:	3ae7b023          	sd	a4,928(a5)
  bcache.head.next = &bcache.head;
    80002b00:	3ae7b423          	sd	a4,936(a5)
  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
    80002b04:	00014497          	auipc	s1,0x14
    80002b08:	a2c48493          	addi	s1,s1,-1492 # 80016530 <bcache+0x18>
    b->next = bcache.head.next;
    80002b0c:	893e                	mv	s2,a5
    b->prev = &bcache.head;
    80002b0e:	89ba                	mv	s3,a4
    initsleeplock(&b->lock, "buffer");
    80002b10:	00004a17          	auipc	s4,0x4
    80002b14:	9a0a0a13          	addi	s4,s4,-1632 # 800064b0 <userret+0x420>
    b->next = bcache.head.next;
    80002b18:	3a893783          	ld	a5,936(s2)
    80002b1c:	e8bc                	sd	a5,80(s1)
    b->prev = &bcache.head;
    80002b1e:	0534b423          	sd	s3,72(s1)
    initsleeplock(&b->lock, "buffer");
    80002b22:	85d2                	mv	a1,s4
    80002b24:	01048513          	addi	a0,s1,16
    80002b28:	00001097          	auipc	ra,0x1
    80002b2c:	488080e7          	jalr	1160(ra) # 80003fb0 <initsleeplock>
    bcache.head.next->prev = b;
    80002b30:	3a893783          	ld	a5,936(s2)
    80002b34:	e7a4                	sd	s1,72(a5)
    bcache.head.next = b;
    80002b36:	3a993423          	sd	s1,936(s2)
  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
    80002b3a:	46048493          	addi	s1,s1,1120
    80002b3e:	fd349de3          	bne	s1,s3,80002b18 <binit+0x54>
  }
}
    80002b42:	70a2                	ld	ra,40(sp)
    80002b44:	7402                	ld	s0,32(sp)
    80002b46:	64e2                	ld	s1,24(sp)
    80002b48:	6942                	ld	s2,16(sp)
    80002b4a:	69a2                	ld	s3,8(sp)
    80002b4c:	6a02                	ld	s4,0(sp)
    80002b4e:	6145                	addi	sp,sp,48
    80002b50:	8082                	ret

0000000080002b52 <bread>:
}

/* Return a locked buf with the contents of the indicated block. */
struct buf*
bread(uint dev, uint blockno)
{
    80002b52:	7179                	addi	sp,sp,-48
    80002b54:	f406                	sd	ra,40(sp)
    80002b56:	f022                	sd	s0,32(sp)
    80002b58:	ec26                	sd	s1,24(sp)
    80002b5a:	e84a                	sd	s2,16(sp)
    80002b5c:	e44e                	sd	s3,8(sp)
    80002b5e:	1800                	addi	s0,sp,48
    80002b60:	89aa                	mv	s3,a0
    80002b62:	892e                	mv	s2,a1
  acquire(&bcache.lock);
    80002b64:	00014517          	auipc	a0,0x14
    80002b68:	9b450513          	addi	a0,a0,-1612 # 80016518 <bcache>
    80002b6c:	ffffe097          	auipc	ra,0xffffe
    80002b70:	f62080e7          	jalr	-158(ra) # 80000ace <acquire>
  for(b = bcache.head.next; b != &bcache.head; b = b->next){
    80002b74:	0001c497          	auipc	s1,0x1c
    80002b78:	d4c4b483          	ld	s1,-692(s1) # 8001e8c0 <bcache+0x83a8>
    80002b7c:	0001c797          	auipc	a5,0x1c
    80002b80:	cf478793          	addi	a5,a5,-780 # 8001e870 <bcache+0x8358>
    80002b84:	02f48f63          	beq	s1,a5,80002bc2 <bread+0x70>
    80002b88:	873e                	mv	a4,a5
    80002b8a:	a021                	j	80002b92 <bread+0x40>
    80002b8c:	68a4                	ld	s1,80(s1)
    80002b8e:	02e48a63          	beq	s1,a4,80002bc2 <bread+0x70>
    if(b->dev == dev && b->blockno == blockno){
    80002b92:	449c                	lw	a5,8(s1)
    80002b94:	ff379ce3          	bne	a5,s3,80002b8c <bread+0x3a>
    80002b98:	44dc                	lw	a5,12(s1)
    80002b9a:	ff2799e3          	bne	a5,s2,80002b8c <bread+0x3a>
      b->refcnt++;
    80002b9e:	40bc                	lw	a5,64(s1)
    80002ba0:	2785                	addiw	a5,a5,1
    80002ba2:	c0bc                	sw	a5,64(s1)
      release(&bcache.lock);
    80002ba4:	00014517          	auipc	a0,0x14
    80002ba8:	97450513          	addi	a0,a0,-1676 # 80016518 <bcache>
    80002bac:	ffffe097          	auipc	ra,0xffffe
    80002bb0:	f76080e7          	jalr	-138(ra) # 80000b22 <release>
      acquiresleep(&b->lock);
    80002bb4:	01048513          	addi	a0,s1,16
    80002bb8:	00001097          	auipc	ra,0x1
    80002bbc:	432080e7          	jalr	1074(ra) # 80003fea <acquiresleep>
      return b;
    80002bc0:	a8b9                	j	80002c1e <bread+0xcc>
  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
    80002bc2:	0001c497          	auipc	s1,0x1c
    80002bc6:	cf64b483          	ld	s1,-778(s1) # 8001e8b8 <bcache+0x83a0>
    80002bca:	0001c797          	auipc	a5,0x1c
    80002bce:	ca678793          	addi	a5,a5,-858 # 8001e870 <bcache+0x8358>
    80002bd2:	00f48863          	beq	s1,a5,80002be2 <bread+0x90>
    80002bd6:	873e                	mv	a4,a5
    if(b->refcnt == 0) {
    80002bd8:	40bc                	lw	a5,64(s1)
    80002bda:	cf81                	beqz	a5,80002bf2 <bread+0xa0>
  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
    80002bdc:	64a4                	ld	s1,72(s1)
    80002bde:	fee49de3          	bne	s1,a4,80002bd8 <bread+0x86>
  panic("bget: no buffers");
    80002be2:	00004517          	auipc	a0,0x4
    80002be6:	8d650513          	addi	a0,a0,-1834 # 800064b8 <userret+0x428>
    80002bea:	ffffe097          	auipc	ra,0xffffe
    80002bee:	964080e7          	jalr	-1692(ra) # 8000054e <panic>
      b->dev = dev;
    80002bf2:	0134a423          	sw	s3,8(s1)
      b->blockno = blockno;
    80002bf6:	0124a623          	sw	s2,12(s1)
      b->valid = 0;
    80002bfa:	0004a023          	sw	zero,0(s1)
      b->refcnt = 1;
    80002bfe:	4785                	li	a5,1
    80002c00:	c0bc                	sw	a5,64(s1)
      release(&bcache.lock);
    80002c02:	00014517          	auipc	a0,0x14
    80002c06:	91650513          	addi	a0,a0,-1770 # 80016518 <bcache>
    80002c0a:	ffffe097          	auipc	ra,0xffffe
    80002c0e:	f18080e7          	jalr	-232(ra) # 80000b22 <release>
      acquiresleep(&b->lock);
    80002c12:	01048513          	addi	a0,s1,16
    80002c16:	00001097          	auipc	ra,0x1
    80002c1a:	3d4080e7          	jalr	980(ra) # 80003fea <acquiresleep>
  struct buf *b;

  b = bget(dev, blockno);
  if(!b->valid) {
    80002c1e:	409c                	lw	a5,0(s1)
    80002c20:	cb89                	beqz	a5,80002c32 <bread+0xe0>
    virtio_disk_rw(b, 0);
    b->valid = 1;
  }
  return b;
}
    80002c22:	8526                	mv	a0,s1
    80002c24:	70a2                	ld	ra,40(sp)
    80002c26:	7402                	ld	s0,32(sp)
    80002c28:	64e2                	ld	s1,24(sp)
    80002c2a:	6942                	ld	s2,16(sp)
    80002c2c:	69a2                	ld	s3,8(sp)
    80002c2e:	6145                	addi	sp,sp,48
    80002c30:	8082                	ret
    virtio_disk_rw(b, 0);
    80002c32:	4581                	li	a1,0
    80002c34:	8526                	mv	a0,s1
    80002c36:	00003097          	auipc	ra,0x3
    80002c3a:	ea8080e7          	jalr	-344(ra) # 80005ade <virtio_disk_rw>
    b->valid = 1;
    80002c3e:	4785                	li	a5,1
    80002c40:	c09c                	sw	a5,0(s1)
  return b;
    80002c42:	b7c5                	j	80002c22 <bread+0xd0>

0000000080002c44 <bwrite>:

/* Write b's contents to disk.  Must be locked. */
void
bwrite(struct buf *b)
{
    80002c44:	1101                	addi	sp,sp,-32
    80002c46:	ec06                	sd	ra,24(sp)
    80002c48:	e822                	sd	s0,16(sp)
    80002c4a:	e426                	sd	s1,8(sp)
    80002c4c:	1000                	addi	s0,sp,32
    80002c4e:	84aa                	mv	s1,a0
  if(!holdingsleep(&b->lock))
    80002c50:	0541                	addi	a0,a0,16
    80002c52:	00001097          	auipc	ra,0x1
    80002c56:	432080e7          	jalr	1074(ra) # 80004084 <holdingsleep>
    80002c5a:	cd01                	beqz	a0,80002c72 <bwrite+0x2e>
    panic("bwrite");
  virtio_disk_rw(b, 1);
    80002c5c:	4585                	li	a1,1
    80002c5e:	8526                	mv	a0,s1
    80002c60:	00003097          	auipc	ra,0x3
    80002c64:	e7e080e7          	jalr	-386(ra) # 80005ade <virtio_disk_rw>
}
    80002c68:	60e2                	ld	ra,24(sp)
    80002c6a:	6442                	ld	s0,16(sp)
    80002c6c:	64a2                	ld	s1,8(sp)
    80002c6e:	6105                	addi	sp,sp,32
    80002c70:	8082                	ret
    panic("bwrite");
    80002c72:	00004517          	auipc	a0,0x4
    80002c76:	85e50513          	addi	a0,a0,-1954 # 800064d0 <userret+0x440>
    80002c7a:	ffffe097          	auipc	ra,0xffffe
    80002c7e:	8d4080e7          	jalr	-1836(ra) # 8000054e <panic>

0000000080002c82 <brelse>:

/* Release a locked buffer. */
/* Move to the head of the MRU list. */
void
brelse(struct buf *b)
{
    80002c82:	1101                	addi	sp,sp,-32
    80002c84:	ec06                	sd	ra,24(sp)
    80002c86:	e822                	sd	s0,16(sp)
    80002c88:	e426                	sd	s1,8(sp)
    80002c8a:	e04a                	sd	s2,0(sp)
    80002c8c:	1000                	addi	s0,sp,32
    80002c8e:	84aa                	mv	s1,a0
  if(!holdingsleep(&b->lock))
    80002c90:	01050913          	addi	s2,a0,16
    80002c94:	854a                	mv	a0,s2
    80002c96:	00001097          	auipc	ra,0x1
    80002c9a:	3ee080e7          	jalr	1006(ra) # 80004084 <holdingsleep>
    80002c9e:	c92d                	beqz	a0,80002d10 <brelse+0x8e>
    panic("brelse");

  releasesleep(&b->lock);
    80002ca0:	854a                	mv	a0,s2
    80002ca2:	00001097          	auipc	ra,0x1
    80002ca6:	39e080e7          	jalr	926(ra) # 80004040 <releasesleep>

  acquire(&bcache.lock);
    80002caa:	00014517          	auipc	a0,0x14
    80002cae:	86e50513          	addi	a0,a0,-1938 # 80016518 <bcache>
    80002cb2:	ffffe097          	auipc	ra,0xffffe
    80002cb6:	e1c080e7          	jalr	-484(ra) # 80000ace <acquire>
  b->refcnt--;
    80002cba:	40bc                	lw	a5,64(s1)
    80002cbc:	37fd                	addiw	a5,a5,-1
    80002cbe:	0007871b          	sext.w	a4,a5
    80002cc2:	c0bc                	sw	a5,64(s1)
  if (b->refcnt == 0) {
    80002cc4:	eb05                	bnez	a4,80002cf4 <brelse+0x72>
    /* no one is waiting for it. */
    b->next->prev = b->prev;
    80002cc6:	68bc                	ld	a5,80(s1)
    80002cc8:	64b8                	ld	a4,72(s1)
    80002cca:	e7b8                	sd	a4,72(a5)
    b->prev->next = b->next;
    80002ccc:	64bc                	ld	a5,72(s1)
    80002cce:	68b8                	ld	a4,80(s1)
    80002cd0:	ebb8                	sd	a4,80(a5)
    b->next = bcache.head.next;
    80002cd2:	0001c797          	auipc	a5,0x1c
    80002cd6:	84678793          	addi	a5,a5,-1978 # 8001e518 <bcache+0x8000>
    80002cda:	3a87b703          	ld	a4,936(a5)
    80002cde:	e8b8                	sd	a4,80(s1)
    b->prev = &bcache.head;
    80002ce0:	0001c717          	auipc	a4,0x1c
    80002ce4:	b9070713          	addi	a4,a4,-1136 # 8001e870 <bcache+0x8358>
    80002ce8:	e4b8                	sd	a4,72(s1)
    bcache.head.next->prev = b;
    80002cea:	3a87b703          	ld	a4,936(a5)
    80002cee:	e724                	sd	s1,72(a4)
    bcache.head.next = b;
    80002cf0:	3a97b423          	sd	s1,936(a5)
  }
  
  release(&bcache.lock);
    80002cf4:	00014517          	auipc	a0,0x14
    80002cf8:	82450513          	addi	a0,a0,-2012 # 80016518 <bcache>
    80002cfc:	ffffe097          	auipc	ra,0xffffe
    80002d00:	e26080e7          	jalr	-474(ra) # 80000b22 <release>
}
    80002d04:	60e2                	ld	ra,24(sp)
    80002d06:	6442                	ld	s0,16(sp)
    80002d08:	64a2                	ld	s1,8(sp)
    80002d0a:	6902                	ld	s2,0(sp)
    80002d0c:	6105                	addi	sp,sp,32
    80002d0e:	8082                	ret
    panic("brelse");
    80002d10:	00003517          	auipc	a0,0x3
    80002d14:	7c850513          	addi	a0,a0,1992 # 800064d8 <userret+0x448>
    80002d18:	ffffe097          	auipc	ra,0xffffe
    80002d1c:	836080e7          	jalr	-1994(ra) # 8000054e <panic>

0000000080002d20 <bpin>:

void
bpin(struct buf *b) {
    80002d20:	1101                	addi	sp,sp,-32
    80002d22:	ec06                	sd	ra,24(sp)
    80002d24:	e822                	sd	s0,16(sp)
    80002d26:	e426                	sd	s1,8(sp)
    80002d28:	1000                	addi	s0,sp,32
    80002d2a:	84aa                	mv	s1,a0
  acquire(&bcache.lock);
    80002d2c:	00013517          	auipc	a0,0x13
    80002d30:	7ec50513          	addi	a0,a0,2028 # 80016518 <bcache>
    80002d34:	ffffe097          	auipc	ra,0xffffe
    80002d38:	d9a080e7          	jalr	-614(ra) # 80000ace <acquire>
  b->refcnt++;
    80002d3c:	40bc                	lw	a5,64(s1)
    80002d3e:	2785                	addiw	a5,a5,1
    80002d40:	c0bc                	sw	a5,64(s1)
  release(&bcache.lock);
    80002d42:	00013517          	auipc	a0,0x13
    80002d46:	7d650513          	addi	a0,a0,2006 # 80016518 <bcache>
    80002d4a:	ffffe097          	auipc	ra,0xffffe
    80002d4e:	dd8080e7          	jalr	-552(ra) # 80000b22 <release>
}
    80002d52:	60e2                	ld	ra,24(sp)
    80002d54:	6442                	ld	s0,16(sp)
    80002d56:	64a2                	ld	s1,8(sp)
    80002d58:	6105                	addi	sp,sp,32
    80002d5a:	8082                	ret

0000000080002d5c <bunpin>:

void
bunpin(struct buf *b) {
    80002d5c:	1101                	addi	sp,sp,-32
    80002d5e:	ec06                	sd	ra,24(sp)
    80002d60:	e822                	sd	s0,16(sp)
    80002d62:	e426                	sd	s1,8(sp)
    80002d64:	1000                	addi	s0,sp,32
    80002d66:	84aa                	mv	s1,a0
  acquire(&bcache.lock);
    80002d68:	00013517          	auipc	a0,0x13
    80002d6c:	7b050513          	addi	a0,a0,1968 # 80016518 <bcache>
    80002d70:	ffffe097          	auipc	ra,0xffffe
    80002d74:	d5e080e7          	jalr	-674(ra) # 80000ace <acquire>
  b->refcnt--;
    80002d78:	40bc                	lw	a5,64(s1)
    80002d7a:	37fd                	addiw	a5,a5,-1
    80002d7c:	c0bc                	sw	a5,64(s1)
  release(&bcache.lock);
    80002d7e:	00013517          	auipc	a0,0x13
    80002d82:	79a50513          	addi	a0,a0,1946 # 80016518 <bcache>
    80002d86:	ffffe097          	auipc	ra,0xffffe
    80002d8a:	d9c080e7          	jalr	-612(ra) # 80000b22 <release>
}
    80002d8e:	60e2                	ld	ra,24(sp)
    80002d90:	6442                	ld	s0,16(sp)
    80002d92:	64a2                	ld	s1,8(sp)
    80002d94:	6105                	addi	sp,sp,32
    80002d96:	8082                	ret

0000000080002d98 <bfree>:
}

/* Free a disk block. */
static void
bfree(int dev, uint b)
{
    80002d98:	1101                	addi	sp,sp,-32
    80002d9a:	ec06                	sd	ra,24(sp)
    80002d9c:	e822                	sd	s0,16(sp)
    80002d9e:	e426                	sd	s1,8(sp)
    80002da0:	e04a                	sd	s2,0(sp)
    80002da2:	1000                	addi	s0,sp,32
    80002da4:	84ae                	mv	s1,a1
  struct buf *bp;
  int bi, m;

  bp = bread(dev, BBLOCK(b, sb));
    80002da6:	00d5d59b          	srliw	a1,a1,0xd
    80002daa:	0001c797          	auipc	a5,0x1c
    80002dae:	f427a783          	lw	a5,-190(a5) # 8001ecec <sb+0x1c>
    80002db2:	9dbd                	addw	a1,a1,a5
    80002db4:	00000097          	auipc	ra,0x0
    80002db8:	d9e080e7          	jalr	-610(ra) # 80002b52 <bread>
  bi = b % BPB;
  m = 1 << (bi % 8);
    80002dbc:	0074f713          	andi	a4,s1,7
    80002dc0:	4785                	li	a5,1
    80002dc2:	00e797bb          	sllw	a5,a5,a4
  if((bp->data[bi/8] & m) == 0)
    80002dc6:	14ce                	slli	s1,s1,0x33
    80002dc8:	90d9                	srli	s1,s1,0x36
    80002dca:	00950733          	add	a4,a0,s1
    80002dce:	06074703          	lbu	a4,96(a4)
    80002dd2:	00e7f6b3          	and	a3,a5,a4
    80002dd6:	c69d                	beqz	a3,80002e04 <bfree+0x6c>
    80002dd8:	892a                	mv	s2,a0
    panic("freeing free block");
  bp->data[bi/8] &= ~m;
    80002dda:	94aa                	add	s1,s1,a0
    80002ddc:	fff7c793          	not	a5,a5
    80002de0:	8ff9                	and	a5,a5,a4
    80002de2:	06f48023          	sb	a5,96(s1)
  log_write(bp);
    80002de6:	00001097          	auipc	ra,0x1
    80002dea:	0dc080e7          	jalr	220(ra) # 80003ec2 <log_write>
  brelse(bp);
    80002dee:	854a                	mv	a0,s2
    80002df0:	00000097          	auipc	ra,0x0
    80002df4:	e92080e7          	jalr	-366(ra) # 80002c82 <brelse>
}
    80002df8:	60e2                	ld	ra,24(sp)
    80002dfa:	6442                	ld	s0,16(sp)
    80002dfc:	64a2                	ld	s1,8(sp)
    80002dfe:	6902                	ld	s2,0(sp)
    80002e00:	6105                	addi	sp,sp,32
    80002e02:	8082                	ret
    panic("freeing free block");
    80002e04:	00003517          	auipc	a0,0x3
    80002e08:	6dc50513          	addi	a0,a0,1756 # 800064e0 <userret+0x450>
    80002e0c:	ffffd097          	auipc	ra,0xffffd
    80002e10:	742080e7          	jalr	1858(ra) # 8000054e <panic>

0000000080002e14 <balloc>:
{
    80002e14:	711d                	addi	sp,sp,-96
    80002e16:	ec86                	sd	ra,88(sp)
    80002e18:	e8a2                	sd	s0,80(sp)
    80002e1a:	e4a6                	sd	s1,72(sp)
    80002e1c:	e0ca                	sd	s2,64(sp)
    80002e1e:	fc4e                	sd	s3,56(sp)
    80002e20:	f852                	sd	s4,48(sp)
    80002e22:	f456                	sd	s5,40(sp)
    80002e24:	f05a                	sd	s6,32(sp)
    80002e26:	ec5e                	sd	s7,24(sp)
    80002e28:	e862                	sd	s8,16(sp)
    80002e2a:	e466                	sd	s9,8(sp)
    80002e2c:	1080                	addi	s0,sp,96
  for(b = 0; b < sb.size; b += BPB){
    80002e2e:	0001c797          	auipc	a5,0x1c
    80002e32:	ea67a783          	lw	a5,-346(a5) # 8001ecd4 <sb+0x4>
    80002e36:	cbd1                	beqz	a5,80002eca <balloc+0xb6>
    80002e38:	8baa                	mv	s7,a0
    80002e3a:	4a81                	li	s5,0
    bp = bread(dev, BBLOCK(b, sb));
    80002e3c:	0001cb17          	auipc	s6,0x1c
    80002e40:	e94b0b13          	addi	s6,s6,-364 # 8001ecd0 <sb>
    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
    80002e44:	4c01                	li	s8,0
      m = 1 << (bi % 8);
    80002e46:	4985                	li	s3,1
    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
    80002e48:	6a09                	lui	s4,0x2
  for(b = 0; b < sb.size; b += BPB){
    80002e4a:	6c89                	lui	s9,0x2
    80002e4c:	a831                	j	80002e68 <balloc+0x54>
    brelse(bp);
    80002e4e:	854a                	mv	a0,s2
    80002e50:	00000097          	auipc	ra,0x0
    80002e54:	e32080e7          	jalr	-462(ra) # 80002c82 <brelse>
  for(b = 0; b < sb.size; b += BPB){
    80002e58:	015c87bb          	addw	a5,s9,s5
    80002e5c:	00078a9b          	sext.w	s5,a5
    80002e60:	004b2703          	lw	a4,4(s6)
    80002e64:	06eaf363          	bgeu	s5,a4,80002eca <balloc+0xb6>
    bp = bread(dev, BBLOCK(b, sb));
    80002e68:	41fad79b          	sraiw	a5,s5,0x1f
    80002e6c:	0137d79b          	srliw	a5,a5,0x13
    80002e70:	015787bb          	addw	a5,a5,s5
    80002e74:	40d7d79b          	sraiw	a5,a5,0xd
    80002e78:	01cb2583          	lw	a1,28(s6)
    80002e7c:	9dbd                	addw	a1,a1,a5
    80002e7e:	855e                	mv	a0,s7
    80002e80:	00000097          	auipc	ra,0x0
    80002e84:	cd2080e7          	jalr	-814(ra) # 80002b52 <bread>
    80002e88:	892a                	mv	s2,a0
    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
    80002e8a:	004b2503          	lw	a0,4(s6)
    80002e8e:	000a849b          	sext.w	s1,s5
    80002e92:	8662                	mv	a2,s8
    80002e94:	faa4fde3          	bgeu	s1,a0,80002e4e <balloc+0x3a>
      m = 1 << (bi % 8);
    80002e98:	41f6579b          	sraiw	a5,a2,0x1f
    80002e9c:	01d7d69b          	srliw	a3,a5,0x1d
    80002ea0:	00c6873b          	addw	a4,a3,a2
    80002ea4:	00777793          	andi	a5,a4,7
    80002ea8:	9f95                	subw	a5,a5,a3
    80002eaa:	00f997bb          	sllw	a5,s3,a5
      if((bp->data[bi/8] & m) == 0){  /* Is block free? */
    80002eae:	4037571b          	sraiw	a4,a4,0x3
    80002eb2:	00e906b3          	add	a3,s2,a4
    80002eb6:	0606c683          	lbu	a3,96(a3)
    80002eba:	00d7f5b3          	and	a1,a5,a3
    80002ebe:	cd91                	beqz	a1,80002eda <balloc+0xc6>
    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
    80002ec0:	2605                	addiw	a2,a2,1
    80002ec2:	2485                	addiw	s1,s1,1
    80002ec4:	fd4618e3          	bne	a2,s4,80002e94 <balloc+0x80>
    80002ec8:	b759                	j	80002e4e <balloc+0x3a>
  panic("balloc: out of blocks");
    80002eca:	00003517          	auipc	a0,0x3
    80002ece:	62e50513          	addi	a0,a0,1582 # 800064f8 <userret+0x468>
    80002ed2:	ffffd097          	auipc	ra,0xffffd
    80002ed6:	67c080e7          	jalr	1660(ra) # 8000054e <panic>
        bp->data[bi/8] |= m;  /* Mark block in use. */
    80002eda:	974a                	add	a4,a4,s2
    80002edc:	8fd5                	or	a5,a5,a3
    80002ede:	06f70023          	sb	a5,96(a4)
        log_write(bp);
    80002ee2:	854a                	mv	a0,s2
    80002ee4:	00001097          	auipc	ra,0x1
    80002ee8:	fde080e7          	jalr	-34(ra) # 80003ec2 <log_write>
        brelse(bp);
    80002eec:	854a                	mv	a0,s2
    80002eee:	00000097          	auipc	ra,0x0
    80002ef2:	d94080e7          	jalr	-620(ra) # 80002c82 <brelse>
  bp = bread(dev, bno);
    80002ef6:	85a6                	mv	a1,s1
    80002ef8:	855e                	mv	a0,s7
    80002efa:	00000097          	auipc	ra,0x0
    80002efe:	c58080e7          	jalr	-936(ra) # 80002b52 <bread>
    80002f02:	892a                	mv	s2,a0
  memset(bp->data, 0, BSIZE);
    80002f04:	40000613          	li	a2,1024
    80002f08:	4581                	li	a1,0
    80002f0a:	06050513          	addi	a0,a0,96
    80002f0e:	ffffe097          	auipc	ra,0xffffe
    80002f12:	c5c080e7          	jalr	-932(ra) # 80000b6a <memset>
  log_write(bp);
    80002f16:	854a                	mv	a0,s2
    80002f18:	00001097          	auipc	ra,0x1
    80002f1c:	faa080e7          	jalr	-86(ra) # 80003ec2 <log_write>
  brelse(bp);
    80002f20:	854a                	mv	a0,s2
    80002f22:	00000097          	auipc	ra,0x0
    80002f26:	d60080e7          	jalr	-672(ra) # 80002c82 <brelse>
}
    80002f2a:	8526                	mv	a0,s1
    80002f2c:	60e6                	ld	ra,88(sp)
    80002f2e:	6446                	ld	s0,80(sp)
    80002f30:	64a6                	ld	s1,72(sp)
    80002f32:	6906                	ld	s2,64(sp)
    80002f34:	79e2                	ld	s3,56(sp)
    80002f36:	7a42                	ld	s4,48(sp)
    80002f38:	7aa2                	ld	s5,40(sp)
    80002f3a:	7b02                	ld	s6,32(sp)
    80002f3c:	6be2                	ld	s7,24(sp)
    80002f3e:	6c42                	ld	s8,16(sp)
    80002f40:	6ca2                	ld	s9,8(sp)
    80002f42:	6125                	addi	sp,sp,96
    80002f44:	8082                	ret

0000000080002f46 <bmap>:

/* Return the disk block address of the nth block in inode ip. */
/* If there is no such block, bmap allocates one. */
static uint
bmap(struct inode *ip, uint bn)
{
    80002f46:	7179                	addi	sp,sp,-48
    80002f48:	f406                	sd	ra,40(sp)
    80002f4a:	f022                	sd	s0,32(sp)
    80002f4c:	ec26                	sd	s1,24(sp)
    80002f4e:	e84a                	sd	s2,16(sp)
    80002f50:	e44e                	sd	s3,8(sp)
    80002f52:	e052                	sd	s4,0(sp)
    80002f54:	1800                	addi	s0,sp,48
    80002f56:	892a                	mv	s2,a0
  uint addr, *a;
  struct buf *bp;

  if(bn < NDIRECT){
    80002f58:	47ad                	li	a5,11
    80002f5a:	04b7fe63          	bgeu	a5,a1,80002fb6 <bmap+0x70>
    if((addr = ip->addrs[bn]) == 0)
      ip->addrs[bn] = addr = balloc(ip->dev);
    return addr;
  }
  bn -= NDIRECT;
    80002f5e:	ff45849b          	addiw	s1,a1,-12
    80002f62:	0004871b          	sext.w	a4,s1

  if(bn < NINDIRECT){
    80002f66:	0ff00793          	li	a5,255
    80002f6a:	0ae7e363          	bltu	a5,a4,80003010 <bmap+0xca>
    /* Load indirect block, allocating if necessary. */
    if((addr = ip->addrs[NDIRECT]) == 0)
    80002f6e:	08052583          	lw	a1,128(a0)
    80002f72:	c5ad                	beqz	a1,80002fdc <bmap+0x96>
      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
    bp = bread(ip->dev, addr);
    80002f74:	00092503          	lw	a0,0(s2)
    80002f78:	00000097          	auipc	ra,0x0
    80002f7c:	bda080e7          	jalr	-1062(ra) # 80002b52 <bread>
    80002f80:	8a2a                	mv	s4,a0
    a = (uint*)bp->data;
    80002f82:	06050793          	addi	a5,a0,96
    if((addr = a[bn]) == 0){
    80002f86:	02049593          	slli	a1,s1,0x20
    80002f8a:	9181                	srli	a1,a1,0x20
    80002f8c:	058a                	slli	a1,a1,0x2
    80002f8e:	00b784b3          	add	s1,a5,a1
    80002f92:	0004a983          	lw	s3,0(s1)
    80002f96:	04098d63          	beqz	s3,80002ff0 <bmap+0xaa>
      a[bn] = addr = balloc(ip->dev);
      log_write(bp);
    }
    brelse(bp);
    80002f9a:	8552                	mv	a0,s4
    80002f9c:	00000097          	auipc	ra,0x0
    80002fa0:	ce6080e7          	jalr	-794(ra) # 80002c82 <brelse>
    return addr;
  }

  panic("bmap: out of range");
}
    80002fa4:	854e                	mv	a0,s3
    80002fa6:	70a2                	ld	ra,40(sp)
    80002fa8:	7402                	ld	s0,32(sp)
    80002faa:	64e2                	ld	s1,24(sp)
    80002fac:	6942                	ld	s2,16(sp)
    80002fae:	69a2                	ld	s3,8(sp)
    80002fb0:	6a02                	ld	s4,0(sp)
    80002fb2:	6145                	addi	sp,sp,48
    80002fb4:	8082                	ret
    if((addr = ip->addrs[bn]) == 0)
    80002fb6:	02059493          	slli	s1,a1,0x20
    80002fba:	9081                	srli	s1,s1,0x20
    80002fbc:	048a                	slli	s1,s1,0x2
    80002fbe:	94aa                	add	s1,s1,a0
    80002fc0:	0504a983          	lw	s3,80(s1)
    80002fc4:	fe0990e3          	bnez	s3,80002fa4 <bmap+0x5e>
      ip->addrs[bn] = addr = balloc(ip->dev);
    80002fc8:	4108                	lw	a0,0(a0)
    80002fca:	00000097          	auipc	ra,0x0
    80002fce:	e4a080e7          	jalr	-438(ra) # 80002e14 <balloc>
    80002fd2:	0005099b          	sext.w	s3,a0
    80002fd6:	0534a823          	sw	s3,80(s1)
    80002fda:	b7e9                	j	80002fa4 <bmap+0x5e>
      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
    80002fdc:	4108                	lw	a0,0(a0)
    80002fde:	00000097          	auipc	ra,0x0
    80002fe2:	e36080e7          	jalr	-458(ra) # 80002e14 <balloc>
    80002fe6:	0005059b          	sext.w	a1,a0
    80002fea:	08b92023          	sw	a1,128(s2)
    80002fee:	b759                	j	80002f74 <bmap+0x2e>
      a[bn] = addr = balloc(ip->dev);
    80002ff0:	00092503          	lw	a0,0(s2)
    80002ff4:	00000097          	auipc	ra,0x0
    80002ff8:	e20080e7          	jalr	-480(ra) # 80002e14 <balloc>
    80002ffc:	0005099b          	sext.w	s3,a0
    80003000:	0134a023          	sw	s3,0(s1)
      log_write(bp);
    80003004:	8552                	mv	a0,s4
    80003006:	00001097          	auipc	ra,0x1
    8000300a:	ebc080e7          	jalr	-324(ra) # 80003ec2 <log_write>
    8000300e:	b771                	j	80002f9a <bmap+0x54>
  panic("bmap: out of range");
    80003010:	00003517          	auipc	a0,0x3
    80003014:	50050513          	addi	a0,a0,1280 # 80006510 <userret+0x480>
    80003018:	ffffd097          	auipc	ra,0xffffd
    8000301c:	536080e7          	jalr	1334(ra) # 8000054e <panic>

0000000080003020 <iget>:
{
    80003020:	7179                	addi	sp,sp,-48
    80003022:	f406                	sd	ra,40(sp)
    80003024:	f022                	sd	s0,32(sp)
    80003026:	ec26                	sd	s1,24(sp)
    80003028:	e84a                	sd	s2,16(sp)
    8000302a:	e44e                	sd	s3,8(sp)
    8000302c:	e052                	sd	s4,0(sp)
    8000302e:	1800                	addi	s0,sp,48
    80003030:	89aa                	mv	s3,a0
    80003032:	8a2e                	mv	s4,a1
  acquire(&icache.lock);
    80003034:	0001c517          	auipc	a0,0x1c
    80003038:	cbc50513          	addi	a0,a0,-836 # 8001ecf0 <icache>
    8000303c:	ffffe097          	auipc	ra,0xffffe
    80003040:	a92080e7          	jalr	-1390(ra) # 80000ace <acquire>
  empty = 0;
    80003044:	4901                	li	s2,0
  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
    80003046:	0001c497          	auipc	s1,0x1c
    8000304a:	cc248493          	addi	s1,s1,-830 # 8001ed08 <icache+0x18>
    8000304e:	0001d697          	auipc	a3,0x1d
    80003052:	74a68693          	addi	a3,a3,1866 # 80020798 <log>
    80003056:	a039                	j	80003064 <iget+0x44>
    if(empty == 0 && ip->ref == 0)    /* Remember empty slot. */
    80003058:	02090b63          	beqz	s2,8000308e <iget+0x6e>
  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
    8000305c:	08848493          	addi	s1,s1,136
    80003060:	02d48a63          	beq	s1,a3,80003094 <iget+0x74>
    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
    80003064:	449c                	lw	a5,8(s1)
    80003066:	fef059e3          	blez	a5,80003058 <iget+0x38>
    8000306a:	4098                	lw	a4,0(s1)
    8000306c:	ff3716e3          	bne	a4,s3,80003058 <iget+0x38>
    80003070:	40d8                	lw	a4,4(s1)
    80003072:	ff4713e3          	bne	a4,s4,80003058 <iget+0x38>
      ip->ref++;
    80003076:	2785                	addiw	a5,a5,1
    80003078:	c49c                	sw	a5,8(s1)
      release(&icache.lock);
    8000307a:	0001c517          	auipc	a0,0x1c
    8000307e:	c7650513          	addi	a0,a0,-906 # 8001ecf0 <icache>
    80003082:	ffffe097          	auipc	ra,0xffffe
    80003086:	aa0080e7          	jalr	-1376(ra) # 80000b22 <release>
      return ip;
    8000308a:	8926                	mv	s2,s1
    8000308c:	a03d                	j	800030ba <iget+0x9a>
    if(empty == 0 && ip->ref == 0)    /* Remember empty slot. */
    8000308e:	f7f9                	bnez	a5,8000305c <iget+0x3c>
    80003090:	8926                	mv	s2,s1
    80003092:	b7e9                	j	8000305c <iget+0x3c>
  if(empty == 0)
    80003094:	02090c63          	beqz	s2,800030cc <iget+0xac>
  ip->dev = dev;
    80003098:	01392023          	sw	s3,0(s2)
  ip->inum = inum;
    8000309c:	01492223          	sw	s4,4(s2)
  ip->ref = 1;
    800030a0:	4785                	li	a5,1
    800030a2:	00f92423          	sw	a5,8(s2)
  ip->valid = 0;
    800030a6:	04092023          	sw	zero,64(s2)
  release(&icache.lock);
    800030aa:	0001c517          	auipc	a0,0x1c
    800030ae:	c4650513          	addi	a0,a0,-954 # 8001ecf0 <icache>
    800030b2:	ffffe097          	auipc	ra,0xffffe
    800030b6:	a70080e7          	jalr	-1424(ra) # 80000b22 <release>
}
    800030ba:	854a                	mv	a0,s2
    800030bc:	70a2                	ld	ra,40(sp)
    800030be:	7402                	ld	s0,32(sp)
    800030c0:	64e2                	ld	s1,24(sp)
    800030c2:	6942                	ld	s2,16(sp)
    800030c4:	69a2                	ld	s3,8(sp)
    800030c6:	6a02                	ld	s4,0(sp)
    800030c8:	6145                	addi	sp,sp,48
    800030ca:	8082                	ret
    panic("iget: no inodes");
    800030cc:	00003517          	auipc	a0,0x3
    800030d0:	45c50513          	addi	a0,a0,1116 # 80006528 <userret+0x498>
    800030d4:	ffffd097          	auipc	ra,0xffffd
    800030d8:	47a080e7          	jalr	1146(ra) # 8000054e <panic>

00000000800030dc <fsinit>:
fsinit(int dev) {
    800030dc:	7179                	addi	sp,sp,-48
    800030de:	f406                	sd	ra,40(sp)
    800030e0:	f022                	sd	s0,32(sp)
    800030e2:	ec26                	sd	s1,24(sp)
    800030e4:	e84a                	sd	s2,16(sp)
    800030e6:	e44e                	sd	s3,8(sp)
    800030e8:	1800                	addi	s0,sp,48
    800030ea:	892a                	mv	s2,a0
  bp = bread(dev, 1);
    800030ec:	4585                	li	a1,1
    800030ee:	00000097          	auipc	ra,0x0
    800030f2:	a64080e7          	jalr	-1436(ra) # 80002b52 <bread>
    800030f6:	84aa                	mv	s1,a0
  memmove(sb, bp->data, sizeof(*sb));
    800030f8:	0001c997          	auipc	s3,0x1c
    800030fc:	bd898993          	addi	s3,s3,-1064 # 8001ecd0 <sb>
    80003100:	02000613          	li	a2,32
    80003104:	06050593          	addi	a1,a0,96
    80003108:	854e                	mv	a0,s3
    8000310a:	ffffe097          	auipc	ra,0xffffe
    8000310e:	ac0080e7          	jalr	-1344(ra) # 80000bca <memmove>
  brelse(bp);
    80003112:	8526                	mv	a0,s1
    80003114:	00000097          	auipc	ra,0x0
    80003118:	b6e080e7          	jalr	-1170(ra) # 80002c82 <brelse>
  if(sb.magic != FSMAGIC)
    8000311c:	0009a703          	lw	a4,0(s3)
    80003120:	102037b7          	lui	a5,0x10203
    80003124:	04078793          	addi	a5,a5,64 # 10203040 <_entry-0x6fdfcfc0>
    80003128:	02f71263          	bne	a4,a5,8000314c <fsinit+0x70>
  initlog(dev, &sb);
    8000312c:	0001c597          	auipc	a1,0x1c
    80003130:	ba458593          	addi	a1,a1,-1116 # 8001ecd0 <sb>
    80003134:	854a                	mv	a0,s2
    80003136:	00001097          	auipc	ra,0x1
    8000313a:	b14080e7          	jalr	-1260(ra) # 80003c4a <initlog>
}
    8000313e:	70a2                	ld	ra,40(sp)
    80003140:	7402                	ld	s0,32(sp)
    80003142:	64e2                	ld	s1,24(sp)
    80003144:	6942                	ld	s2,16(sp)
    80003146:	69a2                	ld	s3,8(sp)
    80003148:	6145                	addi	sp,sp,48
    8000314a:	8082                	ret
    panic("invalid file system");
    8000314c:	00003517          	auipc	a0,0x3
    80003150:	3ec50513          	addi	a0,a0,1004 # 80006538 <userret+0x4a8>
    80003154:	ffffd097          	auipc	ra,0xffffd
    80003158:	3fa080e7          	jalr	1018(ra) # 8000054e <panic>

000000008000315c <iinit>:
{
    8000315c:	7179                	addi	sp,sp,-48
    8000315e:	f406                	sd	ra,40(sp)
    80003160:	f022                	sd	s0,32(sp)
    80003162:	ec26                	sd	s1,24(sp)
    80003164:	e84a                	sd	s2,16(sp)
    80003166:	e44e                	sd	s3,8(sp)
    80003168:	1800                	addi	s0,sp,48
  initlock(&icache.lock, "icache");
    8000316a:	00003597          	auipc	a1,0x3
    8000316e:	3e658593          	addi	a1,a1,998 # 80006550 <userret+0x4c0>
    80003172:	0001c517          	auipc	a0,0x1c
    80003176:	b7e50513          	addi	a0,a0,-1154 # 8001ecf0 <icache>
    8000317a:	ffffe097          	auipc	ra,0xffffe
    8000317e:	842080e7          	jalr	-1982(ra) # 800009bc <initlock>
  for(i = 0; i < NINODE; i++) {
    80003182:	0001c497          	auipc	s1,0x1c
    80003186:	b9648493          	addi	s1,s1,-1130 # 8001ed18 <icache+0x28>
    8000318a:	0001d997          	auipc	s3,0x1d
    8000318e:	61e98993          	addi	s3,s3,1566 # 800207a8 <log+0x10>
    initsleeplock(&icache.inode[i].lock, "inode");
    80003192:	00003917          	auipc	s2,0x3
    80003196:	3c690913          	addi	s2,s2,966 # 80006558 <userret+0x4c8>
    8000319a:	85ca                	mv	a1,s2
    8000319c:	8526                	mv	a0,s1
    8000319e:	00001097          	auipc	ra,0x1
    800031a2:	e12080e7          	jalr	-494(ra) # 80003fb0 <initsleeplock>
  for(i = 0; i < NINODE; i++) {
    800031a6:	08848493          	addi	s1,s1,136
    800031aa:	ff3498e3          	bne	s1,s3,8000319a <iinit+0x3e>
}
    800031ae:	70a2                	ld	ra,40(sp)
    800031b0:	7402                	ld	s0,32(sp)
    800031b2:	64e2                	ld	s1,24(sp)
    800031b4:	6942                	ld	s2,16(sp)
    800031b6:	69a2                	ld	s3,8(sp)
    800031b8:	6145                	addi	sp,sp,48
    800031ba:	8082                	ret

00000000800031bc <ialloc>:
{
    800031bc:	715d                	addi	sp,sp,-80
    800031be:	e486                	sd	ra,72(sp)
    800031c0:	e0a2                	sd	s0,64(sp)
    800031c2:	fc26                	sd	s1,56(sp)
    800031c4:	f84a                	sd	s2,48(sp)
    800031c6:	f44e                	sd	s3,40(sp)
    800031c8:	f052                	sd	s4,32(sp)
    800031ca:	ec56                	sd	s5,24(sp)
    800031cc:	e85a                	sd	s6,16(sp)
    800031ce:	e45e                	sd	s7,8(sp)
    800031d0:	0880                	addi	s0,sp,80
  for(inum = 1; inum < sb.ninodes; inum++){
    800031d2:	0001c717          	auipc	a4,0x1c
    800031d6:	b0a72703          	lw	a4,-1270(a4) # 8001ecdc <sb+0xc>
    800031da:	4785                	li	a5,1
    800031dc:	04e7fa63          	bgeu	a5,a4,80003230 <ialloc+0x74>
    800031e0:	8aaa                	mv	s5,a0
    800031e2:	8bae                	mv	s7,a1
    800031e4:	4485                	li	s1,1
    bp = bread(dev, IBLOCK(inum, sb));
    800031e6:	0001ca17          	auipc	s4,0x1c
    800031ea:	aeaa0a13          	addi	s4,s4,-1302 # 8001ecd0 <sb>
    800031ee:	00048b1b          	sext.w	s6,s1
    800031f2:	0044d593          	srli	a1,s1,0x4
    800031f6:	018a2783          	lw	a5,24(s4)
    800031fa:	9dbd                	addw	a1,a1,a5
    800031fc:	8556                	mv	a0,s5
    800031fe:	00000097          	auipc	ra,0x0
    80003202:	954080e7          	jalr	-1708(ra) # 80002b52 <bread>
    80003206:	892a                	mv	s2,a0
    dip = (struct dinode*)bp->data + inum%IPB;
    80003208:	06050993          	addi	s3,a0,96
    8000320c:	00f4f793          	andi	a5,s1,15
    80003210:	079a                	slli	a5,a5,0x6
    80003212:	99be                	add	s3,s3,a5
    if(dip->type == 0){  /* a free inode */
    80003214:	00099783          	lh	a5,0(s3)
    80003218:	c785                	beqz	a5,80003240 <ialloc+0x84>
    brelse(bp);
    8000321a:	00000097          	auipc	ra,0x0
    8000321e:	a68080e7          	jalr	-1432(ra) # 80002c82 <brelse>
  for(inum = 1; inum < sb.ninodes; inum++){
    80003222:	0485                	addi	s1,s1,1
    80003224:	00ca2703          	lw	a4,12(s4)
    80003228:	0004879b          	sext.w	a5,s1
    8000322c:	fce7e1e3          	bltu	a5,a4,800031ee <ialloc+0x32>
  panic("ialloc: no inodes");
    80003230:	00003517          	auipc	a0,0x3
    80003234:	33050513          	addi	a0,a0,816 # 80006560 <userret+0x4d0>
    80003238:	ffffd097          	auipc	ra,0xffffd
    8000323c:	316080e7          	jalr	790(ra) # 8000054e <panic>
      memset(dip, 0, sizeof(*dip));
    80003240:	04000613          	li	a2,64
    80003244:	4581                	li	a1,0
    80003246:	854e                	mv	a0,s3
    80003248:	ffffe097          	auipc	ra,0xffffe
    8000324c:	922080e7          	jalr	-1758(ra) # 80000b6a <memset>
      dip->type = type;
    80003250:	01799023          	sh	s7,0(s3)
      log_write(bp);   /* mark it allocated on the disk */
    80003254:	854a                	mv	a0,s2
    80003256:	00001097          	auipc	ra,0x1
    8000325a:	c6c080e7          	jalr	-916(ra) # 80003ec2 <log_write>
      brelse(bp);
    8000325e:	854a                	mv	a0,s2
    80003260:	00000097          	auipc	ra,0x0
    80003264:	a22080e7          	jalr	-1502(ra) # 80002c82 <brelse>
      return iget(dev, inum);
    80003268:	85da                	mv	a1,s6
    8000326a:	8556                	mv	a0,s5
    8000326c:	00000097          	auipc	ra,0x0
    80003270:	db4080e7          	jalr	-588(ra) # 80003020 <iget>
}
    80003274:	60a6                	ld	ra,72(sp)
    80003276:	6406                	ld	s0,64(sp)
    80003278:	74e2                	ld	s1,56(sp)
    8000327a:	7942                	ld	s2,48(sp)
    8000327c:	79a2                	ld	s3,40(sp)
    8000327e:	7a02                	ld	s4,32(sp)
    80003280:	6ae2                	ld	s5,24(sp)
    80003282:	6b42                	ld	s6,16(sp)
    80003284:	6ba2                	ld	s7,8(sp)
    80003286:	6161                	addi	sp,sp,80
    80003288:	8082                	ret

000000008000328a <iupdate>:
{
    8000328a:	1101                	addi	sp,sp,-32
    8000328c:	ec06                	sd	ra,24(sp)
    8000328e:	e822                	sd	s0,16(sp)
    80003290:	e426                	sd	s1,8(sp)
    80003292:	e04a                	sd	s2,0(sp)
    80003294:	1000                	addi	s0,sp,32
    80003296:	84aa                	mv	s1,a0
  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
    80003298:	415c                	lw	a5,4(a0)
    8000329a:	0047d79b          	srliw	a5,a5,0x4
    8000329e:	0001c597          	auipc	a1,0x1c
    800032a2:	a4a5a583          	lw	a1,-1462(a1) # 8001ece8 <sb+0x18>
    800032a6:	9dbd                	addw	a1,a1,a5
    800032a8:	4108                	lw	a0,0(a0)
    800032aa:	00000097          	auipc	ra,0x0
    800032ae:	8a8080e7          	jalr	-1880(ra) # 80002b52 <bread>
    800032b2:	892a                	mv	s2,a0
  dip = (struct dinode*)bp->data + ip->inum%IPB;
    800032b4:	06050793          	addi	a5,a0,96
    800032b8:	40c8                	lw	a0,4(s1)
    800032ba:	893d                	andi	a0,a0,15
    800032bc:	051a                	slli	a0,a0,0x6
    800032be:	953e                	add	a0,a0,a5
  dip->type = ip->type;
    800032c0:	04449703          	lh	a4,68(s1)
    800032c4:	00e51023          	sh	a4,0(a0)
  dip->major = ip->major;
    800032c8:	04649703          	lh	a4,70(s1)
    800032cc:	00e51123          	sh	a4,2(a0)
  dip->minor = ip->minor;
    800032d0:	04849703          	lh	a4,72(s1)
    800032d4:	00e51223          	sh	a4,4(a0)
  dip->nlink = ip->nlink;
    800032d8:	04a49703          	lh	a4,74(s1)
    800032dc:	00e51323          	sh	a4,6(a0)
  dip->size = ip->size;
    800032e0:	44f8                	lw	a4,76(s1)
    800032e2:	c518                	sw	a4,8(a0)
  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
    800032e4:	03400613          	li	a2,52
    800032e8:	05048593          	addi	a1,s1,80
    800032ec:	0531                	addi	a0,a0,12
    800032ee:	ffffe097          	auipc	ra,0xffffe
    800032f2:	8dc080e7          	jalr	-1828(ra) # 80000bca <memmove>
  log_write(bp);
    800032f6:	854a                	mv	a0,s2
    800032f8:	00001097          	auipc	ra,0x1
    800032fc:	bca080e7          	jalr	-1078(ra) # 80003ec2 <log_write>
  brelse(bp);
    80003300:	854a                	mv	a0,s2
    80003302:	00000097          	auipc	ra,0x0
    80003306:	980080e7          	jalr	-1664(ra) # 80002c82 <brelse>
}
    8000330a:	60e2                	ld	ra,24(sp)
    8000330c:	6442                	ld	s0,16(sp)
    8000330e:	64a2                	ld	s1,8(sp)
    80003310:	6902                	ld	s2,0(sp)
    80003312:	6105                	addi	sp,sp,32
    80003314:	8082                	ret

0000000080003316 <idup>:
{
    80003316:	1101                	addi	sp,sp,-32
    80003318:	ec06                	sd	ra,24(sp)
    8000331a:	e822                	sd	s0,16(sp)
    8000331c:	e426                	sd	s1,8(sp)
    8000331e:	1000                	addi	s0,sp,32
    80003320:	84aa                	mv	s1,a0
  acquire(&icache.lock);
    80003322:	0001c517          	auipc	a0,0x1c
    80003326:	9ce50513          	addi	a0,a0,-1586 # 8001ecf0 <icache>
    8000332a:	ffffd097          	auipc	ra,0xffffd
    8000332e:	7a4080e7          	jalr	1956(ra) # 80000ace <acquire>
  ip->ref++;
    80003332:	449c                	lw	a5,8(s1)
    80003334:	2785                	addiw	a5,a5,1
    80003336:	c49c                	sw	a5,8(s1)
  release(&icache.lock);
    80003338:	0001c517          	auipc	a0,0x1c
    8000333c:	9b850513          	addi	a0,a0,-1608 # 8001ecf0 <icache>
    80003340:	ffffd097          	auipc	ra,0xffffd
    80003344:	7e2080e7          	jalr	2018(ra) # 80000b22 <release>
}
    80003348:	8526                	mv	a0,s1
    8000334a:	60e2                	ld	ra,24(sp)
    8000334c:	6442                	ld	s0,16(sp)
    8000334e:	64a2                	ld	s1,8(sp)
    80003350:	6105                	addi	sp,sp,32
    80003352:	8082                	ret

0000000080003354 <ilock>:
{
    80003354:	1101                	addi	sp,sp,-32
    80003356:	ec06                	sd	ra,24(sp)
    80003358:	e822                	sd	s0,16(sp)
    8000335a:	e426                	sd	s1,8(sp)
    8000335c:	e04a                	sd	s2,0(sp)
    8000335e:	1000                	addi	s0,sp,32
  if(ip == 0 || ip->ref < 1)
    80003360:	c115                	beqz	a0,80003384 <ilock+0x30>
    80003362:	84aa                	mv	s1,a0
    80003364:	451c                	lw	a5,8(a0)
    80003366:	00f05f63          	blez	a5,80003384 <ilock+0x30>
  acquiresleep(&ip->lock);
    8000336a:	0541                	addi	a0,a0,16
    8000336c:	00001097          	auipc	ra,0x1
    80003370:	c7e080e7          	jalr	-898(ra) # 80003fea <acquiresleep>
  if(ip->valid == 0){
    80003374:	40bc                	lw	a5,64(s1)
    80003376:	cf99                	beqz	a5,80003394 <ilock+0x40>
}
    80003378:	60e2                	ld	ra,24(sp)
    8000337a:	6442                	ld	s0,16(sp)
    8000337c:	64a2                	ld	s1,8(sp)
    8000337e:	6902                	ld	s2,0(sp)
    80003380:	6105                	addi	sp,sp,32
    80003382:	8082                	ret
    panic("ilock");
    80003384:	00003517          	auipc	a0,0x3
    80003388:	1f450513          	addi	a0,a0,500 # 80006578 <userret+0x4e8>
    8000338c:	ffffd097          	auipc	ra,0xffffd
    80003390:	1c2080e7          	jalr	450(ra) # 8000054e <panic>
    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
    80003394:	40dc                	lw	a5,4(s1)
    80003396:	0047d79b          	srliw	a5,a5,0x4
    8000339a:	0001c597          	auipc	a1,0x1c
    8000339e:	94e5a583          	lw	a1,-1714(a1) # 8001ece8 <sb+0x18>
    800033a2:	9dbd                	addw	a1,a1,a5
    800033a4:	4088                	lw	a0,0(s1)
    800033a6:	fffff097          	auipc	ra,0xfffff
    800033aa:	7ac080e7          	jalr	1964(ra) # 80002b52 <bread>
    800033ae:	892a                	mv	s2,a0
    dip = (struct dinode*)bp->data + ip->inum%IPB;
    800033b0:	06050593          	addi	a1,a0,96
    800033b4:	40dc                	lw	a5,4(s1)
    800033b6:	8bbd                	andi	a5,a5,15
    800033b8:	079a                	slli	a5,a5,0x6
    800033ba:	95be                	add	a1,a1,a5
    ip->type = dip->type;
    800033bc:	00059783          	lh	a5,0(a1)
    800033c0:	04f49223          	sh	a5,68(s1)
    ip->major = dip->major;
    800033c4:	00259783          	lh	a5,2(a1)
    800033c8:	04f49323          	sh	a5,70(s1)
    ip->minor = dip->minor;
    800033cc:	00459783          	lh	a5,4(a1)
    800033d0:	04f49423          	sh	a5,72(s1)
    ip->nlink = dip->nlink;
    800033d4:	00659783          	lh	a5,6(a1)
    800033d8:	04f49523          	sh	a5,74(s1)
    ip->size = dip->size;
    800033dc:	459c                	lw	a5,8(a1)
    800033de:	c4fc                	sw	a5,76(s1)
    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
    800033e0:	03400613          	li	a2,52
    800033e4:	05b1                	addi	a1,a1,12
    800033e6:	05048513          	addi	a0,s1,80
    800033ea:	ffffd097          	auipc	ra,0xffffd
    800033ee:	7e0080e7          	jalr	2016(ra) # 80000bca <memmove>
    brelse(bp);
    800033f2:	854a                	mv	a0,s2
    800033f4:	00000097          	auipc	ra,0x0
    800033f8:	88e080e7          	jalr	-1906(ra) # 80002c82 <brelse>
    ip->valid = 1;
    800033fc:	4785                	li	a5,1
    800033fe:	c0bc                	sw	a5,64(s1)
    if(ip->type == 0)
    80003400:	04449783          	lh	a5,68(s1)
    80003404:	fbb5                	bnez	a5,80003378 <ilock+0x24>
      panic("ilock: no type");
    80003406:	00003517          	auipc	a0,0x3
    8000340a:	17a50513          	addi	a0,a0,378 # 80006580 <userret+0x4f0>
    8000340e:	ffffd097          	auipc	ra,0xffffd
    80003412:	140080e7          	jalr	320(ra) # 8000054e <panic>

0000000080003416 <iunlock>:
{
    80003416:	1101                	addi	sp,sp,-32
    80003418:	ec06                	sd	ra,24(sp)
    8000341a:	e822                	sd	s0,16(sp)
    8000341c:	e426                	sd	s1,8(sp)
    8000341e:	e04a                	sd	s2,0(sp)
    80003420:	1000                	addi	s0,sp,32
  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
    80003422:	c905                	beqz	a0,80003452 <iunlock+0x3c>
    80003424:	84aa                	mv	s1,a0
    80003426:	01050913          	addi	s2,a0,16
    8000342a:	854a                	mv	a0,s2
    8000342c:	00001097          	auipc	ra,0x1
    80003430:	c58080e7          	jalr	-936(ra) # 80004084 <holdingsleep>
    80003434:	cd19                	beqz	a0,80003452 <iunlock+0x3c>
    80003436:	449c                	lw	a5,8(s1)
    80003438:	00f05d63          	blez	a5,80003452 <iunlock+0x3c>
  releasesleep(&ip->lock);
    8000343c:	854a                	mv	a0,s2
    8000343e:	00001097          	auipc	ra,0x1
    80003442:	c02080e7          	jalr	-1022(ra) # 80004040 <releasesleep>
}
    80003446:	60e2                	ld	ra,24(sp)
    80003448:	6442                	ld	s0,16(sp)
    8000344a:	64a2                	ld	s1,8(sp)
    8000344c:	6902                	ld	s2,0(sp)
    8000344e:	6105                	addi	sp,sp,32
    80003450:	8082                	ret
    panic("iunlock");
    80003452:	00003517          	auipc	a0,0x3
    80003456:	13e50513          	addi	a0,a0,318 # 80006590 <userret+0x500>
    8000345a:	ffffd097          	auipc	ra,0xffffd
    8000345e:	0f4080e7          	jalr	244(ra) # 8000054e <panic>

0000000080003462 <iput>:
{
    80003462:	7139                	addi	sp,sp,-64
    80003464:	fc06                	sd	ra,56(sp)
    80003466:	f822                	sd	s0,48(sp)
    80003468:	f426                	sd	s1,40(sp)
    8000346a:	f04a                	sd	s2,32(sp)
    8000346c:	ec4e                	sd	s3,24(sp)
    8000346e:	e852                	sd	s4,16(sp)
    80003470:	e456                	sd	s5,8(sp)
    80003472:	0080                	addi	s0,sp,64
    80003474:	84aa                	mv	s1,a0
  acquire(&icache.lock);
    80003476:	0001c517          	auipc	a0,0x1c
    8000347a:	87a50513          	addi	a0,a0,-1926 # 8001ecf0 <icache>
    8000347e:	ffffd097          	auipc	ra,0xffffd
    80003482:	650080e7          	jalr	1616(ra) # 80000ace <acquire>
  if(ip->ref == 1 && ip->valid && ip->nlink == 0){
    80003486:	4498                	lw	a4,8(s1)
    80003488:	4785                	li	a5,1
    8000348a:	02f70663          	beq	a4,a5,800034b6 <iput+0x54>
  ip->ref--;
    8000348e:	449c                	lw	a5,8(s1)
    80003490:	37fd                	addiw	a5,a5,-1
    80003492:	c49c                	sw	a5,8(s1)
  release(&icache.lock);
    80003494:	0001c517          	auipc	a0,0x1c
    80003498:	85c50513          	addi	a0,a0,-1956 # 8001ecf0 <icache>
    8000349c:	ffffd097          	auipc	ra,0xffffd
    800034a0:	686080e7          	jalr	1670(ra) # 80000b22 <release>
}
    800034a4:	70e2                	ld	ra,56(sp)
    800034a6:	7442                	ld	s0,48(sp)
    800034a8:	74a2                	ld	s1,40(sp)
    800034aa:	7902                	ld	s2,32(sp)
    800034ac:	69e2                	ld	s3,24(sp)
    800034ae:	6a42                	ld	s4,16(sp)
    800034b0:	6aa2                	ld	s5,8(sp)
    800034b2:	6121                	addi	sp,sp,64
    800034b4:	8082                	ret
  if(ip->ref == 1 && ip->valid && ip->nlink == 0){
    800034b6:	40bc                	lw	a5,64(s1)
    800034b8:	dbf9                	beqz	a5,8000348e <iput+0x2c>
    800034ba:	04a49783          	lh	a5,74(s1)
    800034be:	fbe1                	bnez	a5,8000348e <iput+0x2c>
    acquiresleep(&ip->lock);
    800034c0:	01048a13          	addi	s4,s1,16
    800034c4:	8552                	mv	a0,s4
    800034c6:	00001097          	auipc	ra,0x1
    800034ca:	b24080e7          	jalr	-1244(ra) # 80003fea <acquiresleep>
    release(&icache.lock);
    800034ce:	0001c517          	auipc	a0,0x1c
    800034d2:	82250513          	addi	a0,a0,-2014 # 8001ecf0 <icache>
    800034d6:	ffffd097          	auipc	ra,0xffffd
    800034da:	64c080e7          	jalr	1612(ra) # 80000b22 <release>
{
  int i, j;
  struct buf *bp;
  uint *a;

  for(i = 0; i < NDIRECT; i++){
    800034de:	05048913          	addi	s2,s1,80
    800034e2:	08048993          	addi	s3,s1,128
    800034e6:	a819                	j	800034fc <iput+0x9a>
    if(ip->addrs[i]){
      bfree(ip->dev, ip->addrs[i]);
    800034e8:	4088                	lw	a0,0(s1)
    800034ea:	00000097          	auipc	ra,0x0
    800034ee:	8ae080e7          	jalr	-1874(ra) # 80002d98 <bfree>
      ip->addrs[i] = 0;
    800034f2:	00092023          	sw	zero,0(s2)
  for(i = 0; i < NDIRECT; i++){
    800034f6:	0911                	addi	s2,s2,4
    800034f8:	01390663          	beq	s2,s3,80003504 <iput+0xa2>
    if(ip->addrs[i]){
    800034fc:	00092583          	lw	a1,0(s2)
    80003500:	d9fd                	beqz	a1,800034f6 <iput+0x94>
    80003502:	b7dd                	j	800034e8 <iput+0x86>
    }
  }

  if(ip->addrs[NDIRECT]){
    80003504:	0804a583          	lw	a1,128(s1)
    80003508:	ed9d                	bnez	a1,80003546 <iput+0xe4>
    brelse(bp);
    bfree(ip->dev, ip->addrs[NDIRECT]);
    ip->addrs[NDIRECT] = 0;
  }

  ip->size = 0;
    8000350a:	0404a623          	sw	zero,76(s1)
  iupdate(ip);
    8000350e:	8526                	mv	a0,s1
    80003510:	00000097          	auipc	ra,0x0
    80003514:	d7a080e7          	jalr	-646(ra) # 8000328a <iupdate>
    ip->type = 0;
    80003518:	04049223          	sh	zero,68(s1)
    iupdate(ip);
    8000351c:	8526                	mv	a0,s1
    8000351e:	00000097          	auipc	ra,0x0
    80003522:	d6c080e7          	jalr	-660(ra) # 8000328a <iupdate>
    ip->valid = 0;
    80003526:	0404a023          	sw	zero,64(s1)
    releasesleep(&ip->lock);
    8000352a:	8552                	mv	a0,s4
    8000352c:	00001097          	auipc	ra,0x1
    80003530:	b14080e7          	jalr	-1260(ra) # 80004040 <releasesleep>
    acquire(&icache.lock);
    80003534:	0001b517          	auipc	a0,0x1b
    80003538:	7bc50513          	addi	a0,a0,1980 # 8001ecf0 <icache>
    8000353c:	ffffd097          	auipc	ra,0xffffd
    80003540:	592080e7          	jalr	1426(ra) # 80000ace <acquire>
    80003544:	b7a9                	j	8000348e <iput+0x2c>
    bp = bread(ip->dev, ip->addrs[NDIRECT]);
    80003546:	4088                	lw	a0,0(s1)
    80003548:	fffff097          	auipc	ra,0xfffff
    8000354c:	60a080e7          	jalr	1546(ra) # 80002b52 <bread>
    80003550:	8aaa                	mv	s5,a0
    for(j = 0; j < NINDIRECT; j++){
    80003552:	06050913          	addi	s2,a0,96
    80003556:	46050993          	addi	s3,a0,1120
    8000355a:	a809                	j	8000356c <iput+0x10a>
        bfree(ip->dev, a[j]);
    8000355c:	4088                	lw	a0,0(s1)
    8000355e:	00000097          	auipc	ra,0x0
    80003562:	83a080e7          	jalr	-1990(ra) # 80002d98 <bfree>
    for(j = 0; j < NINDIRECT; j++){
    80003566:	0911                	addi	s2,s2,4
    80003568:	01390663          	beq	s2,s3,80003574 <iput+0x112>
      if(a[j])
    8000356c:	00092583          	lw	a1,0(s2)
    80003570:	d9fd                	beqz	a1,80003566 <iput+0x104>
    80003572:	b7ed                	j	8000355c <iput+0xfa>
    brelse(bp);
    80003574:	8556                	mv	a0,s5
    80003576:	fffff097          	auipc	ra,0xfffff
    8000357a:	70c080e7          	jalr	1804(ra) # 80002c82 <brelse>
    bfree(ip->dev, ip->addrs[NDIRECT]);
    8000357e:	0804a583          	lw	a1,128(s1)
    80003582:	4088                	lw	a0,0(s1)
    80003584:	00000097          	auipc	ra,0x0
    80003588:	814080e7          	jalr	-2028(ra) # 80002d98 <bfree>
    ip->addrs[NDIRECT] = 0;
    8000358c:	0804a023          	sw	zero,128(s1)
    80003590:	bfad                	j	8000350a <iput+0xa8>

0000000080003592 <iunlockput>:
{
    80003592:	1101                	addi	sp,sp,-32
    80003594:	ec06                	sd	ra,24(sp)
    80003596:	e822                	sd	s0,16(sp)
    80003598:	e426                	sd	s1,8(sp)
    8000359a:	1000                	addi	s0,sp,32
    8000359c:	84aa                	mv	s1,a0
  iunlock(ip);
    8000359e:	00000097          	auipc	ra,0x0
    800035a2:	e78080e7          	jalr	-392(ra) # 80003416 <iunlock>
  iput(ip);
    800035a6:	8526                	mv	a0,s1
    800035a8:	00000097          	auipc	ra,0x0
    800035ac:	eba080e7          	jalr	-326(ra) # 80003462 <iput>
}
    800035b0:	60e2                	ld	ra,24(sp)
    800035b2:	6442                	ld	s0,16(sp)
    800035b4:	64a2                	ld	s1,8(sp)
    800035b6:	6105                	addi	sp,sp,32
    800035b8:	8082                	ret

00000000800035ba <stati>:

/* Copy stat information from inode. */
/* Caller must hold ip->lock. */
void
stati(struct inode *ip, struct stat *st)
{
    800035ba:	1141                	addi	sp,sp,-16
    800035bc:	e422                	sd	s0,8(sp)
    800035be:	0800                	addi	s0,sp,16
  st->dev = ip->dev;
    800035c0:	411c                	lw	a5,0(a0)
    800035c2:	c19c                	sw	a5,0(a1)
  st->ino = ip->inum;
    800035c4:	415c                	lw	a5,4(a0)
    800035c6:	c1dc                	sw	a5,4(a1)
  st->type = ip->type;
    800035c8:	04451783          	lh	a5,68(a0)
    800035cc:	00f59423          	sh	a5,8(a1)
  st->nlink = ip->nlink;
    800035d0:	04a51783          	lh	a5,74(a0)
    800035d4:	00f59523          	sh	a5,10(a1)
  st->size = ip->size;
    800035d8:	04c56783          	lwu	a5,76(a0)
    800035dc:	e99c                	sd	a5,16(a1)
}
    800035de:	6422                	ld	s0,8(sp)
    800035e0:	0141                	addi	sp,sp,16
    800035e2:	8082                	ret

00000000800035e4 <readi>:
readi(struct inode *ip, int user_dst, uint64 dst, uint off, uint n)
{
  uint tot, m;
  struct buf *bp;

  if(off > ip->size || off + n < off)
    800035e4:	457c                	lw	a5,76(a0)
    800035e6:	0ed7e563          	bltu	a5,a3,800036d0 <readi+0xec>
{
    800035ea:	7159                	addi	sp,sp,-112
    800035ec:	f486                	sd	ra,104(sp)
    800035ee:	f0a2                	sd	s0,96(sp)
    800035f0:	eca6                	sd	s1,88(sp)
    800035f2:	e8ca                	sd	s2,80(sp)
    800035f4:	e4ce                	sd	s3,72(sp)
    800035f6:	e0d2                	sd	s4,64(sp)
    800035f8:	fc56                	sd	s5,56(sp)
    800035fa:	f85a                	sd	s6,48(sp)
    800035fc:	f45e                	sd	s7,40(sp)
    800035fe:	f062                	sd	s8,32(sp)
    80003600:	ec66                	sd	s9,24(sp)
    80003602:	e86a                	sd	s10,16(sp)
    80003604:	e46e                	sd	s11,8(sp)
    80003606:	1880                	addi	s0,sp,112
    80003608:	8baa                	mv	s7,a0
    8000360a:	8c2e                	mv	s8,a1
    8000360c:	8ab2                	mv	s5,a2
    8000360e:	8936                	mv	s2,a3
    80003610:	8b3a                	mv	s6,a4
  if(off > ip->size || off + n < off)
    80003612:	9f35                	addw	a4,a4,a3
    80003614:	0cd76063          	bltu	a4,a3,800036d4 <readi+0xf0>
    return -1;
  if(off + n > ip->size)
    80003618:	00e7f463          	bgeu	a5,a4,80003620 <readi+0x3c>
    n = ip->size - off;
    8000361c:	40d78b3b          	subw	s6,a5,a3

  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
    80003620:	080b0763          	beqz	s6,800036ae <readi+0xca>
    80003624:	4a01                	li	s4,0
    bp = bread(ip->dev, bmap(ip, off/BSIZE));
    m = min(n - tot, BSIZE - off%BSIZE);
    80003626:	40000d13          	li	s10,1024
    if(either_copyout(user_dst, dst, bp->data + (off % BSIZE), m) == -1) {
    8000362a:	5cfd                	li	s9,-1
    8000362c:	a82d                	j	80003666 <readi+0x82>
    8000362e:	02099d93          	slli	s11,s3,0x20
    80003632:	020ddd93          	srli	s11,s11,0x20
    80003636:	06048613          	addi	a2,s1,96
    8000363a:	86ee                	mv	a3,s11
    8000363c:	963a                	add	a2,a2,a4
    8000363e:	85d6                	mv	a1,s5
    80003640:	8562                	mv	a0,s8
    80003642:	fffff097          	auipc	ra,0xfffff
    80003646:	b96080e7          	jalr	-1130(ra) # 800021d8 <either_copyout>
    8000364a:	05950d63          	beq	a0,s9,800036a4 <readi+0xc0>
      brelse(bp);
      break;
    }
    brelse(bp);
    8000364e:	8526                	mv	a0,s1
    80003650:	fffff097          	auipc	ra,0xfffff
    80003654:	632080e7          	jalr	1586(ra) # 80002c82 <brelse>
  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
    80003658:	01498a3b          	addw	s4,s3,s4
    8000365c:	0129893b          	addw	s2,s3,s2
    80003660:	9aee                	add	s5,s5,s11
    80003662:	056a7663          	bgeu	s4,s6,800036ae <readi+0xca>
    bp = bread(ip->dev, bmap(ip, off/BSIZE));
    80003666:	000ba483          	lw	s1,0(s7)
    8000366a:	00a9559b          	srliw	a1,s2,0xa
    8000366e:	855e                	mv	a0,s7
    80003670:	00000097          	auipc	ra,0x0
    80003674:	8d6080e7          	jalr	-1834(ra) # 80002f46 <bmap>
    80003678:	0005059b          	sext.w	a1,a0
    8000367c:	8526                	mv	a0,s1
    8000367e:	fffff097          	auipc	ra,0xfffff
    80003682:	4d4080e7          	jalr	1236(ra) # 80002b52 <bread>
    80003686:	84aa                	mv	s1,a0
    m = min(n - tot, BSIZE - off%BSIZE);
    80003688:	3ff97713          	andi	a4,s2,1023
    8000368c:	40ed07bb          	subw	a5,s10,a4
    80003690:	414b06bb          	subw	a3,s6,s4
    80003694:	89be                	mv	s3,a5
    80003696:	2781                	sext.w	a5,a5
    80003698:	0006861b          	sext.w	a2,a3
    8000369c:	f8f679e3          	bgeu	a2,a5,8000362e <readi+0x4a>
    800036a0:	89b6                	mv	s3,a3
    800036a2:	b771                	j	8000362e <readi+0x4a>
      brelse(bp);
    800036a4:	8526                	mv	a0,s1
    800036a6:	fffff097          	auipc	ra,0xfffff
    800036aa:	5dc080e7          	jalr	1500(ra) # 80002c82 <brelse>
  }
  return n;
    800036ae:	000b051b          	sext.w	a0,s6
}
    800036b2:	70a6                	ld	ra,104(sp)
    800036b4:	7406                	ld	s0,96(sp)
    800036b6:	64e6                	ld	s1,88(sp)
    800036b8:	6946                	ld	s2,80(sp)
    800036ba:	69a6                	ld	s3,72(sp)
    800036bc:	6a06                	ld	s4,64(sp)
    800036be:	7ae2                	ld	s5,56(sp)
    800036c0:	7b42                	ld	s6,48(sp)
    800036c2:	7ba2                	ld	s7,40(sp)
    800036c4:	7c02                	ld	s8,32(sp)
    800036c6:	6ce2                	ld	s9,24(sp)
    800036c8:	6d42                	ld	s10,16(sp)
    800036ca:	6da2                	ld	s11,8(sp)
    800036cc:	6165                	addi	sp,sp,112
    800036ce:	8082                	ret
    return -1;
    800036d0:	557d                	li	a0,-1
}
    800036d2:	8082                	ret
    return -1;
    800036d4:	557d                	li	a0,-1
    800036d6:	bff1                	j	800036b2 <readi+0xce>

00000000800036d8 <writei>:
writei(struct inode *ip, int user_src, uint64 src, uint off, uint n)
{
  uint tot, m;
  struct buf *bp;

  if(off > ip->size || off + n < off)
    800036d8:	457c                	lw	a5,76(a0)
    800036da:	10d7e763          	bltu	a5,a3,800037e8 <writei+0x110>
{
    800036de:	7159                	addi	sp,sp,-112
    800036e0:	f486                	sd	ra,104(sp)
    800036e2:	f0a2                	sd	s0,96(sp)
    800036e4:	eca6                	sd	s1,88(sp)
    800036e6:	e8ca                	sd	s2,80(sp)
    800036e8:	e4ce                	sd	s3,72(sp)
    800036ea:	e0d2                	sd	s4,64(sp)
    800036ec:	fc56                	sd	s5,56(sp)
    800036ee:	f85a                	sd	s6,48(sp)
    800036f0:	f45e                	sd	s7,40(sp)
    800036f2:	f062                	sd	s8,32(sp)
    800036f4:	ec66                	sd	s9,24(sp)
    800036f6:	e86a                	sd	s10,16(sp)
    800036f8:	e46e                	sd	s11,8(sp)
    800036fa:	1880                	addi	s0,sp,112
    800036fc:	8baa                	mv	s7,a0
    800036fe:	8c2e                	mv	s8,a1
    80003700:	8ab2                	mv	s5,a2
    80003702:	8936                	mv	s2,a3
    80003704:	8b3a                	mv	s6,a4
  if(off > ip->size || off + n < off)
    80003706:	00e687bb          	addw	a5,a3,a4
    8000370a:	0ed7e163          	bltu	a5,a3,800037ec <writei+0x114>
    return -1;
  if(off + n > MAXFILE*BSIZE)
    8000370e:	00043737          	lui	a4,0x43
    80003712:	0cf76f63          	bltu	a4,a5,800037f0 <writei+0x118>
    return -1;

  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
    80003716:	0a0b0063          	beqz	s6,800037b6 <writei+0xde>
    8000371a:	4a01                	li	s4,0
    bp = bread(ip->dev, bmap(ip, off/BSIZE));
    m = min(n - tot, BSIZE - off%BSIZE);
    8000371c:	40000d13          	li	s10,1024
    if(either_copyin(bp->data + (off % BSIZE), user_src, src, m) == -1) {
    80003720:	5cfd                	li	s9,-1
    80003722:	a091                	j	80003766 <writei+0x8e>
    80003724:	02099d93          	slli	s11,s3,0x20
    80003728:	020ddd93          	srli	s11,s11,0x20
    8000372c:	06048513          	addi	a0,s1,96
    80003730:	86ee                	mv	a3,s11
    80003732:	8656                	mv	a2,s5
    80003734:	85e2                	mv	a1,s8
    80003736:	953a                	add	a0,a0,a4
    80003738:	fffff097          	auipc	ra,0xfffff
    8000373c:	af6080e7          	jalr	-1290(ra) # 8000222e <either_copyin>
    80003740:	07950263          	beq	a0,s9,800037a4 <writei+0xcc>
      brelse(bp);
      break;
    }
    log_write(bp);
    80003744:	8526                	mv	a0,s1
    80003746:	00000097          	auipc	ra,0x0
    8000374a:	77c080e7          	jalr	1916(ra) # 80003ec2 <log_write>
    brelse(bp);
    8000374e:	8526                	mv	a0,s1
    80003750:	fffff097          	auipc	ra,0xfffff
    80003754:	532080e7          	jalr	1330(ra) # 80002c82 <brelse>
  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
    80003758:	01498a3b          	addw	s4,s3,s4
    8000375c:	0129893b          	addw	s2,s3,s2
    80003760:	9aee                	add	s5,s5,s11
    80003762:	056a7663          	bgeu	s4,s6,800037ae <writei+0xd6>
    bp = bread(ip->dev, bmap(ip, off/BSIZE));
    80003766:	000ba483          	lw	s1,0(s7)
    8000376a:	00a9559b          	srliw	a1,s2,0xa
    8000376e:	855e                	mv	a0,s7
    80003770:	fffff097          	auipc	ra,0xfffff
    80003774:	7d6080e7          	jalr	2006(ra) # 80002f46 <bmap>
    80003778:	0005059b          	sext.w	a1,a0
    8000377c:	8526                	mv	a0,s1
    8000377e:	fffff097          	auipc	ra,0xfffff
    80003782:	3d4080e7          	jalr	980(ra) # 80002b52 <bread>
    80003786:	84aa                	mv	s1,a0
    m = min(n - tot, BSIZE - off%BSIZE);
    80003788:	3ff97713          	andi	a4,s2,1023
    8000378c:	40ed07bb          	subw	a5,s10,a4
    80003790:	414b06bb          	subw	a3,s6,s4
    80003794:	89be                	mv	s3,a5
    80003796:	2781                	sext.w	a5,a5
    80003798:	0006861b          	sext.w	a2,a3
    8000379c:	f8f674e3          	bgeu	a2,a5,80003724 <writei+0x4c>
    800037a0:	89b6                	mv	s3,a3
    800037a2:	b749                	j	80003724 <writei+0x4c>
      brelse(bp);
    800037a4:	8526                	mv	a0,s1
    800037a6:	fffff097          	auipc	ra,0xfffff
    800037aa:	4dc080e7          	jalr	1244(ra) # 80002c82 <brelse>
  }

  if(n > 0 && off > ip->size){
    800037ae:	04cba783          	lw	a5,76(s7)
    800037b2:	0327e363          	bltu	a5,s2,800037d8 <writei+0x100>
    ip->size = off;
    iupdate(ip);
  }
  return n;
    800037b6:	000b051b          	sext.w	a0,s6
}
    800037ba:	70a6                	ld	ra,104(sp)
    800037bc:	7406                	ld	s0,96(sp)
    800037be:	64e6                	ld	s1,88(sp)
    800037c0:	6946                	ld	s2,80(sp)
    800037c2:	69a6                	ld	s3,72(sp)
    800037c4:	6a06                	ld	s4,64(sp)
    800037c6:	7ae2                	ld	s5,56(sp)
    800037c8:	7b42                	ld	s6,48(sp)
    800037ca:	7ba2                	ld	s7,40(sp)
    800037cc:	7c02                	ld	s8,32(sp)
    800037ce:	6ce2                	ld	s9,24(sp)
    800037d0:	6d42                	ld	s10,16(sp)
    800037d2:	6da2                	ld	s11,8(sp)
    800037d4:	6165                	addi	sp,sp,112
    800037d6:	8082                	ret
    ip->size = off;
    800037d8:	052ba623          	sw	s2,76(s7)
    iupdate(ip);
    800037dc:	855e                	mv	a0,s7
    800037de:	00000097          	auipc	ra,0x0
    800037e2:	aac080e7          	jalr	-1364(ra) # 8000328a <iupdate>
    800037e6:	bfc1                	j	800037b6 <writei+0xde>
    return -1;
    800037e8:	557d                	li	a0,-1
}
    800037ea:	8082                	ret
    return -1;
    800037ec:	557d                	li	a0,-1
    800037ee:	b7f1                	j	800037ba <writei+0xe2>
    return -1;
    800037f0:	557d                	li	a0,-1
    800037f2:	b7e1                	j	800037ba <writei+0xe2>

00000000800037f4 <namecmp>:

/* Directories */

int
namecmp(const char *s, const char *t)
{
    800037f4:	1141                	addi	sp,sp,-16
    800037f6:	e406                	sd	ra,8(sp)
    800037f8:	e022                	sd	s0,0(sp)
    800037fa:	0800                	addi	s0,sp,16
  return strncmp(s, t, DIRSIZ);
    800037fc:	4639                	li	a2,14
    800037fe:	ffffd097          	auipc	ra,0xffffd
    80003802:	448080e7          	jalr	1096(ra) # 80000c46 <strncmp>
}
    80003806:	60a2                	ld	ra,8(sp)
    80003808:	6402                	ld	s0,0(sp)
    8000380a:	0141                	addi	sp,sp,16
    8000380c:	8082                	ret

000000008000380e <dirlookup>:

/* Look for a directory entry in a directory. */
/* If found, set *poff to byte offset of entry. */
struct inode*
dirlookup(struct inode *dp, char *name, uint *poff)
{
    8000380e:	7139                	addi	sp,sp,-64
    80003810:	fc06                	sd	ra,56(sp)
    80003812:	f822                	sd	s0,48(sp)
    80003814:	f426                	sd	s1,40(sp)
    80003816:	f04a                	sd	s2,32(sp)
    80003818:	ec4e                	sd	s3,24(sp)
    8000381a:	e852                	sd	s4,16(sp)
    8000381c:	0080                	addi	s0,sp,64
  uint off, inum;
  struct dirent de;

  if(dp->type != T_DIR)
    8000381e:	04451703          	lh	a4,68(a0)
    80003822:	4785                	li	a5,1
    80003824:	00f71a63          	bne	a4,a5,80003838 <dirlookup+0x2a>
    80003828:	892a                	mv	s2,a0
    8000382a:	89ae                	mv	s3,a1
    8000382c:	8a32                	mv	s4,a2
    panic("dirlookup not DIR");

  for(off = 0; off < dp->size; off += sizeof(de)){
    8000382e:	457c                	lw	a5,76(a0)
    80003830:	4481                	li	s1,0
      inum = de.inum;
      return iget(dp->dev, inum);
    }
  }

  return 0;
    80003832:	4501                	li	a0,0
  for(off = 0; off < dp->size; off += sizeof(de)){
    80003834:	e79d                	bnez	a5,80003862 <dirlookup+0x54>
    80003836:	a8a5                	j	800038ae <dirlookup+0xa0>
    panic("dirlookup not DIR");
    80003838:	00003517          	auipc	a0,0x3
    8000383c:	d6050513          	addi	a0,a0,-672 # 80006598 <userret+0x508>
    80003840:	ffffd097          	auipc	ra,0xffffd
    80003844:	d0e080e7          	jalr	-754(ra) # 8000054e <panic>
      panic("dirlookup read");
    80003848:	00003517          	auipc	a0,0x3
    8000384c:	d6850513          	addi	a0,a0,-664 # 800065b0 <userret+0x520>
    80003850:	ffffd097          	auipc	ra,0xffffd
    80003854:	cfe080e7          	jalr	-770(ra) # 8000054e <panic>
  for(off = 0; off < dp->size; off += sizeof(de)){
    80003858:	24c1                	addiw	s1,s1,16
    8000385a:	04c92783          	lw	a5,76(s2)
    8000385e:	04f4f763          	bgeu	s1,a5,800038ac <dirlookup+0x9e>
    if(readi(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
    80003862:	4741                	li	a4,16
    80003864:	86a6                	mv	a3,s1
    80003866:	fc040613          	addi	a2,s0,-64
    8000386a:	4581                	li	a1,0
    8000386c:	854a                	mv	a0,s2
    8000386e:	00000097          	auipc	ra,0x0
    80003872:	d76080e7          	jalr	-650(ra) # 800035e4 <readi>
    80003876:	47c1                	li	a5,16
    80003878:	fcf518e3          	bne	a0,a5,80003848 <dirlookup+0x3a>
    if(de.inum == 0)
    8000387c:	fc045783          	lhu	a5,-64(s0)
    80003880:	dfe1                	beqz	a5,80003858 <dirlookup+0x4a>
    if(namecmp(name, de.name) == 0){
    80003882:	fc240593          	addi	a1,s0,-62
    80003886:	854e                	mv	a0,s3
    80003888:	00000097          	auipc	ra,0x0
    8000388c:	f6c080e7          	jalr	-148(ra) # 800037f4 <namecmp>
    80003890:	f561                	bnez	a0,80003858 <dirlookup+0x4a>
      if(poff)
    80003892:	000a0463          	beqz	s4,8000389a <dirlookup+0x8c>
        *poff = off;
    80003896:	009a2023          	sw	s1,0(s4)
      return iget(dp->dev, inum);
    8000389a:	fc045583          	lhu	a1,-64(s0)
    8000389e:	00092503          	lw	a0,0(s2)
    800038a2:	fffff097          	auipc	ra,0xfffff
    800038a6:	77e080e7          	jalr	1918(ra) # 80003020 <iget>
    800038aa:	a011                	j	800038ae <dirlookup+0xa0>
  return 0;
    800038ac:	4501                	li	a0,0
}
    800038ae:	70e2                	ld	ra,56(sp)
    800038b0:	7442                	ld	s0,48(sp)
    800038b2:	74a2                	ld	s1,40(sp)
    800038b4:	7902                	ld	s2,32(sp)
    800038b6:	69e2                	ld	s3,24(sp)
    800038b8:	6a42                	ld	s4,16(sp)
    800038ba:	6121                	addi	sp,sp,64
    800038bc:	8082                	ret

00000000800038be <namex>:
/* If parent != 0, return the inode for the parent and copy the final */
/* path element into name, which must have room for DIRSIZ bytes. */
/* Must be called inside a transaction since it calls iput(). */
static struct inode*
namex(char *path, int nameiparent, char *name)
{
    800038be:	711d                	addi	sp,sp,-96
    800038c0:	ec86                	sd	ra,88(sp)
    800038c2:	e8a2                	sd	s0,80(sp)
    800038c4:	e4a6                	sd	s1,72(sp)
    800038c6:	e0ca                	sd	s2,64(sp)
    800038c8:	fc4e                	sd	s3,56(sp)
    800038ca:	f852                	sd	s4,48(sp)
    800038cc:	f456                	sd	s5,40(sp)
    800038ce:	f05a                	sd	s6,32(sp)
    800038d0:	ec5e                	sd	s7,24(sp)
    800038d2:	e862                	sd	s8,16(sp)
    800038d4:	e466                	sd	s9,8(sp)
    800038d6:	1080                	addi	s0,sp,96
    800038d8:	84aa                	mv	s1,a0
    800038da:	8b2e                	mv	s6,a1
    800038dc:	8ab2                	mv	s5,a2
  struct inode *ip, *next;

  if(*path == '/')
    800038de:	00054703          	lbu	a4,0(a0)
    800038e2:	02f00793          	li	a5,47
    800038e6:	02f70363          	beq	a4,a5,8000390c <namex+0x4e>
    ip = iget(ROOTDEV, ROOTINO);
  else
    ip = idup(myproc()->cwd);
    800038ea:	ffffe097          	auipc	ra,0xffffe
    800038ee:	ef2080e7          	jalr	-270(ra) # 800017dc <myproc>
    800038f2:	14853503          	ld	a0,328(a0)
    800038f6:	00000097          	auipc	ra,0x0
    800038fa:	a20080e7          	jalr	-1504(ra) # 80003316 <idup>
    800038fe:	89aa                	mv	s3,a0
  while(*path == '/')
    80003900:	02f00913          	li	s2,47
  len = path - s;
    80003904:	4b81                	li	s7,0
  if(len >= DIRSIZ)
    80003906:	4cb5                	li	s9,13

  while((path = skipelem(path, name)) != 0){
    ilock(ip);
    if(ip->type != T_DIR){
    80003908:	4c05                	li	s8,1
    8000390a:	a865                	j	800039c2 <namex+0x104>
    ip = iget(ROOTDEV, ROOTINO);
    8000390c:	4585                	li	a1,1
    8000390e:	4505                	li	a0,1
    80003910:	fffff097          	auipc	ra,0xfffff
    80003914:	710080e7          	jalr	1808(ra) # 80003020 <iget>
    80003918:	89aa                	mv	s3,a0
    8000391a:	b7dd                	j	80003900 <namex+0x42>
      iunlockput(ip);
    8000391c:	854e                	mv	a0,s3
    8000391e:	00000097          	auipc	ra,0x0
    80003922:	c74080e7          	jalr	-908(ra) # 80003592 <iunlockput>
      return 0;
    80003926:	4981                	li	s3,0
  if(nameiparent){
    iput(ip);
    return 0;
  }
  return ip;
}
    80003928:	854e                	mv	a0,s3
    8000392a:	60e6                	ld	ra,88(sp)
    8000392c:	6446                	ld	s0,80(sp)
    8000392e:	64a6                	ld	s1,72(sp)
    80003930:	6906                	ld	s2,64(sp)
    80003932:	79e2                	ld	s3,56(sp)
    80003934:	7a42                	ld	s4,48(sp)
    80003936:	7aa2                	ld	s5,40(sp)
    80003938:	7b02                	ld	s6,32(sp)
    8000393a:	6be2                	ld	s7,24(sp)
    8000393c:	6c42                	ld	s8,16(sp)
    8000393e:	6ca2                	ld	s9,8(sp)
    80003940:	6125                	addi	sp,sp,96
    80003942:	8082                	ret
      iunlock(ip);
    80003944:	854e                	mv	a0,s3
    80003946:	00000097          	auipc	ra,0x0
    8000394a:	ad0080e7          	jalr	-1328(ra) # 80003416 <iunlock>
      return ip;
    8000394e:	bfe9                	j	80003928 <namex+0x6a>
      iunlockput(ip);
    80003950:	854e                	mv	a0,s3
    80003952:	00000097          	auipc	ra,0x0
    80003956:	c40080e7          	jalr	-960(ra) # 80003592 <iunlockput>
      return 0;
    8000395a:	89d2                	mv	s3,s4
    8000395c:	b7f1                	j	80003928 <namex+0x6a>
  len = path - s;
    8000395e:	40b48633          	sub	a2,s1,a1
    80003962:	00060a1b          	sext.w	s4,a2
  if(len >= DIRSIZ)
    80003966:	094cd463          	bge	s9,s4,800039ee <namex+0x130>
    memmove(name, s, DIRSIZ);
    8000396a:	4639                	li	a2,14
    8000396c:	8556                	mv	a0,s5
    8000396e:	ffffd097          	auipc	ra,0xffffd
    80003972:	25c080e7          	jalr	604(ra) # 80000bca <memmove>
  while(*path == '/')
    80003976:	0004c783          	lbu	a5,0(s1)
    8000397a:	01279763          	bne	a5,s2,80003988 <namex+0xca>
    path++;
    8000397e:	0485                	addi	s1,s1,1
  while(*path == '/')
    80003980:	0004c783          	lbu	a5,0(s1)
    80003984:	ff278de3          	beq	a5,s2,8000397e <namex+0xc0>
    ilock(ip);
    80003988:	854e                	mv	a0,s3
    8000398a:	00000097          	auipc	ra,0x0
    8000398e:	9ca080e7          	jalr	-1590(ra) # 80003354 <ilock>
    if(ip->type != T_DIR){
    80003992:	04499783          	lh	a5,68(s3)
    80003996:	f98793e3          	bne	a5,s8,8000391c <namex+0x5e>
    if(nameiparent && *path == '\0'){
    8000399a:	000b0563          	beqz	s6,800039a4 <namex+0xe6>
    8000399e:	0004c783          	lbu	a5,0(s1)
    800039a2:	d3cd                	beqz	a5,80003944 <namex+0x86>
    if((next = dirlookup(ip, name, 0)) == 0){
    800039a4:	865e                	mv	a2,s7
    800039a6:	85d6                	mv	a1,s5
    800039a8:	854e                	mv	a0,s3
    800039aa:	00000097          	auipc	ra,0x0
    800039ae:	e64080e7          	jalr	-412(ra) # 8000380e <dirlookup>
    800039b2:	8a2a                	mv	s4,a0
    800039b4:	dd51                	beqz	a0,80003950 <namex+0x92>
    iunlockput(ip);
    800039b6:	854e                	mv	a0,s3
    800039b8:	00000097          	auipc	ra,0x0
    800039bc:	bda080e7          	jalr	-1062(ra) # 80003592 <iunlockput>
    ip = next;
    800039c0:	89d2                	mv	s3,s4
  while(*path == '/')
    800039c2:	0004c783          	lbu	a5,0(s1)
    800039c6:	05279763          	bne	a5,s2,80003a14 <namex+0x156>
    path++;
    800039ca:	0485                	addi	s1,s1,1
  while(*path == '/')
    800039cc:	0004c783          	lbu	a5,0(s1)
    800039d0:	ff278de3          	beq	a5,s2,800039ca <namex+0x10c>
  if(*path == 0)
    800039d4:	c79d                	beqz	a5,80003a02 <namex+0x144>
    path++;
    800039d6:	85a6                	mv	a1,s1
  len = path - s;
    800039d8:	8a5e                	mv	s4,s7
    800039da:	865e                	mv	a2,s7
  while(*path != '/' && *path != 0)
    800039dc:	01278963          	beq	a5,s2,800039ee <namex+0x130>
    800039e0:	dfbd                	beqz	a5,8000395e <namex+0xa0>
    path++;
    800039e2:	0485                	addi	s1,s1,1
  while(*path != '/' && *path != 0)
    800039e4:	0004c783          	lbu	a5,0(s1)
    800039e8:	ff279ce3          	bne	a5,s2,800039e0 <namex+0x122>
    800039ec:	bf8d                	j	8000395e <namex+0xa0>
    memmove(name, s, len);
    800039ee:	2601                	sext.w	a2,a2
    800039f0:	8556                	mv	a0,s5
    800039f2:	ffffd097          	auipc	ra,0xffffd
    800039f6:	1d8080e7          	jalr	472(ra) # 80000bca <memmove>
    name[len] = 0;
    800039fa:	9a56                	add	s4,s4,s5
    800039fc:	000a0023          	sb	zero,0(s4)
    80003a00:	bf9d                	j	80003976 <namex+0xb8>
  if(nameiparent){
    80003a02:	f20b03e3          	beqz	s6,80003928 <namex+0x6a>
    iput(ip);
    80003a06:	854e                	mv	a0,s3
    80003a08:	00000097          	auipc	ra,0x0
    80003a0c:	a5a080e7          	jalr	-1446(ra) # 80003462 <iput>
    return 0;
    80003a10:	4981                	li	s3,0
    80003a12:	bf19                	j	80003928 <namex+0x6a>
  if(*path == 0)
    80003a14:	d7fd                	beqz	a5,80003a02 <namex+0x144>
  while(*path != '/' && *path != 0)
    80003a16:	0004c783          	lbu	a5,0(s1)
    80003a1a:	85a6                	mv	a1,s1
    80003a1c:	b7d1                	j	800039e0 <namex+0x122>

0000000080003a1e <dirlink>:
{
    80003a1e:	7139                	addi	sp,sp,-64
    80003a20:	fc06                	sd	ra,56(sp)
    80003a22:	f822                	sd	s0,48(sp)
    80003a24:	f426                	sd	s1,40(sp)
    80003a26:	f04a                	sd	s2,32(sp)
    80003a28:	ec4e                	sd	s3,24(sp)
    80003a2a:	e852                	sd	s4,16(sp)
    80003a2c:	0080                	addi	s0,sp,64
    80003a2e:	892a                	mv	s2,a0
    80003a30:	8a2e                	mv	s4,a1
    80003a32:	89b2                	mv	s3,a2
  if((ip = dirlookup(dp, name, 0)) != 0){
    80003a34:	4601                	li	a2,0
    80003a36:	00000097          	auipc	ra,0x0
    80003a3a:	dd8080e7          	jalr	-552(ra) # 8000380e <dirlookup>
    80003a3e:	e93d                	bnez	a0,80003ab4 <dirlink+0x96>
  for(off = 0; off < dp->size; off += sizeof(de)){
    80003a40:	04c92483          	lw	s1,76(s2)
    80003a44:	c49d                	beqz	s1,80003a72 <dirlink+0x54>
    80003a46:	4481                	li	s1,0
    if(readi(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
    80003a48:	4741                	li	a4,16
    80003a4a:	86a6                	mv	a3,s1
    80003a4c:	fc040613          	addi	a2,s0,-64
    80003a50:	4581                	li	a1,0
    80003a52:	854a                	mv	a0,s2
    80003a54:	00000097          	auipc	ra,0x0
    80003a58:	b90080e7          	jalr	-1136(ra) # 800035e4 <readi>
    80003a5c:	47c1                	li	a5,16
    80003a5e:	06f51163          	bne	a0,a5,80003ac0 <dirlink+0xa2>
    if(de.inum == 0)
    80003a62:	fc045783          	lhu	a5,-64(s0)
    80003a66:	c791                	beqz	a5,80003a72 <dirlink+0x54>
  for(off = 0; off < dp->size; off += sizeof(de)){
    80003a68:	24c1                	addiw	s1,s1,16
    80003a6a:	04c92783          	lw	a5,76(s2)
    80003a6e:	fcf4ede3          	bltu	s1,a5,80003a48 <dirlink+0x2a>
  strncpy(de.name, name, DIRSIZ);
    80003a72:	4639                	li	a2,14
    80003a74:	85d2                	mv	a1,s4
    80003a76:	fc240513          	addi	a0,s0,-62
    80003a7a:	ffffd097          	auipc	ra,0xffffd
    80003a7e:	208080e7          	jalr	520(ra) # 80000c82 <strncpy>
  de.inum = inum;
    80003a82:	fd341023          	sh	s3,-64(s0)
  if(writei(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
    80003a86:	4741                	li	a4,16
    80003a88:	86a6                	mv	a3,s1
    80003a8a:	fc040613          	addi	a2,s0,-64
    80003a8e:	4581                	li	a1,0
    80003a90:	854a                	mv	a0,s2
    80003a92:	00000097          	auipc	ra,0x0
    80003a96:	c46080e7          	jalr	-954(ra) # 800036d8 <writei>
    80003a9a:	872a                	mv	a4,a0
    80003a9c:	47c1                	li	a5,16
  return 0;
    80003a9e:	4501                	li	a0,0
  if(writei(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
    80003aa0:	02f71863          	bne	a4,a5,80003ad0 <dirlink+0xb2>
}
    80003aa4:	70e2                	ld	ra,56(sp)
    80003aa6:	7442                	ld	s0,48(sp)
    80003aa8:	74a2                	ld	s1,40(sp)
    80003aaa:	7902                	ld	s2,32(sp)
    80003aac:	69e2                	ld	s3,24(sp)
    80003aae:	6a42                	ld	s4,16(sp)
    80003ab0:	6121                	addi	sp,sp,64
    80003ab2:	8082                	ret
    iput(ip);
    80003ab4:	00000097          	auipc	ra,0x0
    80003ab8:	9ae080e7          	jalr	-1618(ra) # 80003462 <iput>
    return -1;
    80003abc:	557d                	li	a0,-1
    80003abe:	b7dd                	j	80003aa4 <dirlink+0x86>
      panic("dirlink read");
    80003ac0:	00003517          	auipc	a0,0x3
    80003ac4:	b0050513          	addi	a0,a0,-1280 # 800065c0 <userret+0x530>
    80003ac8:	ffffd097          	auipc	ra,0xffffd
    80003acc:	a86080e7          	jalr	-1402(ra) # 8000054e <panic>
    panic("dirlink");
    80003ad0:	00003517          	auipc	a0,0x3
    80003ad4:	c1050513          	addi	a0,a0,-1008 # 800066e0 <userret+0x650>
    80003ad8:	ffffd097          	auipc	ra,0xffffd
    80003adc:	a76080e7          	jalr	-1418(ra) # 8000054e <panic>

0000000080003ae0 <namei>:

struct inode*
namei(char *path)
{
    80003ae0:	1101                	addi	sp,sp,-32
    80003ae2:	ec06                	sd	ra,24(sp)
    80003ae4:	e822                	sd	s0,16(sp)
    80003ae6:	1000                	addi	s0,sp,32
  char name[DIRSIZ];
  return namex(path, 0, name);
    80003ae8:	fe040613          	addi	a2,s0,-32
    80003aec:	4581                	li	a1,0
    80003aee:	00000097          	auipc	ra,0x0
    80003af2:	dd0080e7          	jalr	-560(ra) # 800038be <namex>
}
    80003af6:	60e2                	ld	ra,24(sp)
    80003af8:	6442                	ld	s0,16(sp)
    80003afa:	6105                	addi	sp,sp,32
    80003afc:	8082                	ret

0000000080003afe <nameiparent>:

struct inode*
nameiparent(char *path, char *name)
{
    80003afe:	1141                	addi	sp,sp,-16
    80003b00:	e406                	sd	ra,8(sp)
    80003b02:	e022                	sd	s0,0(sp)
    80003b04:	0800                	addi	s0,sp,16
    80003b06:	862e                	mv	a2,a1
  return namex(path, 1, name);
    80003b08:	4585                	li	a1,1
    80003b0a:	00000097          	auipc	ra,0x0
    80003b0e:	db4080e7          	jalr	-588(ra) # 800038be <namex>
}
    80003b12:	60a2                	ld	ra,8(sp)
    80003b14:	6402                	ld	s0,0(sp)
    80003b16:	0141                	addi	sp,sp,16
    80003b18:	8082                	ret

0000000080003b1a <write_head>:
/* Write in-memory log header to disk. */
/* This is the true point at which the */
/* current transaction commits. */
static void
write_head(void)
{
    80003b1a:	1101                	addi	sp,sp,-32
    80003b1c:	ec06                	sd	ra,24(sp)
    80003b1e:	e822                	sd	s0,16(sp)
    80003b20:	e426                	sd	s1,8(sp)
    80003b22:	e04a                	sd	s2,0(sp)
    80003b24:	1000                	addi	s0,sp,32
  struct buf *buf = bread(log.dev, log.start);
    80003b26:	0001d917          	auipc	s2,0x1d
    80003b2a:	c7290913          	addi	s2,s2,-910 # 80020798 <log>
    80003b2e:	01892583          	lw	a1,24(s2)
    80003b32:	02892503          	lw	a0,40(s2)
    80003b36:	fffff097          	auipc	ra,0xfffff
    80003b3a:	01c080e7          	jalr	28(ra) # 80002b52 <bread>
    80003b3e:	84aa                	mv	s1,a0
  struct logheader *hb = (struct logheader *) (buf->data);
  int i;
  hb->n = log.lh.n;
    80003b40:	02c92683          	lw	a3,44(s2)
    80003b44:	d134                	sw	a3,96(a0)
  for (i = 0; i < log.lh.n; i++) {
    80003b46:	02d05763          	blez	a3,80003b74 <write_head+0x5a>
    80003b4a:	0001d797          	auipc	a5,0x1d
    80003b4e:	c7e78793          	addi	a5,a5,-898 # 800207c8 <log+0x30>
    80003b52:	06450713          	addi	a4,a0,100
    80003b56:	36fd                	addiw	a3,a3,-1
    80003b58:	1682                	slli	a3,a3,0x20
    80003b5a:	9281                	srli	a3,a3,0x20
    80003b5c:	068a                	slli	a3,a3,0x2
    80003b5e:	0001d617          	auipc	a2,0x1d
    80003b62:	c6e60613          	addi	a2,a2,-914 # 800207cc <log+0x34>
    80003b66:	96b2                	add	a3,a3,a2
    hb->block[i] = log.lh.block[i];
    80003b68:	4390                	lw	a2,0(a5)
    80003b6a:	c310                	sw	a2,0(a4)
  for (i = 0; i < log.lh.n; i++) {
    80003b6c:	0791                	addi	a5,a5,4
    80003b6e:	0711                	addi	a4,a4,4
    80003b70:	fed79ce3          	bne	a5,a3,80003b68 <write_head+0x4e>
  }
  bwrite(buf);
    80003b74:	8526                	mv	a0,s1
    80003b76:	fffff097          	auipc	ra,0xfffff
    80003b7a:	0ce080e7          	jalr	206(ra) # 80002c44 <bwrite>
  brelse(buf);
    80003b7e:	8526                	mv	a0,s1
    80003b80:	fffff097          	auipc	ra,0xfffff
    80003b84:	102080e7          	jalr	258(ra) # 80002c82 <brelse>
}
    80003b88:	60e2                	ld	ra,24(sp)
    80003b8a:	6442                	ld	s0,16(sp)
    80003b8c:	64a2                	ld	s1,8(sp)
    80003b8e:	6902                	ld	s2,0(sp)
    80003b90:	6105                	addi	sp,sp,32
    80003b92:	8082                	ret

0000000080003b94 <install_trans>:
  for (tail = 0; tail < log.lh.n; tail++) {
    80003b94:	0001d797          	auipc	a5,0x1d
    80003b98:	c307a783          	lw	a5,-976(a5) # 800207c4 <log+0x2c>
    80003b9c:	0af05663          	blez	a5,80003c48 <install_trans+0xb4>
{
    80003ba0:	7139                	addi	sp,sp,-64
    80003ba2:	fc06                	sd	ra,56(sp)
    80003ba4:	f822                	sd	s0,48(sp)
    80003ba6:	f426                	sd	s1,40(sp)
    80003ba8:	f04a                	sd	s2,32(sp)
    80003baa:	ec4e                	sd	s3,24(sp)
    80003bac:	e852                	sd	s4,16(sp)
    80003bae:	e456                	sd	s5,8(sp)
    80003bb0:	0080                	addi	s0,sp,64
    80003bb2:	0001da97          	auipc	s5,0x1d
    80003bb6:	c16a8a93          	addi	s5,s5,-1002 # 800207c8 <log+0x30>
  for (tail = 0; tail < log.lh.n; tail++) {
    80003bba:	4a01                	li	s4,0
    struct buf *lbuf = bread(log.dev, log.start+tail+1); /* read log block */
    80003bbc:	0001d997          	auipc	s3,0x1d
    80003bc0:	bdc98993          	addi	s3,s3,-1060 # 80020798 <log>
    80003bc4:	0189a583          	lw	a1,24(s3)
    80003bc8:	014585bb          	addw	a1,a1,s4
    80003bcc:	2585                	addiw	a1,a1,1
    80003bce:	0289a503          	lw	a0,40(s3)
    80003bd2:	fffff097          	auipc	ra,0xfffff
    80003bd6:	f80080e7          	jalr	-128(ra) # 80002b52 <bread>
    80003bda:	892a                	mv	s2,a0
    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); /* read dst */
    80003bdc:	000aa583          	lw	a1,0(s5)
    80003be0:	0289a503          	lw	a0,40(s3)
    80003be4:	fffff097          	auipc	ra,0xfffff
    80003be8:	f6e080e7          	jalr	-146(ra) # 80002b52 <bread>
    80003bec:	84aa                	mv	s1,a0
    memmove(dbuf->data, lbuf->data, BSIZE);  /* copy block to dst */
    80003bee:	40000613          	li	a2,1024
    80003bf2:	06090593          	addi	a1,s2,96
    80003bf6:	06050513          	addi	a0,a0,96
    80003bfa:	ffffd097          	auipc	ra,0xffffd
    80003bfe:	fd0080e7          	jalr	-48(ra) # 80000bca <memmove>
    bwrite(dbuf);  /* write dst to disk */
    80003c02:	8526                	mv	a0,s1
    80003c04:	fffff097          	auipc	ra,0xfffff
    80003c08:	040080e7          	jalr	64(ra) # 80002c44 <bwrite>
    bunpin(dbuf);
    80003c0c:	8526                	mv	a0,s1
    80003c0e:	fffff097          	auipc	ra,0xfffff
    80003c12:	14e080e7          	jalr	334(ra) # 80002d5c <bunpin>
    brelse(lbuf);
    80003c16:	854a                	mv	a0,s2
    80003c18:	fffff097          	auipc	ra,0xfffff
    80003c1c:	06a080e7          	jalr	106(ra) # 80002c82 <brelse>
    brelse(dbuf);
    80003c20:	8526                	mv	a0,s1
    80003c22:	fffff097          	auipc	ra,0xfffff
    80003c26:	060080e7          	jalr	96(ra) # 80002c82 <brelse>
  for (tail = 0; tail < log.lh.n; tail++) {
    80003c2a:	2a05                	addiw	s4,s4,1
    80003c2c:	0a91                	addi	s5,s5,4
    80003c2e:	02c9a783          	lw	a5,44(s3)
    80003c32:	f8fa49e3          	blt	s4,a5,80003bc4 <install_trans+0x30>
}
    80003c36:	70e2                	ld	ra,56(sp)
    80003c38:	7442                	ld	s0,48(sp)
    80003c3a:	74a2                	ld	s1,40(sp)
    80003c3c:	7902                	ld	s2,32(sp)
    80003c3e:	69e2                	ld	s3,24(sp)
    80003c40:	6a42                	ld	s4,16(sp)
    80003c42:	6aa2                	ld	s5,8(sp)
    80003c44:	6121                	addi	sp,sp,64
    80003c46:	8082                	ret
    80003c48:	8082                	ret

0000000080003c4a <initlog>:
{
    80003c4a:	7179                	addi	sp,sp,-48
    80003c4c:	f406                	sd	ra,40(sp)
    80003c4e:	f022                	sd	s0,32(sp)
    80003c50:	ec26                	sd	s1,24(sp)
    80003c52:	e84a                	sd	s2,16(sp)
    80003c54:	e44e                	sd	s3,8(sp)
    80003c56:	1800                	addi	s0,sp,48
    80003c58:	892a                	mv	s2,a0
    80003c5a:	89ae                	mv	s3,a1
  initlock(&log.lock, "log");
    80003c5c:	0001d497          	auipc	s1,0x1d
    80003c60:	b3c48493          	addi	s1,s1,-1220 # 80020798 <log>
    80003c64:	00003597          	auipc	a1,0x3
    80003c68:	96c58593          	addi	a1,a1,-1684 # 800065d0 <userret+0x540>
    80003c6c:	8526                	mv	a0,s1
    80003c6e:	ffffd097          	auipc	ra,0xffffd
    80003c72:	d4e080e7          	jalr	-690(ra) # 800009bc <initlock>
  log.start = sb->logstart;
    80003c76:	0149a583          	lw	a1,20(s3)
    80003c7a:	cc8c                	sw	a1,24(s1)
  log.size = sb->nlog;
    80003c7c:	0109a783          	lw	a5,16(s3)
    80003c80:	ccdc                	sw	a5,28(s1)
  log.dev = dev;
    80003c82:	0324a423          	sw	s2,40(s1)
  struct buf *buf = bread(log.dev, log.start);
    80003c86:	854a                	mv	a0,s2
    80003c88:	fffff097          	auipc	ra,0xfffff
    80003c8c:	eca080e7          	jalr	-310(ra) # 80002b52 <bread>
  log.lh.n = lh->n;
    80003c90:	513c                	lw	a5,96(a0)
    80003c92:	d4dc                	sw	a5,44(s1)
  for (i = 0; i < log.lh.n; i++) {
    80003c94:	02f05563          	blez	a5,80003cbe <initlog+0x74>
    80003c98:	06450713          	addi	a4,a0,100
    80003c9c:	0001d697          	auipc	a3,0x1d
    80003ca0:	b2c68693          	addi	a3,a3,-1236 # 800207c8 <log+0x30>
    80003ca4:	37fd                	addiw	a5,a5,-1
    80003ca6:	1782                	slli	a5,a5,0x20
    80003ca8:	9381                	srli	a5,a5,0x20
    80003caa:	078a                	slli	a5,a5,0x2
    80003cac:	06850613          	addi	a2,a0,104
    80003cb0:	97b2                	add	a5,a5,a2
    log.lh.block[i] = lh->block[i];
    80003cb2:	4310                	lw	a2,0(a4)
    80003cb4:	c290                	sw	a2,0(a3)
  for (i = 0; i < log.lh.n; i++) {
    80003cb6:	0711                	addi	a4,a4,4
    80003cb8:	0691                	addi	a3,a3,4
    80003cba:	fef71ce3          	bne	a4,a5,80003cb2 <initlog+0x68>
  brelse(buf);
    80003cbe:	fffff097          	auipc	ra,0xfffff
    80003cc2:	fc4080e7          	jalr	-60(ra) # 80002c82 <brelse>

static void
recover_from_log(void)
{
  read_head();
  install_trans(); /* if committed, copy from log to disk */
    80003cc6:	00000097          	auipc	ra,0x0
    80003cca:	ece080e7          	jalr	-306(ra) # 80003b94 <install_trans>
  log.lh.n = 0;
    80003cce:	0001d797          	auipc	a5,0x1d
    80003cd2:	ae07ab23          	sw	zero,-1290(a5) # 800207c4 <log+0x2c>
  write_head(); /* clear the log */
    80003cd6:	00000097          	auipc	ra,0x0
    80003cda:	e44080e7          	jalr	-444(ra) # 80003b1a <write_head>
}
    80003cde:	70a2                	ld	ra,40(sp)
    80003ce0:	7402                	ld	s0,32(sp)
    80003ce2:	64e2                	ld	s1,24(sp)
    80003ce4:	6942                	ld	s2,16(sp)
    80003ce6:	69a2                	ld	s3,8(sp)
    80003ce8:	6145                	addi	sp,sp,48
    80003cea:	8082                	ret

0000000080003cec <begin_op>:
}

/* called at the start of each FS system call. */
void
begin_op(void)
{
    80003cec:	1101                	addi	sp,sp,-32
    80003cee:	ec06                	sd	ra,24(sp)
    80003cf0:	e822                	sd	s0,16(sp)
    80003cf2:	e426                	sd	s1,8(sp)
    80003cf4:	e04a                	sd	s2,0(sp)
    80003cf6:	1000                	addi	s0,sp,32
  acquire(&log.lock);
    80003cf8:	0001d517          	auipc	a0,0x1d
    80003cfc:	aa050513          	addi	a0,a0,-1376 # 80020798 <log>
    80003d00:	ffffd097          	auipc	ra,0xffffd
    80003d04:	dce080e7          	jalr	-562(ra) # 80000ace <acquire>
  while(1){
    if(log.committing){
    80003d08:	0001d497          	auipc	s1,0x1d
    80003d0c:	a9048493          	addi	s1,s1,-1392 # 80020798 <log>
      sleep(&log, &log.lock);
    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
    80003d10:	4979                	li	s2,30
    80003d12:	a039                	j	80003d20 <begin_op+0x34>
      sleep(&log, &log.lock);
    80003d14:	85a6                	mv	a1,s1
    80003d16:	8526                	mv	a0,s1
    80003d18:	ffffe097          	auipc	ra,0xffffe
    80003d1c:	29a080e7          	jalr	666(ra) # 80001fb2 <sleep>
    if(log.committing){
    80003d20:	50dc                	lw	a5,36(s1)
    80003d22:	fbed                	bnez	a5,80003d14 <begin_op+0x28>
    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
    80003d24:	509c                	lw	a5,32(s1)
    80003d26:	0017871b          	addiw	a4,a5,1
    80003d2a:	0007069b          	sext.w	a3,a4
    80003d2e:	0027179b          	slliw	a5,a4,0x2
    80003d32:	9fb9                	addw	a5,a5,a4
    80003d34:	0017979b          	slliw	a5,a5,0x1
    80003d38:	54d8                	lw	a4,44(s1)
    80003d3a:	9fb9                	addw	a5,a5,a4
    80003d3c:	00f95963          	bge	s2,a5,80003d4e <begin_op+0x62>
      /* this op might exhaust log space; wait for commit. */
      sleep(&log, &log.lock);
    80003d40:	85a6                	mv	a1,s1
    80003d42:	8526                	mv	a0,s1
    80003d44:	ffffe097          	auipc	ra,0xffffe
    80003d48:	26e080e7          	jalr	622(ra) # 80001fb2 <sleep>
    80003d4c:	bfd1                	j	80003d20 <begin_op+0x34>
    } else {
      log.outstanding += 1;
    80003d4e:	0001d517          	auipc	a0,0x1d
    80003d52:	a4a50513          	addi	a0,a0,-1462 # 80020798 <log>
    80003d56:	d114                	sw	a3,32(a0)
      release(&log.lock);
    80003d58:	ffffd097          	auipc	ra,0xffffd
    80003d5c:	dca080e7          	jalr	-566(ra) # 80000b22 <release>
      break;
    }
  }
}
    80003d60:	60e2                	ld	ra,24(sp)
    80003d62:	6442                	ld	s0,16(sp)
    80003d64:	64a2                	ld	s1,8(sp)
    80003d66:	6902                	ld	s2,0(sp)
    80003d68:	6105                	addi	sp,sp,32
    80003d6a:	8082                	ret

0000000080003d6c <end_op>:

/* called at the end of each FS system call. */
/* commits if this was the last outstanding operation. */
void
end_op(void)
{
    80003d6c:	7139                	addi	sp,sp,-64
    80003d6e:	fc06                	sd	ra,56(sp)
    80003d70:	f822                	sd	s0,48(sp)
    80003d72:	f426                	sd	s1,40(sp)
    80003d74:	f04a                	sd	s2,32(sp)
    80003d76:	ec4e                	sd	s3,24(sp)
    80003d78:	e852                	sd	s4,16(sp)
    80003d7a:	e456                	sd	s5,8(sp)
    80003d7c:	0080                	addi	s0,sp,64
  int do_commit = 0;

  acquire(&log.lock);
    80003d7e:	0001d497          	auipc	s1,0x1d
    80003d82:	a1a48493          	addi	s1,s1,-1510 # 80020798 <log>
    80003d86:	8526                	mv	a0,s1
    80003d88:	ffffd097          	auipc	ra,0xffffd
    80003d8c:	d46080e7          	jalr	-698(ra) # 80000ace <acquire>
  log.outstanding -= 1;
    80003d90:	509c                	lw	a5,32(s1)
    80003d92:	37fd                	addiw	a5,a5,-1
    80003d94:	0007891b          	sext.w	s2,a5
    80003d98:	d09c                	sw	a5,32(s1)
  if(log.committing)
    80003d9a:	50dc                	lw	a5,36(s1)
    80003d9c:	efb9                	bnez	a5,80003dfa <end_op+0x8e>
    panic("log.committing");
  if(log.outstanding == 0){
    80003d9e:	06091663          	bnez	s2,80003e0a <end_op+0x9e>
    do_commit = 1;
    log.committing = 1;
    80003da2:	0001d497          	auipc	s1,0x1d
    80003da6:	9f648493          	addi	s1,s1,-1546 # 80020798 <log>
    80003daa:	4785                	li	a5,1
    80003dac:	d0dc                	sw	a5,36(s1)
    /* begin_op() may be waiting for log space, */
    /* and decrementing log.outstanding has decreased */
    /* the amount of reserved space. */
    wakeup(&log);
  }
  release(&log.lock);
    80003dae:	8526                	mv	a0,s1
    80003db0:	ffffd097          	auipc	ra,0xffffd
    80003db4:	d72080e7          	jalr	-654(ra) # 80000b22 <release>
}

static void
commit()
{
  if (log.lh.n > 0) {
    80003db8:	54dc                	lw	a5,44(s1)
    80003dba:	06f04763          	bgtz	a5,80003e28 <end_op+0xbc>
    acquire(&log.lock);
    80003dbe:	0001d497          	auipc	s1,0x1d
    80003dc2:	9da48493          	addi	s1,s1,-1574 # 80020798 <log>
    80003dc6:	8526                	mv	a0,s1
    80003dc8:	ffffd097          	auipc	ra,0xffffd
    80003dcc:	d06080e7          	jalr	-762(ra) # 80000ace <acquire>
    log.committing = 0;
    80003dd0:	0204a223          	sw	zero,36(s1)
    wakeup(&log);
    80003dd4:	8526                	mv	a0,s1
    80003dd6:	ffffe097          	auipc	ra,0xffffe
    80003dda:	328080e7          	jalr	808(ra) # 800020fe <wakeup>
    release(&log.lock);
    80003dde:	8526                	mv	a0,s1
    80003de0:	ffffd097          	auipc	ra,0xffffd
    80003de4:	d42080e7          	jalr	-702(ra) # 80000b22 <release>
}
    80003de8:	70e2                	ld	ra,56(sp)
    80003dea:	7442                	ld	s0,48(sp)
    80003dec:	74a2                	ld	s1,40(sp)
    80003dee:	7902                	ld	s2,32(sp)
    80003df0:	69e2                	ld	s3,24(sp)
    80003df2:	6a42                	ld	s4,16(sp)
    80003df4:	6aa2                	ld	s5,8(sp)
    80003df6:	6121                	addi	sp,sp,64
    80003df8:	8082                	ret
    panic("log.committing");
    80003dfa:	00002517          	auipc	a0,0x2
    80003dfe:	7de50513          	addi	a0,a0,2014 # 800065d8 <userret+0x548>
    80003e02:	ffffc097          	auipc	ra,0xffffc
    80003e06:	74c080e7          	jalr	1868(ra) # 8000054e <panic>
    wakeup(&log);
    80003e0a:	0001d497          	auipc	s1,0x1d
    80003e0e:	98e48493          	addi	s1,s1,-1650 # 80020798 <log>
    80003e12:	8526                	mv	a0,s1
    80003e14:	ffffe097          	auipc	ra,0xffffe
    80003e18:	2ea080e7          	jalr	746(ra) # 800020fe <wakeup>
  release(&log.lock);
    80003e1c:	8526                	mv	a0,s1
    80003e1e:	ffffd097          	auipc	ra,0xffffd
    80003e22:	d04080e7          	jalr	-764(ra) # 80000b22 <release>
  if(do_commit){
    80003e26:	b7c9                	j	80003de8 <end_op+0x7c>
  for (tail = 0; tail < log.lh.n; tail++) {
    80003e28:	0001da97          	auipc	s5,0x1d
    80003e2c:	9a0a8a93          	addi	s5,s5,-1632 # 800207c8 <log+0x30>
    struct buf *to = bread(log.dev, log.start+tail+1); /* log block */
    80003e30:	0001da17          	auipc	s4,0x1d
    80003e34:	968a0a13          	addi	s4,s4,-1688 # 80020798 <log>
    80003e38:	018a2583          	lw	a1,24(s4)
    80003e3c:	012585bb          	addw	a1,a1,s2
    80003e40:	2585                	addiw	a1,a1,1
    80003e42:	028a2503          	lw	a0,40(s4)
    80003e46:	fffff097          	auipc	ra,0xfffff
    80003e4a:	d0c080e7          	jalr	-756(ra) # 80002b52 <bread>
    80003e4e:	84aa                	mv	s1,a0
    struct buf *from = bread(log.dev, log.lh.block[tail]); /* cache block */
    80003e50:	000aa583          	lw	a1,0(s5)
    80003e54:	028a2503          	lw	a0,40(s4)
    80003e58:	fffff097          	auipc	ra,0xfffff
    80003e5c:	cfa080e7          	jalr	-774(ra) # 80002b52 <bread>
    80003e60:	89aa                	mv	s3,a0
    memmove(to->data, from->data, BSIZE);
    80003e62:	40000613          	li	a2,1024
    80003e66:	06050593          	addi	a1,a0,96
    80003e6a:	06048513          	addi	a0,s1,96
    80003e6e:	ffffd097          	auipc	ra,0xffffd
    80003e72:	d5c080e7          	jalr	-676(ra) # 80000bca <memmove>
    bwrite(to);  /* write the log */
    80003e76:	8526                	mv	a0,s1
    80003e78:	fffff097          	auipc	ra,0xfffff
    80003e7c:	dcc080e7          	jalr	-564(ra) # 80002c44 <bwrite>
    brelse(from);
    80003e80:	854e                	mv	a0,s3
    80003e82:	fffff097          	auipc	ra,0xfffff
    80003e86:	e00080e7          	jalr	-512(ra) # 80002c82 <brelse>
    brelse(to);
    80003e8a:	8526                	mv	a0,s1
    80003e8c:	fffff097          	auipc	ra,0xfffff
    80003e90:	df6080e7          	jalr	-522(ra) # 80002c82 <brelse>
  for (tail = 0; tail < log.lh.n; tail++) {
    80003e94:	2905                	addiw	s2,s2,1
    80003e96:	0a91                	addi	s5,s5,4
    80003e98:	02ca2783          	lw	a5,44(s4)
    80003e9c:	f8f94ee3          	blt	s2,a5,80003e38 <end_op+0xcc>
    write_log();     /* Write modified blocks from cache to log */
    write_head();    /* Write header to disk -- the real commit */
    80003ea0:	00000097          	auipc	ra,0x0
    80003ea4:	c7a080e7          	jalr	-902(ra) # 80003b1a <write_head>
    install_trans(); /* Now install writes to home locations */
    80003ea8:	00000097          	auipc	ra,0x0
    80003eac:	cec080e7          	jalr	-788(ra) # 80003b94 <install_trans>
    log.lh.n = 0;
    80003eb0:	0001d797          	auipc	a5,0x1d
    80003eb4:	9007aa23          	sw	zero,-1772(a5) # 800207c4 <log+0x2c>
    write_head();    /* Erase the transaction from the log */
    80003eb8:	00000097          	auipc	ra,0x0
    80003ebc:	c62080e7          	jalr	-926(ra) # 80003b1a <write_head>
    80003ec0:	bdfd                	j	80003dbe <end_op+0x52>

0000000080003ec2 <log_write>:
/*   modify bp->data[] */
/*   log_write(bp) */
/*   brelse(bp) */
void
log_write(struct buf *b)
{
    80003ec2:	1101                	addi	sp,sp,-32
    80003ec4:	ec06                	sd	ra,24(sp)
    80003ec6:	e822                	sd	s0,16(sp)
    80003ec8:	e426                	sd	s1,8(sp)
    80003eca:	e04a                	sd	s2,0(sp)
    80003ecc:	1000                	addi	s0,sp,32
  int i;

  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
    80003ece:	0001d717          	auipc	a4,0x1d
    80003ed2:	8f672703          	lw	a4,-1802(a4) # 800207c4 <log+0x2c>
    80003ed6:	47f5                	li	a5,29
    80003ed8:	08e7c063          	blt	a5,a4,80003f58 <log_write+0x96>
    80003edc:	84aa                	mv	s1,a0
    80003ede:	0001d797          	auipc	a5,0x1d
    80003ee2:	8d67a783          	lw	a5,-1834(a5) # 800207b4 <log+0x1c>
    80003ee6:	37fd                	addiw	a5,a5,-1
    80003ee8:	06f75863          	bge	a4,a5,80003f58 <log_write+0x96>
    panic("too big a transaction");
  if (log.outstanding < 1)
    80003eec:	0001d797          	auipc	a5,0x1d
    80003ef0:	8cc7a783          	lw	a5,-1844(a5) # 800207b8 <log+0x20>
    80003ef4:	06f05a63          	blez	a5,80003f68 <log_write+0xa6>
    panic("log_write outside of trans");

  acquire(&log.lock);
    80003ef8:	0001d917          	auipc	s2,0x1d
    80003efc:	8a090913          	addi	s2,s2,-1888 # 80020798 <log>
    80003f00:	854a                	mv	a0,s2
    80003f02:	ffffd097          	auipc	ra,0xffffd
    80003f06:	bcc080e7          	jalr	-1076(ra) # 80000ace <acquire>
  for (i = 0; i < log.lh.n; i++) {
    80003f0a:	02c92603          	lw	a2,44(s2)
    80003f0e:	06c05563          	blez	a2,80003f78 <log_write+0xb6>
    if (log.lh.block[i] == b->blockno)   /* log absorbtion */
    80003f12:	44cc                	lw	a1,12(s1)
    80003f14:	0001d717          	auipc	a4,0x1d
    80003f18:	8b470713          	addi	a4,a4,-1868 # 800207c8 <log+0x30>
  for (i = 0; i < log.lh.n; i++) {
    80003f1c:	4781                	li	a5,0
    if (log.lh.block[i] == b->blockno)   /* log absorbtion */
    80003f1e:	4314                	lw	a3,0(a4)
    80003f20:	04b68d63          	beq	a3,a1,80003f7a <log_write+0xb8>
  for (i = 0; i < log.lh.n; i++) {
    80003f24:	2785                	addiw	a5,a5,1
    80003f26:	0711                	addi	a4,a4,4
    80003f28:	fec79be3          	bne	a5,a2,80003f1e <log_write+0x5c>
      break;
  }
  log.lh.block[i] = b->blockno;
    80003f2c:	0621                	addi	a2,a2,8
    80003f2e:	060a                	slli	a2,a2,0x2
    80003f30:	0001d797          	auipc	a5,0x1d
    80003f34:	86878793          	addi	a5,a5,-1944 # 80020798 <log>
    80003f38:	963e                	add	a2,a2,a5
    80003f3a:	44dc                	lw	a5,12(s1)
    80003f3c:	ca1c                	sw	a5,16(a2)
  if (i == log.lh.n) {  /* Add new block to log? */
    bpin(b);
    80003f3e:	8526                	mv	a0,s1
    80003f40:	fffff097          	auipc	ra,0xfffff
    80003f44:	de0080e7          	jalr	-544(ra) # 80002d20 <bpin>
    log.lh.n++;
    80003f48:	0001d717          	auipc	a4,0x1d
    80003f4c:	85070713          	addi	a4,a4,-1968 # 80020798 <log>
    80003f50:	575c                	lw	a5,44(a4)
    80003f52:	2785                	addiw	a5,a5,1
    80003f54:	d75c                	sw	a5,44(a4)
    80003f56:	a83d                	j	80003f94 <log_write+0xd2>
    panic("too big a transaction");
    80003f58:	00002517          	auipc	a0,0x2
    80003f5c:	69050513          	addi	a0,a0,1680 # 800065e8 <userret+0x558>
    80003f60:	ffffc097          	auipc	ra,0xffffc
    80003f64:	5ee080e7          	jalr	1518(ra) # 8000054e <panic>
    panic("log_write outside of trans");
    80003f68:	00002517          	auipc	a0,0x2
    80003f6c:	69850513          	addi	a0,a0,1688 # 80006600 <userret+0x570>
    80003f70:	ffffc097          	auipc	ra,0xffffc
    80003f74:	5de080e7          	jalr	1502(ra) # 8000054e <panic>
  for (i = 0; i < log.lh.n; i++) {
    80003f78:	4781                	li	a5,0
  log.lh.block[i] = b->blockno;
    80003f7a:	00878713          	addi	a4,a5,8
    80003f7e:	00271693          	slli	a3,a4,0x2
    80003f82:	0001d717          	auipc	a4,0x1d
    80003f86:	81670713          	addi	a4,a4,-2026 # 80020798 <log>
    80003f8a:	9736                	add	a4,a4,a3
    80003f8c:	44d4                	lw	a3,12(s1)
    80003f8e:	cb14                	sw	a3,16(a4)
  if (i == log.lh.n) {  /* Add new block to log? */
    80003f90:	faf607e3          	beq	a2,a5,80003f3e <log_write+0x7c>
  }
  release(&log.lock);
    80003f94:	0001d517          	auipc	a0,0x1d
    80003f98:	80450513          	addi	a0,a0,-2044 # 80020798 <log>
    80003f9c:	ffffd097          	auipc	ra,0xffffd
    80003fa0:	b86080e7          	jalr	-1146(ra) # 80000b22 <release>
}
    80003fa4:	60e2                	ld	ra,24(sp)
    80003fa6:	6442                	ld	s0,16(sp)
    80003fa8:	64a2                	ld	s1,8(sp)
    80003faa:	6902                	ld	s2,0(sp)
    80003fac:	6105                	addi	sp,sp,32
    80003fae:	8082                	ret

0000000080003fb0 <initsleeplock>:
#include "proc.h"
#include "sleeplock.h"

void
initsleeplock(struct sleeplock *lk, char *name)
{
    80003fb0:	1101                	addi	sp,sp,-32
    80003fb2:	ec06                	sd	ra,24(sp)
    80003fb4:	e822                	sd	s0,16(sp)
    80003fb6:	e426                	sd	s1,8(sp)
    80003fb8:	e04a                	sd	s2,0(sp)
    80003fba:	1000                	addi	s0,sp,32
    80003fbc:	84aa                	mv	s1,a0
    80003fbe:	892e                	mv	s2,a1
  initlock(&lk->lk, "sleep lock");
    80003fc0:	00002597          	auipc	a1,0x2
    80003fc4:	66058593          	addi	a1,a1,1632 # 80006620 <userret+0x590>
    80003fc8:	0521                	addi	a0,a0,8
    80003fca:	ffffd097          	auipc	ra,0xffffd
    80003fce:	9f2080e7          	jalr	-1550(ra) # 800009bc <initlock>
  lk->name = name;
    80003fd2:	0324b023          	sd	s2,32(s1)
  lk->locked = 0;
    80003fd6:	0004a023          	sw	zero,0(s1)
  lk->pid = 0;
    80003fda:	0204a423          	sw	zero,40(s1)
}
    80003fde:	60e2                	ld	ra,24(sp)
    80003fe0:	6442                	ld	s0,16(sp)
    80003fe2:	64a2                	ld	s1,8(sp)
    80003fe4:	6902                	ld	s2,0(sp)
    80003fe6:	6105                	addi	sp,sp,32
    80003fe8:	8082                	ret

0000000080003fea <acquiresleep>:

void
acquiresleep(struct sleeplock *lk)
{
    80003fea:	1101                	addi	sp,sp,-32
    80003fec:	ec06                	sd	ra,24(sp)
    80003fee:	e822                	sd	s0,16(sp)
    80003ff0:	e426                	sd	s1,8(sp)
    80003ff2:	e04a                	sd	s2,0(sp)
    80003ff4:	1000                	addi	s0,sp,32
    80003ff6:	84aa                	mv	s1,a0
  acquire(&lk->lk);
    80003ff8:	00850913          	addi	s2,a0,8
    80003ffc:	854a                	mv	a0,s2
    80003ffe:	ffffd097          	auipc	ra,0xffffd
    80004002:	ad0080e7          	jalr	-1328(ra) # 80000ace <acquire>
  while (lk->locked) {
    80004006:	409c                	lw	a5,0(s1)
    80004008:	cb89                	beqz	a5,8000401a <acquiresleep+0x30>
    sleep(lk, &lk->lk);
    8000400a:	85ca                	mv	a1,s2
    8000400c:	8526                	mv	a0,s1
    8000400e:	ffffe097          	auipc	ra,0xffffe
    80004012:	fa4080e7          	jalr	-92(ra) # 80001fb2 <sleep>
  while (lk->locked) {
    80004016:	409c                	lw	a5,0(s1)
    80004018:	fbed                	bnez	a5,8000400a <acquiresleep+0x20>
  }
  lk->locked = 1;
    8000401a:	4785                	li	a5,1
    8000401c:	c09c                	sw	a5,0(s1)
  lk->pid = myproc()->pid;
    8000401e:	ffffd097          	auipc	ra,0xffffd
    80004022:	7be080e7          	jalr	1982(ra) # 800017dc <myproc>
    80004026:	595c                	lw	a5,52(a0)
    80004028:	d49c                	sw	a5,40(s1)
  release(&lk->lk);
    8000402a:	854a                	mv	a0,s2
    8000402c:	ffffd097          	auipc	ra,0xffffd
    80004030:	af6080e7          	jalr	-1290(ra) # 80000b22 <release>
}
    80004034:	60e2                	ld	ra,24(sp)
    80004036:	6442                	ld	s0,16(sp)
    80004038:	64a2                	ld	s1,8(sp)
    8000403a:	6902                	ld	s2,0(sp)
    8000403c:	6105                	addi	sp,sp,32
    8000403e:	8082                	ret

0000000080004040 <releasesleep>:

void
releasesleep(struct sleeplock *lk)
{
    80004040:	1101                	addi	sp,sp,-32
    80004042:	ec06                	sd	ra,24(sp)
    80004044:	e822                	sd	s0,16(sp)
    80004046:	e426                	sd	s1,8(sp)
    80004048:	e04a                	sd	s2,0(sp)
    8000404a:	1000                	addi	s0,sp,32
    8000404c:	84aa                	mv	s1,a0
  acquire(&lk->lk);
    8000404e:	00850913          	addi	s2,a0,8
    80004052:	854a                	mv	a0,s2
    80004054:	ffffd097          	auipc	ra,0xffffd
    80004058:	a7a080e7          	jalr	-1414(ra) # 80000ace <acquire>
  lk->locked = 0;
    8000405c:	0004a023          	sw	zero,0(s1)
  lk->pid = 0;
    80004060:	0204a423          	sw	zero,40(s1)
  wakeup(lk);
    80004064:	8526                	mv	a0,s1
    80004066:	ffffe097          	auipc	ra,0xffffe
    8000406a:	098080e7          	jalr	152(ra) # 800020fe <wakeup>
  release(&lk->lk);
    8000406e:	854a                	mv	a0,s2
    80004070:	ffffd097          	auipc	ra,0xffffd
    80004074:	ab2080e7          	jalr	-1358(ra) # 80000b22 <release>
}
    80004078:	60e2                	ld	ra,24(sp)
    8000407a:	6442                	ld	s0,16(sp)
    8000407c:	64a2                	ld	s1,8(sp)
    8000407e:	6902                	ld	s2,0(sp)
    80004080:	6105                	addi	sp,sp,32
    80004082:	8082                	ret

0000000080004084 <holdingsleep>:

int
holdingsleep(struct sleeplock *lk)
{
    80004084:	7179                	addi	sp,sp,-48
    80004086:	f406                	sd	ra,40(sp)
    80004088:	f022                	sd	s0,32(sp)
    8000408a:	ec26                	sd	s1,24(sp)
    8000408c:	e84a                	sd	s2,16(sp)
    8000408e:	e44e                	sd	s3,8(sp)
    80004090:	1800                	addi	s0,sp,48
    80004092:	84aa                	mv	s1,a0
  int r;
  
  acquire(&lk->lk);
    80004094:	00850913          	addi	s2,a0,8
    80004098:	854a                	mv	a0,s2
    8000409a:	ffffd097          	auipc	ra,0xffffd
    8000409e:	a34080e7          	jalr	-1484(ra) # 80000ace <acquire>
  r = lk->locked && (lk->pid == myproc()->pid);
    800040a2:	409c                	lw	a5,0(s1)
    800040a4:	ef99                	bnez	a5,800040c2 <holdingsleep+0x3e>
    800040a6:	4481                	li	s1,0
  release(&lk->lk);
    800040a8:	854a                	mv	a0,s2
    800040aa:	ffffd097          	auipc	ra,0xffffd
    800040ae:	a78080e7          	jalr	-1416(ra) # 80000b22 <release>
  return r;
}
    800040b2:	8526                	mv	a0,s1
    800040b4:	70a2                	ld	ra,40(sp)
    800040b6:	7402                	ld	s0,32(sp)
    800040b8:	64e2                	ld	s1,24(sp)
    800040ba:	6942                	ld	s2,16(sp)
    800040bc:	69a2                	ld	s3,8(sp)
    800040be:	6145                	addi	sp,sp,48
    800040c0:	8082                	ret
  r = lk->locked && (lk->pid == myproc()->pid);
    800040c2:	0284a983          	lw	s3,40(s1)
    800040c6:	ffffd097          	auipc	ra,0xffffd
    800040ca:	716080e7          	jalr	1814(ra) # 800017dc <myproc>
    800040ce:	5944                	lw	s1,52(a0)
    800040d0:	413484b3          	sub	s1,s1,s3
    800040d4:	0014b493          	seqz	s1,s1
    800040d8:	bfc1                	j	800040a8 <holdingsleep+0x24>

00000000800040da <fileinit>:
  struct file file[NFILE];
} ftable;

void
fileinit(void)
{
    800040da:	1141                	addi	sp,sp,-16
    800040dc:	e406                	sd	ra,8(sp)
    800040de:	e022                	sd	s0,0(sp)
    800040e0:	0800                	addi	s0,sp,16
  initlock(&ftable.lock, "ftable");
    800040e2:	00002597          	auipc	a1,0x2
    800040e6:	54e58593          	addi	a1,a1,1358 # 80006630 <userret+0x5a0>
    800040ea:	0001c517          	auipc	a0,0x1c
    800040ee:	7f650513          	addi	a0,a0,2038 # 800208e0 <ftable>
    800040f2:	ffffd097          	auipc	ra,0xffffd
    800040f6:	8ca080e7          	jalr	-1846(ra) # 800009bc <initlock>
}
    800040fa:	60a2                	ld	ra,8(sp)
    800040fc:	6402                	ld	s0,0(sp)
    800040fe:	0141                	addi	sp,sp,16
    80004100:	8082                	ret

0000000080004102 <filealloc>:

/* Allocate a file structure. */
struct file*
filealloc(void)
{
    80004102:	1101                	addi	sp,sp,-32
    80004104:	ec06                	sd	ra,24(sp)
    80004106:	e822                	sd	s0,16(sp)
    80004108:	e426                	sd	s1,8(sp)
    8000410a:	1000                	addi	s0,sp,32
  struct file *f;

  acquire(&ftable.lock);
    8000410c:	0001c517          	auipc	a0,0x1c
    80004110:	7d450513          	addi	a0,a0,2004 # 800208e0 <ftable>
    80004114:	ffffd097          	auipc	ra,0xffffd
    80004118:	9ba080e7          	jalr	-1606(ra) # 80000ace <acquire>
  for(f = ftable.file; f < ftable.file + NFILE; f++){
    8000411c:	0001c497          	auipc	s1,0x1c
    80004120:	7dc48493          	addi	s1,s1,2012 # 800208f8 <ftable+0x18>
    80004124:	0001d717          	auipc	a4,0x1d
    80004128:	77470713          	addi	a4,a4,1908 # 80021898 <ftable+0xfb8>
    if(f->ref == 0){
    8000412c:	40dc                	lw	a5,4(s1)
    8000412e:	cf99                	beqz	a5,8000414c <filealloc+0x4a>
  for(f = ftable.file; f < ftable.file + NFILE; f++){
    80004130:	02848493          	addi	s1,s1,40
    80004134:	fee49ce3          	bne	s1,a4,8000412c <filealloc+0x2a>
      f->ref = 1;
      release(&ftable.lock);
      return f;
    }
  }
  release(&ftable.lock);
    80004138:	0001c517          	auipc	a0,0x1c
    8000413c:	7a850513          	addi	a0,a0,1960 # 800208e0 <ftable>
    80004140:	ffffd097          	auipc	ra,0xffffd
    80004144:	9e2080e7          	jalr	-1566(ra) # 80000b22 <release>
  return 0;
    80004148:	4481                	li	s1,0
    8000414a:	a819                	j	80004160 <filealloc+0x5e>
      f->ref = 1;
    8000414c:	4785                	li	a5,1
    8000414e:	c0dc                	sw	a5,4(s1)
      release(&ftable.lock);
    80004150:	0001c517          	auipc	a0,0x1c
    80004154:	79050513          	addi	a0,a0,1936 # 800208e0 <ftable>
    80004158:	ffffd097          	auipc	ra,0xffffd
    8000415c:	9ca080e7          	jalr	-1590(ra) # 80000b22 <release>
}
    80004160:	8526                	mv	a0,s1
    80004162:	60e2                	ld	ra,24(sp)
    80004164:	6442                	ld	s0,16(sp)
    80004166:	64a2                	ld	s1,8(sp)
    80004168:	6105                	addi	sp,sp,32
    8000416a:	8082                	ret

000000008000416c <filedup>:

/* Increment ref count for file f. */
struct file*
filedup(struct file *f)
{
    8000416c:	1101                	addi	sp,sp,-32
    8000416e:	ec06                	sd	ra,24(sp)
    80004170:	e822                	sd	s0,16(sp)
    80004172:	e426                	sd	s1,8(sp)
    80004174:	1000                	addi	s0,sp,32
    80004176:	84aa                	mv	s1,a0
  acquire(&ftable.lock);
    80004178:	0001c517          	auipc	a0,0x1c
    8000417c:	76850513          	addi	a0,a0,1896 # 800208e0 <ftable>
    80004180:	ffffd097          	auipc	ra,0xffffd
    80004184:	94e080e7          	jalr	-1714(ra) # 80000ace <acquire>
  if(f->ref < 1)
    80004188:	40dc                	lw	a5,4(s1)
    8000418a:	02f05263          	blez	a5,800041ae <filedup+0x42>
    panic("filedup");
  f->ref++;
    8000418e:	2785                	addiw	a5,a5,1
    80004190:	c0dc                	sw	a5,4(s1)
  release(&ftable.lock);
    80004192:	0001c517          	auipc	a0,0x1c
    80004196:	74e50513          	addi	a0,a0,1870 # 800208e0 <ftable>
    8000419a:	ffffd097          	auipc	ra,0xffffd
    8000419e:	988080e7          	jalr	-1656(ra) # 80000b22 <release>
  return f;
}
    800041a2:	8526                	mv	a0,s1
    800041a4:	60e2                	ld	ra,24(sp)
    800041a6:	6442                	ld	s0,16(sp)
    800041a8:	64a2                	ld	s1,8(sp)
    800041aa:	6105                	addi	sp,sp,32
    800041ac:	8082                	ret
    panic("filedup");
    800041ae:	00002517          	auipc	a0,0x2
    800041b2:	48a50513          	addi	a0,a0,1162 # 80006638 <userret+0x5a8>
    800041b6:	ffffc097          	auipc	ra,0xffffc
    800041ba:	398080e7          	jalr	920(ra) # 8000054e <panic>

00000000800041be <fileclose>:

/* Close file f.  (Decrement ref count, close when reaches 0.) */
void
fileclose(struct file *f)
{
    800041be:	7139                	addi	sp,sp,-64
    800041c0:	fc06                	sd	ra,56(sp)
    800041c2:	f822                	sd	s0,48(sp)
    800041c4:	f426                	sd	s1,40(sp)
    800041c6:	f04a                	sd	s2,32(sp)
    800041c8:	ec4e                	sd	s3,24(sp)
    800041ca:	e852                	sd	s4,16(sp)
    800041cc:	e456                	sd	s5,8(sp)
    800041ce:	0080                	addi	s0,sp,64
    800041d0:	84aa                	mv	s1,a0
  struct file ff;

  acquire(&ftable.lock);
    800041d2:	0001c517          	auipc	a0,0x1c
    800041d6:	70e50513          	addi	a0,a0,1806 # 800208e0 <ftable>
    800041da:	ffffd097          	auipc	ra,0xffffd
    800041de:	8f4080e7          	jalr	-1804(ra) # 80000ace <acquire>
  if(f->ref < 1)
    800041e2:	40dc                	lw	a5,4(s1)
    800041e4:	06f05163          	blez	a5,80004246 <fileclose+0x88>
    panic("fileclose");
  if(--f->ref > 0){
    800041e8:	37fd                	addiw	a5,a5,-1
    800041ea:	0007871b          	sext.w	a4,a5
    800041ee:	c0dc                	sw	a5,4(s1)
    800041f0:	06e04363          	bgtz	a4,80004256 <fileclose+0x98>
    release(&ftable.lock);
    return;
  }
  ff = *f;
    800041f4:	0004a903          	lw	s2,0(s1)
    800041f8:	0094ca83          	lbu	s5,9(s1)
    800041fc:	0104ba03          	ld	s4,16(s1)
    80004200:	0184b983          	ld	s3,24(s1)
  f->ref = 0;
    80004204:	0004a223          	sw	zero,4(s1)
  f->type = FD_NONE;
    80004208:	0004a023          	sw	zero,0(s1)
  release(&ftable.lock);
    8000420c:	0001c517          	auipc	a0,0x1c
    80004210:	6d450513          	addi	a0,a0,1748 # 800208e0 <ftable>
    80004214:	ffffd097          	auipc	ra,0xffffd
    80004218:	90e080e7          	jalr	-1778(ra) # 80000b22 <release>

  if(ff.type == FD_PIPE){
    8000421c:	4785                	li	a5,1
    8000421e:	04f90d63          	beq	s2,a5,80004278 <fileclose+0xba>
    pipeclose(ff.pipe, ff.writable);
  } else if(ff.type == FD_INODE || ff.type == FD_DEVICE){
    80004222:	3979                	addiw	s2,s2,-2
    80004224:	4785                	li	a5,1
    80004226:	0527e063          	bltu	a5,s2,80004266 <fileclose+0xa8>
    begin_op();
    8000422a:	00000097          	auipc	ra,0x0
    8000422e:	ac2080e7          	jalr	-1342(ra) # 80003cec <begin_op>
    iput(ff.ip);
    80004232:	854e                	mv	a0,s3
    80004234:	fffff097          	auipc	ra,0xfffff
    80004238:	22e080e7          	jalr	558(ra) # 80003462 <iput>
    end_op();
    8000423c:	00000097          	auipc	ra,0x0
    80004240:	b30080e7          	jalr	-1232(ra) # 80003d6c <end_op>
    80004244:	a00d                	j	80004266 <fileclose+0xa8>
    panic("fileclose");
    80004246:	00002517          	auipc	a0,0x2
    8000424a:	3fa50513          	addi	a0,a0,1018 # 80006640 <userret+0x5b0>
    8000424e:	ffffc097          	auipc	ra,0xffffc
    80004252:	300080e7          	jalr	768(ra) # 8000054e <panic>
    release(&ftable.lock);
    80004256:	0001c517          	auipc	a0,0x1c
    8000425a:	68a50513          	addi	a0,a0,1674 # 800208e0 <ftable>
    8000425e:	ffffd097          	auipc	ra,0xffffd
    80004262:	8c4080e7          	jalr	-1852(ra) # 80000b22 <release>
  }
}
    80004266:	70e2                	ld	ra,56(sp)
    80004268:	7442                	ld	s0,48(sp)
    8000426a:	74a2                	ld	s1,40(sp)
    8000426c:	7902                	ld	s2,32(sp)
    8000426e:	69e2                	ld	s3,24(sp)
    80004270:	6a42                	ld	s4,16(sp)
    80004272:	6aa2                	ld	s5,8(sp)
    80004274:	6121                	addi	sp,sp,64
    80004276:	8082                	ret
    pipeclose(ff.pipe, ff.writable);
    80004278:	85d6                	mv	a1,s5
    8000427a:	8552                	mv	a0,s4
    8000427c:	00000097          	auipc	ra,0x0
    80004280:	34a080e7          	jalr	842(ra) # 800045c6 <pipeclose>
    80004284:	b7cd                	j	80004266 <fileclose+0xa8>

0000000080004286 <filestat>:

/* Get metadata about file f. */
/* addr is a user virtual address, pointing to a struct stat. */
int
filestat(struct file *f, uint64 addr)
{
    80004286:	715d                	addi	sp,sp,-80
    80004288:	e486                	sd	ra,72(sp)
    8000428a:	e0a2                	sd	s0,64(sp)
    8000428c:	fc26                	sd	s1,56(sp)
    8000428e:	f84a                	sd	s2,48(sp)
    80004290:	f44e                	sd	s3,40(sp)
    80004292:	0880                	addi	s0,sp,80
    80004294:	84aa                	mv	s1,a0
    80004296:	89ae                	mv	s3,a1
  struct proc *p = myproc();
    80004298:	ffffd097          	auipc	ra,0xffffd
    8000429c:	544080e7          	jalr	1348(ra) # 800017dc <myproc>
  struct stat st;
  
  if(f->type == FD_INODE || f->type == FD_DEVICE){
    800042a0:	409c                	lw	a5,0(s1)
    800042a2:	37f9                	addiw	a5,a5,-2
    800042a4:	4705                	li	a4,1
    800042a6:	04f76763          	bltu	a4,a5,800042f4 <filestat+0x6e>
    800042aa:	892a                	mv	s2,a0
    ilock(f->ip);
    800042ac:	6c88                	ld	a0,24(s1)
    800042ae:	fffff097          	auipc	ra,0xfffff
    800042b2:	0a6080e7          	jalr	166(ra) # 80003354 <ilock>
    stati(f->ip, &st);
    800042b6:	fb840593          	addi	a1,s0,-72
    800042ba:	6c88                	ld	a0,24(s1)
    800042bc:	fffff097          	auipc	ra,0xfffff
    800042c0:	2fe080e7          	jalr	766(ra) # 800035ba <stati>
    iunlock(f->ip);
    800042c4:	6c88                	ld	a0,24(s1)
    800042c6:	fffff097          	auipc	ra,0xfffff
    800042ca:	150080e7          	jalr	336(ra) # 80003416 <iunlock>
    if(copyout(p->pagetable, addr, (char *)&st, sizeof(st)) < 0)
    800042ce:	46e1                	li	a3,24
    800042d0:	fb840613          	addi	a2,s0,-72
    800042d4:	85ce                	mv	a1,s3
    800042d6:	04893503          	ld	a0,72(s2)
    800042da:	ffffd097          	auipc	ra,0xffffd
    800042de:	228080e7          	jalr	552(ra) # 80001502 <copyout>
    800042e2:	41f5551b          	sraiw	a0,a0,0x1f
      return -1;
    return 0;
  }
  return -1;
}
    800042e6:	60a6                	ld	ra,72(sp)
    800042e8:	6406                	ld	s0,64(sp)
    800042ea:	74e2                	ld	s1,56(sp)
    800042ec:	7942                	ld	s2,48(sp)
    800042ee:	79a2                	ld	s3,40(sp)
    800042f0:	6161                	addi	sp,sp,80
    800042f2:	8082                	ret
  return -1;
    800042f4:	557d                	li	a0,-1
    800042f6:	bfc5                	j	800042e6 <filestat+0x60>

00000000800042f8 <fileread>:

/* Read from file f. */
/* addr is a user virtual address. */
int
fileread(struct file *f, uint64 addr, int n)
{
    800042f8:	7179                	addi	sp,sp,-48
    800042fa:	f406                	sd	ra,40(sp)
    800042fc:	f022                	sd	s0,32(sp)
    800042fe:	ec26                	sd	s1,24(sp)
    80004300:	e84a                	sd	s2,16(sp)
    80004302:	e44e                	sd	s3,8(sp)
    80004304:	1800                	addi	s0,sp,48
  int r = 0;

  if(f->readable == 0)
    80004306:	00854783          	lbu	a5,8(a0)
    8000430a:	cfc1                	beqz	a5,800043a2 <fileread+0xaa>
    8000430c:	84aa                	mv	s1,a0
    8000430e:	89ae                	mv	s3,a1
    80004310:	8932                	mv	s2,a2
    return -1;

  if(f->type == FD_PIPE){
    80004312:	411c                	lw	a5,0(a0)
    80004314:	4705                	li	a4,1
    80004316:	04e78963          	beq	a5,a4,80004368 <fileread+0x70>
    r = piperead(f->pipe, addr, n);
  } else if(f->type == FD_DEVICE){
    8000431a:	470d                	li	a4,3
    8000431c:	04e78d63          	beq	a5,a4,80004376 <fileread+0x7e>
    r = devsw[f->major].read(1, addr, n);
  } else if(f->type == FD_INODE){
    80004320:	4709                	li	a4,2
    80004322:	06e79863          	bne	a5,a4,80004392 <fileread+0x9a>
    ilock(f->ip);
    80004326:	6d08                	ld	a0,24(a0)
    80004328:	fffff097          	auipc	ra,0xfffff
    8000432c:	02c080e7          	jalr	44(ra) # 80003354 <ilock>
    if((r = readi(f->ip, 1, addr, f->off, n)) > 0)
    80004330:	874a                	mv	a4,s2
    80004332:	5094                	lw	a3,32(s1)
    80004334:	864e                	mv	a2,s3
    80004336:	4585                	li	a1,1
    80004338:	6c88                	ld	a0,24(s1)
    8000433a:	fffff097          	auipc	ra,0xfffff
    8000433e:	2aa080e7          	jalr	682(ra) # 800035e4 <readi>
    80004342:	892a                	mv	s2,a0
    80004344:	00a05563          	blez	a0,8000434e <fileread+0x56>
      f->off += r;
    80004348:	509c                	lw	a5,32(s1)
    8000434a:	9fa9                	addw	a5,a5,a0
    8000434c:	d09c                	sw	a5,32(s1)
    iunlock(f->ip);
    8000434e:	6c88                	ld	a0,24(s1)
    80004350:	fffff097          	auipc	ra,0xfffff
    80004354:	0c6080e7          	jalr	198(ra) # 80003416 <iunlock>
  } else {
    panic("fileread");
  }

  return r;
}
    80004358:	854a                	mv	a0,s2
    8000435a:	70a2                	ld	ra,40(sp)
    8000435c:	7402                	ld	s0,32(sp)
    8000435e:	64e2                	ld	s1,24(sp)
    80004360:	6942                	ld	s2,16(sp)
    80004362:	69a2                	ld	s3,8(sp)
    80004364:	6145                	addi	sp,sp,48
    80004366:	8082                	ret
    r = piperead(f->pipe, addr, n);
    80004368:	6908                	ld	a0,16(a0)
    8000436a:	00000097          	auipc	ra,0x0
    8000436e:	3e0080e7          	jalr	992(ra) # 8000474a <piperead>
    80004372:	892a                	mv	s2,a0
    80004374:	b7d5                	j	80004358 <fileread+0x60>
    r = devsw[f->major].read(1, addr, n);
    80004376:	02451783          	lh	a5,36(a0)
    8000437a:	00479713          	slli	a4,a5,0x4
    8000437e:	0001c797          	auipc	a5,0x1c
    80004382:	4c278793          	addi	a5,a5,1218 # 80020840 <devsw>
    80004386:	97ba                	add	a5,a5,a4
    80004388:	639c                	ld	a5,0(a5)
    8000438a:	4505                	li	a0,1
    8000438c:	9782                	jalr	a5
    8000438e:	892a                	mv	s2,a0
    80004390:	b7e1                	j	80004358 <fileread+0x60>
    panic("fileread");
    80004392:	00002517          	auipc	a0,0x2
    80004396:	2be50513          	addi	a0,a0,702 # 80006650 <userret+0x5c0>
    8000439a:	ffffc097          	auipc	ra,0xffffc
    8000439e:	1b4080e7          	jalr	436(ra) # 8000054e <panic>
    return -1;
    800043a2:	597d                	li	s2,-1
    800043a4:	bf55                	j	80004358 <fileread+0x60>

00000000800043a6 <filewrite>:
int
filewrite(struct file *f, uint64 addr, int n)
{
  int r, ret = 0;

  if(f->writable == 0)
    800043a6:	00954783          	lbu	a5,9(a0)
    800043aa:	12078f63          	beqz	a5,800044e8 <filewrite+0x142>
{
    800043ae:	715d                	addi	sp,sp,-80
    800043b0:	e486                	sd	ra,72(sp)
    800043b2:	e0a2                	sd	s0,64(sp)
    800043b4:	fc26                	sd	s1,56(sp)
    800043b6:	f84a                	sd	s2,48(sp)
    800043b8:	f44e                	sd	s3,40(sp)
    800043ba:	f052                	sd	s4,32(sp)
    800043bc:	ec56                	sd	s5,24(sp)
    800043be:	e85a                	sd	s6,16(sp)
    800043c0:	e45e                	sd	s7,8(sp)
    800043c2:	e062                	sd	s8,0(sp)
    800043c4:	0880                	addi	s0,sp,80
    800043c6:	892a                	mv	s2,a0
    800043c8:	8aae                	mv	s5,a1
    800043ca:	8a32                	mv	s4,a2
    return -1;

  if(f->type == FD_PIPE){
    800043cc:	411c                	lw	a5,0(a0)
    800043ce:	4705                	li	a4,1
    800043d0:	02e78263          	beq	a5,a4,800043f4 <filewrite+0x4e>
    ret = pipewrite(f->pipe, addr, n);
  } else if(f->type == FD_DEVICE){
    800043d4:	470d                	li	a4,3
    800043d6:	02e78563          	beq	a5,a4,80004400 <filewrite+0x5a>
    ret = devsw[f->major].write(1, addr, n);
  } else if(f->type == FD_INODE){
    800043da:	4709                	li	a4,2
    800043dc:	0ee79e63          	bne	a5,a4,800044d8 <filewrite+0x132>
    /* and 2 blocks of slop for non-aligned writes. */
    /* this really belongs lower down, since writei() */
    /* might be writing a device like the console. */
    int max = ((MAXOPBLOCKS-1-1-2) / 2) * BSIZE;
    int i = 0;
    while(i < n){
    800043e0:	0ec05863          	blez	a2,800044d0 <filewrite+0x12a>
    int i = 0;
    800043e4:	4981                	li	s3,0
    800043e6:	6b05                	lui	s6,0x1
    800043e8:	c00b0b13          	addi	s6,s6,-1024 # c00 <_entry-0x7ffff400>
    800043ec:	6b85                	lui	s7,0x1
    800043ee:	c00b8b9b          	addiw	s7,s7,-1024
    800043f2:	a061                	j	8000447a <filewrite+0xd4>
    ret = pipewrite(f->pipe, addr, n);
    800043f4:	6908                	ld	a0,16(a0)
    800043f6:	00000097          	auipc	ra,0x0
    800043fa:	240080e7          	jalr	576(ra) # 80004636 <pipewrite>
    800043fe:	a06d                	j	800044a8 <filewrite+0x102>
    ret = devsw[f->major].write(1, addr, n);
    80004400:	02451783          	lh	a5,36(a0)
    80004404:	00479713          	slli	a4,a5,0x4
    80004408:	0001c797          	auipc	a5,0x1c
    8000440c:	43878793          	addi	a5,a5,1080 # 80020840 <devsw>
    80004410:	97ba                	add	a5,a5,a4
    80004412:	679c                	ld	a5,8(a5)
    80004414:	4505                	li	a0,1
    80004416:	9782                	jalr	a5
    80004418:	a841                	j	800044a8 <filewrite+0x102>
    8000441a:	00048c1b          	sext.w	s8,s1
      int n1 = n - i;
      if(n1 > max)
        n1 = max;

      begin_op();
    8000441e:	00000097          	auipc	ra,0x0
    80004422:	8ce080e7          	jalr	-1842(ra) # 80003cec <begin_op>
      ilock(f->ip);
    80004426:	01893503          	ld	a0,24(s2)
    8000442a:	fffff097          	auipc	ra,0xfffff
    8000442e:	f2a080e7          	jalr	-214(ra) # 80003354 <ilock>
      if ((r = writei(f->ip, 1, addr + i, f->off, n1)) > 0)
    80004432:	8762                	mv	a4,s8
    80004434:	02092683          	lw	a3,32(s2)
    80004438:	01598633          	add	a2,s3,s5
    8000443c:	4585                	li	a1,1
    8000443e:	01893503          	ld	a0,24(s2)
    80004442:	fffff097          	auipc	ra,0xfffff
    80004446:	296080e7          	jalr	662(ra) # 800036d8 <writei>
    8000444a:	84aa                	mv	s1,a0
    8000444c:	02a05f63          	blez	a0,8000448a <filewrite+0xe4>
        f->off += r;
    80004450:	02092783          	lw	a5,32(s2)
    80004454:	9fa9                	addw	a5,a5,a0
    80004456:	02f92023          	sw	a5,32(s2)
      iunlock(f->ip);
    8000445a:	01893503          	ld	a0,24(s2)
    8000445e:	fffff097          	auipc	ra,0xfffff
    80004462:	fb8080e7          	jalr	-72(ra) # 80003416 <iunlock>
      end_op();
    80004466:	00000097          	auipc	ra,0x0
    8000446a:	906080e7          	jalr	-1786(ra) # 80003d6c <end_op>

      if(r < 0)
        break;
      if(r != n1)
    8000446e:	049c1963          	bne	s8,s1,800044c0 <filewrite+0x11a>
        panic("short filewrite");
      i += r;
    80004472:	013489bb          	addw	s3,s1,s3
    while(i < n){
    80004476:	0349d663          	bge	s3,s4,800044a2 <filewrite+0xfc>
      int n1 = n - i;
    8000447a:	413a07bb          	subw	a5,s4,s3
      if(n1 > max)
    8000447e:	84be                	mv	s1,a5
    80004480:	2781                	sext.w	a5,a5
    80004482:	f8fb5ce3          	bge	s6,a5,8000441a <filewrite+0x74>
    80004486:	84de                	mv	s1,s7
    80004488:	bf49                	j	8000441a <filewrite+0x74>
      iunlock(f->ip);
    8000448a:	01893503          	ld	a0,24(s2)
    8000448e:	fffff097          	auipc	ra,0xfffff
    80004492:	f88080e7          	jalr	-120(ra) # 80003416 <iunlock>
      end_op();
    80004496:	00000097          	auipc	ra,0x0
    8000449a:	8d6080e7          	jalr	-1834(ra) # 80003d6c <end_op>
      if(r < 0)
    8000449e:	fc04d8e3          	bgez	s1,8000446e <filewrite+0xc8>
    }
    ret = (i == n ? n : -1);
    800044a2:	8552                	mv	a0,s4
    800044a4:	033a1863          	bne	s4,s3,800044d4 <filewrite+0x12e>
  } else {
    panic("filewrite");
  }

  return ret;
}
    800044a8:	60a6                	ld	ra,72(sp)
    800044aa:	6406                	ld	s0,64(sp)
    800044ac:	74e2                	ld	s1,56(sp)
    800044ae:	7942                	ld	s2,48(sp)
    800044b0:	79a2                	ld	s3,40(sp)
    800044b2:	7a02                	ld	s4,32(sp)
    800044b4:	6ae2                	ld	s5,24(sp)
    800044b6:	6b42                	ld	s6,16(sp)
    800044b8:	6ba2                	ld	s7,8(sp)
    800044ba:	6c02                	ld	s8,0(sp)
    800044bc:	6161                	addi	sp,sp,80
    800044be:	8082                	ret
        panic("short filewrite");
    800044c0:	00002517          	auipc	a0,0x2
    800044c4:	1a050513          	addi	a0,a0,416 # 80006660 <userret+0x5d0>
    800044c8:	ffffc097          	auipc	ra,0xffffc
    800044cc:	086080e7          	jalr	134(ra) # 8000054e <panic>
    int i = 0;
    800044d0:	4981                	li	s3,0
    800044d2:	bfc1                	j	800044a2 <filewrite+0xfc>
    ret = (i == n ? n : -1);
    800044d4:	557d                	li	a0,-1
    800044d6:	bfc9                	j	800044a8 <filewrite+0x102>
    panic("filewrite");
    800044d8:	00002517          	auipc	a0,0x2
    800044dc:	19850513          	addi	a0,a0,408 # 80006670 <userret+0x5e0>
    800044e0:	ffffc097          	auipc	ra,0xffffc
    800044e4:	06e080e7          	jalr	110(ra) # 8000054e <panic>
    return -1;
    800044e8:	557d                	li	a0,-1
}
    800044ea:	8082                	ret

00000000800044ec <pipealloc>:
  int writeopen;  /* write fd is still open */
};

int
pipealloc(struct file **f0, struct file **f1)
{
    800044ec:	7179                	addi	sp,sp,-48
    800044ee:	f406                	sd	ra,40(sp)
    800044f0:	f022                	sd	s0,32(sp)
    800044f2:	ec26                	sd	s1,24(sp)
    800044f4:	e84a                	sd	s2,16(sp)
    800044f6:	e44e                	sd	s3,8(sp)
    800044f8:	e052                	sd	s4,0(sp)
    800044fa:	1800                	addi	s0,sp,48
    800044fc:	84aa                	mv	s1,a0
    800044fe:	8a2e                	mv	s4,a1
  struct pipe *pi;

  pi = 0;
  *f0 = *f1 = 0;
    80004500:	0005b023          	sd	zero,0(a1)
    80004504:	00053023          	sd	zero,0(a0)
  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
    80004508:	00000097          	auipc	ra,0x0
    8000450c:	bfa080e7          	jalr	-1030(ra) # 80004102 <filealloc>
    80004510:	e088                	sd	a0,0(s1)
    80004512:	c551                	beqz	a0,8000459e <pipealloc+0xb2>
    80004514:	00000097          	auipc	ra,0x0
    80004518:	bee080e7          	jalr	-1042(ra) # 80004102 <filealloc>
    8000451c:	00aa3023          	sd	a0,0(s4)
    80004520:	c92d                	beqz	a0,80004592 <pipealloc+0xa6>
    goto bad;
  if((pi = (struct pipe*)kalloc()) == 0)
    80004522:	ffffc097          	auipc	ra,0xffffc
    80004526:	43a080e7          	jalr	1082(ra) # 8000095c <kalloc>
    8000452a:	892a                	mv	s2,a0
    8000452c:	c125                	beqz	a0,8000458c <pipealloc+0xa0>
    goto bad;
  pi->readopen = 1;
    8000452e:	4985                	li	s3,1
    80004530:	23352023          	sw	s3,544(a0)
  pi->writeopen = 1;
    80004534:	23352223          	sw	s3,548(a0)
  pi->nwrite = 0;
    80004538:	20052e23          	sw	zero,540(a0)
  pi->nread = 0;
    8000453c:	20052c23          	sw	zero,536(a0)
  initlock(&pi->lock, "pipe");
    80004540:	00002597          	auipc	a1,0x2
    80004544:	14058593          	addi	a1,a1,320 # 80006680 <userret+0x5f0>
    80004548:	ffffc097          	auipc	ra,0xffffc
    8000454c:	474080e7          	jalr	1140(ra) # 800009bc <initlock>
  (*f0)->type = FD_PIPE;
    80004550:	609c                	ld	a5,0(s1)
    80004552:	0137a023          	sw	s3,0(a5)
  (*f0)->readable = 1;
    80004556:	609c                	ld	a5,0(s1)
    80004558:	01378423          	sb	s3,8(a5)
  (*f0)->writable = 0;
    8000455c:	609c                	ld	a5,0(s1)
    8000455e:	000784a3          	sb	zero,9(a5)
  (*f0)->pipe = pi;
    80004562:	609c                	ld	a5,0(s1)
    80004564:	0127b823          	sd	s2,16(a5)
  (*f1)->type = FD_PIPE;
    80004568:	000a3783          	ld	a5,0(s4)
    8000456c:	0137a023          	sw	s3,0(a5)
  (*f1)->readable = 0;
    80004570:	000a3783          	ld	a5,0(s4)
    80004574:	00078423          	sb	zero,8(a5)
  (*f1)->writable = 1;
    80004578:	000a3783          	ld	a5,0(s4)
    8000457c:	013784a3          	sb	s3,9(a5)
  (*f1)->pipe = pi;
    80004580:	000a3783          	ld	a5,0(s4)
    80004584:	0127b823          	sd	s2,16(a5)
  return 0;
    80004588:	4501                	li	a0,0
    8000458a:	a025                	j	800045b2 <pipealloc+0xc6>

 bad:
  if(pi)
    kfree((char*)pi);
  if(*f0)
    8000458c:	6088                	ld	a0,0(s1)
    8000458e:	e501                	bnez	a0,80004596 <pipealloc+0xaa>
    80004590:	a039                	j	8000459e <pipealloc+0xb2>
    80004592:	6088                	ld	a0,0(s1)
    80004594:	c51d                	beqz	a0,800045c2 <pipealloc+0xd6>
    fileclose(*f0);
    80004596:	00000097          	auipc	ra,0x0
    8000459a:	c28080e7          	jalr	-984(ra) # 800041be <fileclose>
  if(*f1)
    8000459e:	000a3783          	ld	a5,0(s4)
    fileclose(*f1);
  return -1;
    800045a2:	557d                	li	a0,-1
  if(*f1)
    800045a4:	c799                	beqz	a5,800045b2 <pipealloc+0xc6>
    fileclose(*f1);
    800045a6:	853e                	mv	a0,a5
    800045a8:	00000097          	auipc	ra,0x0
    800045ac:	c16080e7          	jalr	-1002(ra) # 800041be <fileclose>
  return -1;
    800045b0:	557d                	li	a0,-1
}
    800045b2:	70a2                	ld	ra,40(sp)
    800045b4:	7402                	ld	s0,32(sp)
    800045b6:	64e2                	ld	s1,24(sp)
    800045b8:	6942                	ld	s2,16(sp)
    800045ba:	69a2                	ld	s3,8(sp)
    800045bc:	6a02                	ld	s4,0(sp)
    800045be:	6145                	addi	sp,sp,48
    800045c0:	8082                	ret
  return -1;
    800045c2:	557d                	li	a0,-1
    800045c4:	b7fd                	j	800045b2 <pipealloc+0xc6>

00000000800045c6 <pipeclose>:

void
pipeclose(struct pipe *pi, int writable)
{
    800045c6:	1101                	addi	sp,sp,-32
    800045c8:	ec06                	sd	ra,24(sp)
    800045ca:	e822                	sd	s0,16(sp)
    800045cc:	e426                	sd	s1,8(sp)
    800045ce:	e04a                	sd	s2,0(sp)
    800045d0:	1000                	addi	s0,sp,32
    800045d2:	84aa                	mv	s1,a0
    800045d4:	892e                	mv	s2,a1
  acquire(&pi->lock);
    800045d6:	ffffc097          	auipc	ra,0xffffc
    800045da:	4f8080e7          	jalr	1272(ra) # 80000ace <acquire>
  if(writable){
    800045de:	02090d63          	beqz	s2,80004618 <pipeclose+0x52>
    pi->writeopen = 0;
    800045e2:	2204a223          	sw	zero,548(s1)
    wakeup(&pi->nread);
    800045e6:	21848513          	addi	a0,s1,536
    800045ea:	ffffe097          	auipc	ra,0xffffe
    800045ee:	b14080e7          	jalr	-1260(ra) # 800020fe <wakeup>
  } else {
    pi->readopen = 0;
    wakeup(&pi->nwrite);
  }
  if(pi->readopen == 0 && pi->writeopen == 0){
    800045f2:	2204b783          	ld	a5,544(s1)
    800045f6:	eb95                	bnez	a5,8000462a <pipeclose+0x64>
    release(&pi->lock);
    800045f8:	8526                	mv	a0,s1
    800045fa:	ffffc097          	auipc	ra,0xffffc
    800045fe:	528080e7          	jalr	1320(ra) # 80000b22 <release>
    kfree((char*)pi);
    80004602:	8526                	mv	a0,s1
    80004604:	ffffc097          	auipc	ra,0xffffc
    80004608:	25c080e7          	jalr	604(ra) # 80000860 <kfree>
  } else
    release(&pi->lock);
}
    8000460c:	60e2                	ld	ra,24(sp)
    8000460e:	6442                	ld	s0,16(sp)
    80004610:	64a2                	ld	s1,8(sp)
    80004612:	6902                	ld	s2,0(sp)
    80004614:	6105                	addi	sp,sp,32
    80004616:	8082                	ret
    pi->readopen = 0;
    80004618:	2204a023          	sw	zero,544(s1)
    wakeup(&pi->nwrite);
    8000461c:	21c48513          	addi	a0,s1,540
    80004620:	ffffe097          	auipc	ra,0xffffe
    80004624:	ade080e7          	jalr	-1314(ra) # 800020fe <wakeup>
    80004628:	b7e9                	j	800045f2 <pipeclose+0x2c>
    release(&pi->lock);
    8000462a:	8526                	mv	a0,s1
    8000462c:	ffffc097          	auipc	ra,0xffffc
    80004630:	4f6080e7          	jalr	1270(ra) # 80000b22 <release>
}
    80004634:	bfe1                	j	8000460c <pipeclose+0x46>

0000000080004636 <pipewrite>:

int
pipewrite(struct pipe *pi, uint64 addr, int n)
{
    80004636:	7159                	addi	sp,sp,-112
    80004638:	f486                	sd	ra,104(sp)
    8000463a:	f0a2                	sd	s0,96(sp)
    8000463c:	eca6                	sd	s1,88(sp)
    8000463e:	e8ca                	sd	s2,80(sp)
    80004640:	e4ce                	sd	s3,72(sp)
    80004642:	e0d2                	sd	s4,64(sp)
    80004644:	fc56                	sd	s5,56(sp)
    80004646:	f85a                	sd	s6,48(sp)
    80004648:	f45e                	sd	s7,40(sp)
    8000464a:	f062                	sd	s8,32(sp)
    8000464c:	ec66                	sd	s9,24(sp)
    8000464e:	1880                	addi	s0,sp,112
    80004650:	84aa                	mv	s1,a0
    80004652:	8b2e                	mv	s6,a1
    80004654:	8ab2                	mv	s5,a2
  int i;
  char ch;
  struct proc *pr = myproc();
    80004656:	ffffd097          	auipc	ra,0xffffd
    8000465a:	186080e7          	jalr	390(ra) # 800017dc <myproc>
    8000465e:	8c2a                	mv	s8,a0

  acquire(&pi->lock);
    80004660:	8526                	mv	a0,s1
    80004662:	ffffc097          	auipc	ra,0xffffc
    80004666:	46c080e7          	jalr	1132(ra) # 80000ace <acquire>
  for(i = 0; i < n; i++){
    8000466a:	0b505063          	blez	s5,8000470a <pipewrite+0xd4>
    8000466e:	8926                	mv	s2,s1
    80004670:	fffa8b9b          	addiw	s7,s5,-1
    80004674:	1b82                	slli	s7,s7,0x20
    80004676:	020bdb93          	srli	s7,s7,0x20
    8000467a:	001b0793          	addi	a5,s6,1
    8000467e:	9bbe                	add	s7,s7,a5
    while(pi->nwrite == pi->nread + PIPESIZE){  /*DOC: pipewrite-full */
      if(pi->readopen == 0 || myproc()->killed){
        release(&pi->lock);
        return -1;
      }
      wakeup(&pi->nread);
    80004680:	21848a13          	addi	s4,s1,536
      sleep(&pi->nwrite, &pi->lock);
    80004684:	21c48993          	addi	s3,s1,540
    }
    if(copyin(pr->pagetable, &ch, addr + i, 1) == -1)
    80004688:	5cfd                	li	s9,-1
    while(pi->nwrite == pi->nread + PIPESIZE){  /*DOC: pipewrite-full */
    8000468a:	2184a783          	lw	a5,536(s1)
    8000468e:	21c4a703          	lw	a4,540(s1)
    80004692:	2007879b          	addiw	a5,a5,512
    80004696:	02f71e63          	bne	a4,a5,800046d2 <pipewrite+0x9c>
      if(pi->readopen == 0 || myproc()->killed){
    8000469a:	2204a783          	lw	a5,544(s1)
    8000469e:	c3d9                	beqz	a5,80004724 <pipewrite+0xee>
    800046a0:	ffffd097          	auipc	ra,0xffffd
    800046a4:	13c080e7          	jalr	316(ra) # 800017dc <myproc>
    800046a8:	591c                	lw	a5,48(a0)
    800046aa:	efad                	bnez	a5,80004724 <pipewrite+0xee>
      wakeup(&pi->nread);
    800046ac:	8552                	mv	a0,s4
    800046ae:	ffffe097          	auipc	ra,0xffffe
    800046b2:	a50080e7          	jalr	-1456(ra) # 800020fe <wakeup>
      sleep(&pi->nwrite, &pi->lock);
    800046b6:	85ca                	mv	a1,s2
    800046b8:	854e                	mv	a0,s3
    800046ba:	ffffe097          	auipc	ra,0xffffe
    800046be:	8f8080e7          	jalr	-1800(ra) # 80001fb2 <sleep>
    while(pi->nwrite == pi->nread + PIPESIZE){  /*DOC: pipewrite-full */
    800046c2:	2184a783          	lw	a5,536(s1)
    800046c6:	21c4a703          	lw	a4,540(s1)
    800046ca:	2007879b          	addiw	a5,a5,512
    800046ce:	fcf706e3          	beq	a4,a5,8000469a <pipewrite+0x64>
    if(copyin(pr->pagetable, &ch, addr + i, 1) == -1)
    800046d2:	4685                	li	a3,1
    800046d4:	865a                	mv	a2,s6
    800046d6:	f9f40593          	addi	a1,s0,-97
    800046da:	048c3503          	ld	a0,72(s8)
    800046de:	ffffd097          	auipc	ra,0xffffd
    800046e2:	eb6080e7          	jalr	-330(ra) # 80001594 <copyin>
    800046e6:	03950263          	beq	a0,s9,8000470a <pipewrite+0xd4>
      break;
    pi->data[pi->nwrite++ % PIPESIZE] = ch;
    800046ea:	21c4a783          	lw	a5,540(s1)
    800046ee:	0017871b          	addiw	a4,a5,1
    800046f2:	20e4ae23          	sw	a4,540(s1)
    800046f6:	1ff7f793          	andi	a5,a5,511
    800046fa:	97a6                	add	a5,a5,s1
    800046fc:	f9f44703          	lbu	a4,-97(s0)
    80004700:	00e78c23          	sb	a4,24(a5)
  for(i = 0; i < n; i++){
    80004704:	0b05                	addi	s6,s6,1
    80004706:	f97b12e3          	bne	s6,s7,8000468a <pipewrite+0x54>
  }
  wakeup(&pi->nread);
    8000470a:	21848513          	addi	a0,s1,536
    8000470e:	ffffe097          	auipc	ra,0xffffe
    80004712:	9f0080e7          	jalr	-1552(ra) # 800020fe <wakeup>
  release(&pi->lock);
    80004716:	8526                	mv	a0,s1
    80004718:	ffffc097          	auipc	ra,0xffffc
    8000471c:	40a080e7          	jalr	1034(ra) # 80000b22 <release>
  return n;
    80004720:	8556                	mv	a0,s5
    80004722:	a039                	j	80004730 <pipewrite+0xfa>
        release(&pi->lock);
    80004724:	8526                	mv	a0,s1
    80004726:	ffffc097          	auipc	ra,0xffffc
    8000472a:	3fc080e7          	jalr	1020(ra) # 80000b22 <release>
        return -1;
    8000472e:	557d                	li	a0,-1
}
    80004730:	70a6                	ld	ra,104(sp)
    80004732:	7406                	ld	s0,96(sp)
    80004734:	64e6                	ld	s1,88(sp)
    80004736:	6946                	ld	s2,80(sp)
    80004738:	69a6                	ld	s3,72(sp)
    8000473a:	6a06                	ld	s4,64(sp)
    8000473c:	7ae2                	ld	s5,56(sp)
    8000473e:	7b42                	ld	s6,48(sp)
    80004740:	7ba2                	ld	s7,40(sp)
    80004742:	7c02                	ld	s8,32(sp)
    80004744:	6ce2                	ld	s9,24(sp)
    80004746:	6165                	addi	sp,sp,112
    80004748:	8082                	ret

000000008000474a <piperead>:

int
piperead(struct pipe *pi, uint64 addr, int n)
{
    8000474a:	715d                	addi	sp,sp,-80
    8000474c:	e486                	sd	ra,72(sp)
    8000474e:	e0a2                	sd	s0,64(sp)
    80004750:	fc26                	sd	s1,56(sp)
    80004752:	f84a                	sd	s2,48(sp)
    80004754:	f44e                	sd	s3,40(sp)
    80004756:	f052                	sd	s4,32(sp)
    80004758:	ec56                	sd	s5,24(sp)
    8000475a:	e85a                	sd	s6,16(sp)
    8000475c:	0880                	addi	s0,sp,80
    8000475e:	84aa                	mv	s1,a0
    80004760:	892e                	mv	s2,a1
    80004762:	8a32                	mv	s4,a2
  int i;
  struct proc *pr = myproc();
    80004764:	ffffd097          	auipc	ra,0xffffd
    80004768:	078080e7          	jalr	120(ra) # 800017dc <myproc>
    8000476c:	8aaa                	mv	s5,a0
  char ch;

  acquire(&pi->lock);
    8000476e:	8b26                	mv	s6,s1
    80004770:	8526                	mv	a0,s1
    80004772:	ffffc097          	auipc	ra,0xffffc
    80004776:	35c080e7          	jalr	860(ra) # 80000ace <acquire>
  while(pi->nread == pi->nwrite && pi->writeopen){  /*DOC: pipe-empty */
    8000477a:	2184a703          	lw	a4,536(s1)
    8000477e:	21c4a783          	lw	a5,540(s1)
    if(myproc()->killed){
      release(&pi->lock);
      return -1;
    }
    sleep(&pi->nread, &pi->lock); /*DOC: piperead-sleep */
    80004782:	21848993          	addi	s3,s1,536
  while(pi->nread == pi->nwrite && pi->writeopen){  /*DOC: pipe-empty */
    80004786:	02f71763          	bne	a4,a5,800047b4 <piperead+0x6a>
    8000478a:	2244a783          	lw	a5,548(s1)
    8000478e:	c39d                	beqz	a5,800047b4 <piperead+0x6a>
    if(myproc()->killed){
    80004790:	ffffd097          	auipc	ra,0xffffd
    80004794:	04c080e7          	jalr	76(ra) # 800017dc <myproc>
    80004798:	591c                	lw	a5,48(a0)
    8000479a:	ebc1                	bnez	a5,8000482a <piperead+0xe0>
    sleep(&pi->nread, &pi->lock); /*DOC: piperead-sleep */
    8000479c:	85da                	mv	a1,s6
    8000479e:	854e                	mv	a0,s3
    800047a0:	ffffe097          	auipc	ra,0xffffe
    800047a4:	812080e7          	jalr	-2030(ra) # 80001fb2 <sleep>
  while(pi->nread == pi->nwrite && pi->writeopen){  /*DOC: pipe-empty */
    800047a8:	2184a703          	lw	a4,536(s1)
    800047ac:	21c4a783          	lw	a5,540(s1)
    800047b0:	fcf70de3          	beq	a4,a5,8000478a <piperead+0x40>
  }
  for(i = 0; i < n; i++){  /*DOC: piperead-copy */
    800047b4:	4981                	li	s3,0
    if(pi->nread == pi->nwrite)
      break;
    ch = pi->data[pi->nread++ % PIPESIZE];
    if(copyout(pr->pagetable, addr + i, &ch, 1) == -1)
    800047b6:	5b7d                	li	s6,-1
  for(i = 0; i < n; i++){  /*DOC: piperead-copy */
    800047b8:	05405363          	blez	s4,800047fe <piperead+0xb4>
    if(pi->nread == pi->nwrite)
    800047bc:	2184a783          	lw	a5,536(s1)
    800047c0:	21c4a703          	lw	a4,540(s1)
    800047c4:	02f70d63          	beq	a4,a5,800047fe <piperead+0xb4>
    ch = pi->data[pi->nread++ % PIPESIZE];
    800047c8:	0017871b          	addiw	a4,a5,1
    800047cc:	20e4ac23          	sw	a4,536(s1)
    800047d0:	1ff7f793          	andi	a5,a5,511
    800047d4:	97a6                	add	a5,a5,s1
    800047d6:	0187c783          	lbu	a5,24(a5)
    800047da:	faf40fa3          	sb	a5,-65(s0)
    if(copyout(pr->pagetable, addr + i, &ch, 1) == -1)
    800047de:	4685                	li	a3,1
    800047e0:	fbf40613          	addi	a2,s0,-65
    800047e4:	85ca                	mv	a1,s2
    800047e6:	048ab503          	ld	a0,72(s5)
    800047ea:	ffffd097          	auipc	ra,0xffffd
    800047ee:	d18080e7          	jalr	-744(ra) # 80001502 <copyout>
    800047f2:	01650663          	beq	a0,s6,800047fe <piperead+0xb4>
  for(i = 0; i < n; i++){  /*DOC: piperead-copy */
    800047f6:	2985                	addiw	s3,s3,1
    800047f8:	0905                	addi	s2,s2,1
    800047fa:	fd3a11e3          	bne	s4,s3,800047bc <piperead+0x72>
      break;
  }
  wakeup(&pi->nwrite);  /*DOC: piperead-wakeup */
    800047fe:	21c48513          	addi	a0,s1,540
    80004802:	ffffe097          	auipc	ra,0xffffe
    80004806:	8fc080e7          	jalr	-1796(ra) # 800020fe <wakeup>
  release(&pi->lock);
    8000480a:	8526                	mv	a0,s1
    8000480c:	ffffc097          	auipc	ra,0xffffc
    80004810:	316080e7          	jalr	790(ra) # 80000b22 <release>
  return i;
}
    80004814:	854e                	mv	a0,s3
    80004816:	60a6                	ld	ra,72(sp)
    80004818:	6406                	ld	s0,64(sp)
    8000481a:	74e2                	ld	s1,56(sp)
    8000481c:	7942                	ld	s2,48(sp)
    8000481e:	79a2                	ld	s3,40(sp)
    80004820:	7a02                	ld	s4,32(sp)
    80004822:	6ae2                	ld	s5,24(sp)
    80004824:	6b42                	ld	s6,16(sp)
    80004826:	6161                	addi	sp,sp,80
    80004828:	8082                	ret
      release(&pi->lock);
    8000482a:	8526                	mv	a0,s1
    8000482c:	ffffc097          	auipc	ra,0xffffc
    80004830:	2f6080e7          	jalr	758(ra) # 80000b22 <release>
      return -1;
    80004834:	59fd                	li	s3,-1
    80004836:	bff9                	j	80004814 <piperead+0xca>

0000000080004838 <exec>:

static int loadseg(pde_t *pgdir, uint64 addr, struct inode *ip, uint offset, uint sz);

int
exec(char *path, char **argv)
{
    80004838:	df010113          	addi	sp,sp,-528
    8000483c:	20113423          	sd	ra,520(sp)
    80004840:	20813023          	sd	s0,512(sp)
    80004844:	ffa6                	sd	s1,504(sp)
    80004846:	fbca                	sd	s2,496(sp)
    80004848:	f7ce                	sd	s3,488(sp)
    8000484a:	f3d2                	sd	s4,480(sp)
    8000484c:	efd6                	sd	s5,472(sp)
    8000484e:	ebda                	sd	s6,464(sp)
    80004850:	e7de                	sd	s7,456(sp)
    80004852:	e3e2                	sd	s8,448(sp)
    80004854:	ff66                	sd	s9,440(sp)
    80004856:	fb6a                	sd	s10,432(sp)
    80004858:	f76e                	sd	s11,424(sp)
    8000485a:	0c00                	addi	s0,sp,528
    8000485c:	84aa                	mv	s1,a0
    8000485e:	dea43c23          	sd	a0,-520(s0)
    80004862:	e0b43023          	sd	a1,-512(s0)
  uint64 argc, sz, sp, ustack[MAXARG+1], stackbase;
  struct elfhdr elf;
  struct inode *ip;
  struct proghdr ph;
  pagetable_t pagetable = 0, oldpagetable;
  struct proc *p = myproc();
    80004866:	ffffd097          	auipc	ra,0xffffd
    8000486a:	f76080e7          	jalr	-138(ra) # 800017dc <myproc>
    8000486e:	892a                	mv	s2,a0

  begin_op();
    80004870:	fffff097          	auipc	ra,0xfffff
    80004874:	47c080e7          	jalr	1148(ra) # 80003cec <begin_op>

  if((ip = namei(path)) == 0){
    80004878:	8526                	mv	a0,s1
    8000487a:	fffff097          	auipc	ra,0xfffff
    8000487e:	266080e7          	jalr	614(ra) # 80003ae0 <namei>
    80004882:	c92d                	beqz	a0,800048f4 <exec+0xbc>
    80004884:	84aa                	mv	s1,a0
    end_op();
    return -1;
  }
  ilock(ip);
    80004886:	fffff097          	auipc	ra,0xfffff
    8000488a:	ace080e7          	jalr	-1330(ra) # 80003354 <ilock>

  /* Check ELF header */
  if(readi(ip, 0, (uint64)&elf, 0, sizeof(elf)) != sizeof(elf))
    8000488e:	04000713          	li	a4,64
    80004892:	4681                	li	a3,0
    80004894:	e4840613          	addi	a2,s0,-440
    80004898:	4581                	li	a1,0
    8000489a:	8526                	mv	a0,s1
    8000489c:	fffff097          	auipc	ra,0xfffff
    800048a0:	d48080e7          	jalr	-696(ra) # 800035e4 <readi>
    800048a4:	04000793          	li	a5,64
    800048a8:	00f51a63          	bne	a0,a5,800048bc <exec+0x84>
    goto bad;
  if(elf.magic != ELF_MAGIC)
    800048ac:	e4842703          	lw	a4,-440(s0)
    800048b0:	464c47b7          	lui	a5,0x464c4
    800048b4:	57f78793          	addi	a5,a5,1407 # 464c457f <_entry-0x39b3ba81>
    800048b8:	04f70463          	beq	a4,a5,80004900 <exec+0xc8>

 bad:
  if(pagetable)
    proc_freepagetable(pagetable, sz);
  if(ip){
    iunlockput(ip);
    800048bc:	8526                	mv	a0,s1
    800048be:	fffff097          	auipc	ra,0xfffff
    800048c2:	cd4080e7          	jalr	-812(ra) # 80003592 <iunlockput>
    end_op();
    800048c6:	fffff097          	auipc	ra,0xfffff
    800048ca:	4a6080e7          	jalr	1190(ra) # 80003d6c <end_op>
  }
  return -1;
    800048ce:	557d                	li	a0,-1
}
    800048d0:	20813083          	ld	ra,520(sp)
    800048d4:	20013403          	ld	s0,512(sp)
    800048d8:	74fe                	ld	s1,504(sp)
    800048da:	795e                	ld	s2,496(sp)
    800048dc:	79be                	ld	s3,488(sp)
    800048de:	7a1e                	ld	s4,480(sp)
    800048e0:	6afe                	ld	s5,472(sp)
    800048e2:	6b5e                	ld	s6,464(sp)
    800048e4:	6bbe                	ld	s7,456(sp)
    800048e6:	6c1e                	ld	s8,448(sp)
    800048e8:	7cfa                	ld	s9,440(sp)
    800048ea:	7d5a                	ld	s10,432(sp)
    800048ec:	7dba                	ld	s11,424(sp)
    800048ee:	21010113          	addi	sp,sp,528
    800048f2:	8082                	ret
    end_op();
    800048f4:	fffff097          	auipc	ra,0xfffff
    800048f8:	478080e7          	jalr	1144(ra) # 80003d6c <end_op>
    return -1;
    800048fc:	557d                	li	a0,-1
    800048fe:	bfc9                	j	800048d0 <exec+0x98>
  if((pagetable = proc_pagetable(p)) == 0)
    80004900:	854a                	mv	a0,s2
    80004902:	ffffd097          	auipc	ra,0xffffd
    80004906:	f9e080e7          	jalr	-98(ra) # 800018a0 <proc_pagetable>
    8000490a:	8c2a                	mv	s8,a0
    8000490c:	d945                	beqz	a0,800048bc <exec+0x84>
  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
    8000490e:	e6842983          	lw	s3,-408(s0)
    80004912:	e8045783          	lhu	a5,-384(s0)
    80004916:	c7fd                	beqz	a5,80004a04 <exec+0x1cc>
  sz = 0;
    80004918:	e0043423          	sd	zero,-504(s0)
  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
    8000491c:	4b81                	li	s7,0
    if(ph.vaddr % PGSIZE != 0)
    8000491e:	6b05                	lui	s6,0x1
    80004920:	fffb0793          	addi	a5,s6,-1 # fff <_entry-0x7ffff001>
    80004924:	def43823          	sd	a5,-528(s0)
    80004928:	a0a5                	j	80004990 <exec+0x158>
    panic("loadseg: va must be page aligned");

  for(i = 0; i < sz; i += PGSIZE){
    pa = walkaddr(pagetable, va + i);
    if(pa == 0)
      panic("loadseg: address should exist");
    8000492a:	00002517          	auipc	a0,0x2
    8000492e:	d5e50513          	addi	a0,a0,-674 # 80006688 <userret+0x5f8>
    80004932:	ffffc097          	auipc	ra,0xffffc
    80004936:	c1c080e7          	jalr	-996(ra) # 8000054e <panic>
    if(sz - i < PGSIZE)
      n = sz - i;
    else
      n = PGSIZE;
    if(readi(ip, 0, (uint64)pa, offset+i, n) != n)
    8000493a:	8756                	mv	a4,s5
    8000493c:	012d86bb          	addw	a3,s11,s2
    80004940:	4581                	li	a1,0
    80004942:	8526                	mv	a0,s1
    80004944:	fffff097          	auipc	ra,0xfffff
    80004948:	ca0080e7          	jalr	-864(ra) # 800035e4 <readi>
    8000494c:	2501                	sext.w	a0,a0
    8000494e:	10aa9163          	bne	s5,a0,80004a50 <exec+0x218>
  for(i = 0; i < sz; i += PGSIZE){
    80004952:	6785                	lui	a5,0x1
    80004954:	0127893b          	addw	s2,a5,s2
    80004958:	77fd                	lui	a5,0xfffff
    8000495a:	01478a3b          	addw	s4,a5,s4
    8000495e:	03997263          	bgeu	s2,s9,80004982 <exec+0x14a>
    pa = walkaddr(pagetable, va + i);
    80004962:	02091593          	slli	a1,s2,0x20
    80004966:	9181                	srli	a1,a1,0x20
    80004968:	95ea                	add	a1,a1,s10
    8000496a:	8562                	mv	a0,s8
    8000496c:	ffffc097          	auipc	ra,0xffffc
    80004970:	5e4080e7          	jalr	1508(ra) # 80000f50 <walkaddr>
    80004974:	862a                	mv	a2,a0
    if(pa == 0)
    80004976:	d955                	beqz	a0,8000492a <exec+0xf2>
      n = PGSIZE;
    80004978:	8ada                	mv	s5,s6
    if(sz - i < PGSIZE)
    8000497a:	fd6a70e3          	bgeu	s4,s6,8000493a <exec+0x102>
      n = sz - i;
    8000497e:	8ad2                	mv	s5,s4
    80004980:	bf6d                	j	8000493a <exec+0x102>
  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
    80004982:	2b85                	addiw	s7,s7,1
    80004984:	0389899b          	addiw	s3,s3,56
    80004988:	e8045783          	lhu	a5,-384(s0)
    8000498c:	06fbde63          	bge	s7,a5,80004a08 <exec+0x1d0>
    if(readi(ip, 0, (uint64)&ph, off, sizeof(ph)) != sizeof(ph))
    80004990:	2981                	sext.w	s3,s3
    80004992:	03800713          	li	a4,56
    80004996:	86ce                	mv	a3,s3
    80004998:	e1040613          	addi	a2,s0,-496
    8000499c:	4581                	li	a1,0
    8000499e:	8526                	mv	a0,s1
    800049a0:	fffff097          	auipc	ra,0xfffff
    800049a4:	c44080e7          	jalr	-956(ra) # 800035e4 <readi>
    800049a8:	03800793          	li	a5,56
    800049ac:	0af51263          	bne	a0,a5,80004a50 <exec+0x218>
    if(ph.type != ELF_PROG_LOAD)
    800049b0:	e1042783          	lw	a5,-496(s0)
    800049b4:	4705                	li	a4,1
    800049b6:	fce796e3          	bne	a5,a4,80004982 <exec+0x14a>
    if(ph.memsz < ph.filesz)
    800049ba:	e3843603          	ld	a2,-456(s0)
    800049be:	e3043783          	ld	a5,-464(s0)
    800049c2:	08f66763          	bltu	a2,a5,80004a50 <exec+0x218>
    if(ph.vaddr + ph.memsz < ph.vaddr)
    800049c6:	e2043783          	ld	a5,-480(s0)
    800049ca:	963e                	add	a2,a2,a5
    800049cc:	08f66263          	bltu	a2,a5,80004a50 <exec+0x218>
    if((sz = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz)) == 0)
    800049d0:	e0843583          	ld	a1,-504(s0)
    800049d4:	8562                	mv	a0,s8
    800049d6:	ffffd097          	auipc	ra,0xffffd
    800049da:	952080e7          	jalr	-1710(ra) # 80001328 <uvmalloc>
    800049de:	e0a43423          	sd	a0,-504(s0)
    800049e2:	c53d                	beqz	a0,80004a50 <exec+0x218>
    if(ph.vaddr % PGSIZE != 0)
    800049e4:	e2043d03          	ld	s10,-480(s0)
    800049e8:	df043783          	ld	a5,-528(s0)
    800049ec:	00fd77b3          	and	a5,s10,a5
    800049f0:	e3a5                	bnez	a5,80004a50 <exec+0x218>
    if(loadseg(pagetable, ph.vaddr, ip, ph.off, ph.filesz) < 0)
    800049f2:	e1842d83          	lw	s11,-488(s0)
    800049f6:	e3042c83          	lw	s9,-464(s0)
  for(i = 0; i < sz; i += PGSIZE){
    800049fa:	f80c84e3          	beqz	s9,80004982 <exec+0x14a>
    800049fe:	8a66                	mv	s4,s9
    80004a00:	4901                	li	s2,0
    80004a02:	b785                	j	80004962 <exec+0x12a>
  sz = 0;
    80004a04:	e0043423          	sd	zero,-504(s0)
  iunlockput(ip);
    80004a08:	8526                	mv	a0,s1
    80004a0a:	fffff097          	auipc	ra,0xfffff
    80004a0e:	b88080e7          	jalr	-1144(ra) # 80003592 <iunlockput>
  end_op();
    80004a12:	fffff097          	auipc	ra,0xfffff
    80004a16:	35a080e7          	jalr	858(ra) # 80003d6c <end_op>
  p = myproc();
    80004a1a:	ffffd097          	auipc	ra,0xffffd
    80004a1e:	dc2080e7          	jalr	-574(ra) # 800017dc <myproc>
    80004a22:	8baa                	mv	s7,a0
  uint64 oldsz = p->sz;
    80004a24:	04053d03          	ld	s10,64(a0)
  sz = PGROUNDUP(sz);
    80004a28:	6585                	lui	a1,0x1
    80004a2a:	15fd                	addi	a1,a1,-1
    80004a2c:	e0843783          	ld	a5,-504(s0)
    80004a30:	00b78b33          	add	s6,a5,a1
    80004a34:	75fd                	lui	a1,0xfffff
    80004a36:	00bb75b3          	and	a1,s6,a1
  if((sz = uvmalloc(pagetable, sz, sz + 2*PGSIZE)) == 0)
    80004a3a:	6609                	lui	a2,0x2
    80004a3c:	962e                	add	a2,a2,a1
    80004a3e:	8562                	mv	a0,s8
    80004a40:	ffffd097          	auipc	ra,0xffffd
    80004a44:	8e8080e7          	jalr	-1816(ra) # 80001328 <uvmalloc>
    80004a48:	e0a43423          	sd	a0,-504(s0)
  ip = 0;
    80004a4c:	4481                	li	s1,0
  if((sz = uvmalloc(pagetable, sz, sz + 2*PGSIZE)) == 0)
    80004a4e:	ed01                	bnez	a0,80004a66 <exec+0x22e>
    proc_freepagetable(pagetable, sz);
    80004a50:	e0843583          	ld	a1,-504(s0)
    80004a54:	8562                	mv	a0,s8
    80004a56:	ffffd097          	auipc	ra,0xffffd
    80004a5a:	f4a080e7          	jalr	-182(ra) # 800019a0 <proc_freepagetable>
  if(ip){
    80004a5e:	e4049fe3          	bnez	s1,800048bc <exec+0x84>
  return -1;
    80004a62:	557d                	li	a0,-1
    80004a64:	b5b5                	j	800048d0 <exec+0x98>
  uvmclear(pagetable, sz-2*PGSIZE);
    80004a66:	75f9                	lui	a1,0xffffe
    80004a68:	84aa                	mv	s1,a0
    80004a6a:	95aa                	add	a1,a1,a0
    80004a6c:	8562                	mv	a0,s8
    80004a6e:	ffffd097          	auipc	ra,0xffffd
    80004a72:	a62080e7          	jalr	-1438(ra) # 800014d0 <uvmclear>
  stackbase = sp - PGSIZE;
    80004a76:	7afd                	lui	s5,0xfffff
    80004a78:	9aa6                	add	s5,s5,s1
  for(argc = 0; argv[argc]; argc++) {
    80004a7a:	e0043783          	ld	a5,-512(s0)
    80004a7e:	6388                	ld	a0,0(a5)
    80004a80:	c135                	beqz	a0,80004ae4 <exec+0x2ac>
    80004a82:	e8840993          	addi	s3,s0,-376
    80004a86:	f8840c93          	addi	s9,s0,-120
    80004a8a:	4901                	li	s2,0
    sp -= strlen(argv[argc]) + 1;
    80004a8c:	ffffc097          	auipc	ra,0xffffc
    80004a90:	266080e7          	jalr	614(ra) # 80000cf2 <strlen>
    80004a94:	2505                	addiw	a0,a0,1
    80004a96:	8c89                	sub	s1,s1,a0
    sp -= sp % 16; /* riscv sp must be 16-byte aligned */
    80004a98:	98c1                	andi	s1,s1,-16
    if(sp < stackbase)
    80004a9a:	0f54ea63          	bltu	s1,s5,80004b8e <exec+0x356>
    if(copyout(pagetable, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
    80004a9e:	e0043b03          	ld	s6,-512(s0)
    80004aa2:	000b3a03          	ld	s4,0(s6)
    80004aa6:	8552                	mv	a0,s4
    80004aa8:	ffffc097          	auipc	ra,0xffffc
    80004aac:	24a080e7          	jalr	586(ra) # 80000cf2 <strlen>
    80004ab0:	0015069b          	addiw	a3,a0,1
    80004ab4:	8652                	mv	a2,s4
    80004ab6:	85a6                	mv	a1,s1
    80004ab8:	8562                	mv	a0,s8
    80004aba:	ffffd097          	auipc	ra,0xffffd
    80004abe:	a48080e7          	jalr	-1464(ra) # 80001502 <copyout>
    80004ac2:	0c054863          	bltz	a0,80004b92 <exec+0x35a>
    ustack[argc] = sp;
    80004ac6:	0099b023          	sd	s1,0(s3)
  for(argc = 0; argv[argc]; argc++) {
    80004aca:	0905                	addi	s2,s2,1
    80004acc:	008b0793          	addi	a5,s6,8
    80004ad0:	e0f43023          	sd	a5,-512(s0)
    80004ad4:	008b3503          	ld	a0,8(s6)
    80004ad8:	c909                	beqz	a0,80004aea <exec+0x2b2>
    if(argc >= MAXARG)
    80004ada:	09a1                	addi	s3,s3,8
    80004adc:	fb3c98e3          	bne	s9,s3,80004a8c <exec+0x254>
  ip = 0;
    80004ae0:	4481                	li	s1,0
    80004ae2:	b7bd                	j	80004a50 <exec+0x218>
  sp = sz;
    80004ae4:	e0843483          	ld	s1,-504(s0)
  for(argc = 0; argv[argc]; argc++) {
    80004ae8:	4901                	li	s2,0
  ustack[argc] = 0;
    80004aea:	00391793          	slli	a5,s2,0x3
    80004aee:	f9040713          	addi	a4,s0,-112
    80004af2:	97ba                	add	a5,a5,a4
    80004af4:	ee07bc23          	sd	zero,-264(a5) # ffffffffffffeef8 <ticks+0xffffffff7ffd9ee0>
  sp -= (argc+1) * sizeof(uint64);
    80004af8:	00190693          	addi	a3,s2,1
    80004afc:	068e                	slli	a3,a3,0x3
    80004afe:	8c95                	sub	s1,s1,a3
  sp -= sp % 16;
    80004b00:	ff04f993          	andi	s3,s1,-16
  ip = 0;
    80004b04:	4481                	li	s1,0
  if(sp < stackbase)
    80004b06:	f559e5e3          	bltu	s3,s5,80004a50 <exec+0x218>
  if(copyout(pagetable, sp, (char *)ustack, (argc+1)*sizeof(uint64)) < 0)
    80004b0a:	e8840613          	addi	a2,s0,-376
    80004b0e:	85ce                	mv	a1,s3
    80004b10:	8562                	mv	a0,s8
    80004b12:	ffffd097          	auipc	ra,0xffffd
    80004b16:	9f0080e7          	jalr	-1552(ra) # 80001502 <copyout>
    80004b1a:	06054e63          	bltz	a0,80004b96 <exec+0x35e>
  p->tf->a1 = sp;
    80004b1e:	050bb783          	ld	a5,80(s7) # 1050 <_entry-0x7fffefb0>
    80004b22:	0737bc23          	sd	s3,120(a5)
  for(last=s=path; *s; s++)
    80004b26:	df843783          	ld	a5,-520(s0)
    80004b2a:	0007c703          	lbu	a4,0(a5)
    80004b2e:	cf11                	beqz	a4,80004b4a <exec+0x312>
    80004b30:	0785                	addi	a5,a5,1
    if(*s == '/')
    80004b32:	02f00693          	li	a3,47
    80004b36:	a029                	j	80004b40 <exec+0x308>
  for(last=s=path; *s; s++)
    80004b38:	0785                	addi	a5,a5,1
    80004b3a:	fff7c703          	lbu	a4,-1(a5)
    80004b3e:	c711                	beqz	a4,80004b4a <exec+0x312>
    if(*s == '/')
    80004b40:	fed71ce3          	bne	a4,a3,80004b38 <exec+0x300>
      last = s+1;
    80004b44:	def43c23          	sd	a5,-520(s0)
    80004b48:	bfc5                	j	80004b38 <exec+0x300>
  safestrcpy(p->name, last, sizeof(p->name));
    80004b4a:	4641                	li	a2,16
    80004b4c:	df843583          	ld	a1,-520(s0)
    80004b50:	150b8513          	addi	a0,s7,336
    80004b54:	ffffc097          	auipc	ra,0xffffc
    80004b58:	16c080e7          	jalr	364(ra) # 80000cc0 <safestrcpy>
  oldpagetable = p->pagetable;
    80004b5c:	048bb503          	ld	a0,72(s7)
  p->pagetable = pagetable;
    80004b60:	058bb423          	sd	s8,72(s7)
  p->sz = sz;
    80004b64:	e0843783          	ld	a5,-504(s0)
    80004b68:	04fbb023          	sd	a5,64(s7)
  p->tf->epc = elf.entry;  /* initial program counter = main */
    80004b6c:	050bb783          	ld	a5,80(s7)
    80004b70:	e6043703          	ld	a4,-416(s0)
    80004b74:	ef98                	sd	a4,24(a5)
  p->tf->sp = sp; /* initial stack pointer */
    80004b76:	050bb783          	ld	a5,80(s7)
    80004b7a:	0337b823          	sd	s3,48(a5)
  proc_freepagetable(oldpagetable, oldsz);
    80004b7e:	85ea                	mv	a1,s10
    80004b80:	ffffd097          	auipc	ra,0xffffd
    80004b84:	e20080e7          	jalr	-480(ra) # 800019a0 <proc_freepagetable>
  return argc; /* this ends up in a0, the first argument to main(argc, argv) */
    80004b88:	0009051b          	sext.w	a0,s2
    80004b8c:	b391                	j	800048d0 <exec+0x98>
  ip = 0;
    80004b8e:	4481                	li	s1,0
    80004b90:	b5c1                	j	80004a50 <exec+0x218>
    80004b92:	4481                	li	s1,0
    80004b94:	bd75                	j	80004a50 <exec+0x218>
    80004b96:	4481                	li	s1,0
    80004b98:	bd65                	j	80004a50 <exec+0x218>

0000000080004b9a <argfd>:

/* Fetch the nth word-sized system call argument as a file descriptor */
/* and return both the descriptor and the corresponding struct file. */
static int
argfd(int n, int *pfd, struct file **pf)
{
    80004b9a:	7179                	addi	sp,sp,-48
    80004b9c:	f406                	sd	ra,40(sp)
    80004b9e:	f022                	sd	s0,32(sp)
    80004ba0:	ec26                	sd	s1,24(sp)
    80004ba2:	e84a                	sd	s2,16(sp)
    80004ba4:	1800                	addi	s0,sp,48
    80004ba6:	892e                	mv	s2,a1
    80004ba8:	84b2                	mv	s1,a2
  int fd;
  struct file *f;

  if(argint(n, &fd) < 0)
    80004baa:	fdc40593          	addi	a1,s0,-36
    80004bae:	ffffe097          	auipc	ra,0xffffe
    80004bb2:	c68080e7          	jalr	-920(ra) # 80002816 <argint>
    80004bb6:	04054063          	bltz	a0,80004bf6 <argfd+0x5c>
    return -1;
  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
    80004bba:	fdc42703          	lw	a4,-36(s0)
    80004bbe:	47bd                	li	a5,15
    80004bc0:	02e7ed63          	bltu	a5,a4,80004bfa <argfd+0x60>
    80004bc4:	ffffd097          	auipc	ra,0xffffd
    80004bc8:	c18080e7          	jalr	-1000(ra) # 800017dc <myproc>
    80004bcc:	fdc42703          	lw	a4,-36(s0)
    80004bd0:	01870793          	addi	a5,a4,24
    80004bd4:	078e                	slli	a5,a5,0x3
    80004bd6:	953e                	add	a0,a0,a5
    80004bd8:	651c                	ld	a5,8(a0)
    80004bda:	c395                	beqz	a5,80004bfe <argfd+0x64>
    return -1;
  if(pfd)
    80004bdc:	00090463          	beqz	s2,80004be4 <argfd+0x4a>
    *pfd = fd;
    80004be0:	00e92023          	sw	a4,0(s2)
  if(pf)
    *pf = f;
  return 0;
    80004be4:	4501                	li	a0,0
  if(pf)
    80004be6:	c091                	beqz	s1,80004bea <argfd+0x50>
    *pf = f;
    80004be8:	e09c                	sd	a5,0(s1)
}
    80004bea:	70a2                	ld	ra,40(sp)
    80004bec:	7402                	ld	s0,32(sp)
    80004bee:	64e2                	ld	s1,24(sp)
    80004bf0:	6942                	ld	s2,16(sp)
    80004bf2:	6145                	addi	sp,sp,48
    80004bf4:	8082                	ret
    return -1;
    80004bf6:	557d                	li	a0,-1
    80004bf8:	bfcd                	j	80004bea <argfd+0x50>
    return -1;
    80004bfa:	557d                	li	a0,-1
    80004bfc:	b7fd                	j	80004bea <argfd+0x50>
    80004bfe:	557d                	li	a0,-1
    80004c00:	b7ed                	j	80004bea <argfd+0x50>

0000000080004c02 <fdalloc>:

/* Allocate a file descriptor for the given file. */
/* Takes over file reference from caller on success. */
static int
fdalloc(struct file *f)
{
    80004c02:	1101                	addi	sp,sp,-32
    80004c04:	ec06                	sd	ra,24(sp)
    80004c06:	e822                	sd	s0,16(sp)
    80004c08:	e426                	sd	s1,8(sp)
    80004c0a:	1000                	addi	s0,sp,32
    80004c0c:	84aa                	mv	s1,a0
  int fd;
  struct proc *p = myproc();
    80004c0e:	ffffd097          	auipc	ra,0xffffd
    80004c12:	bce080e7          	jalr	-1074(ra) # 800017dc <myproc>
    80004c16:	862a                	mv	a2,a0

  for(fd = 0; fd < NOFILE; fd++){
    80004c18:	0c850793          	addi	a5,a0,200
    80004c1c:	4501                	li	a0,0
    80004c1e:	46c1                	li	a3,16
    if(p->ofile[fd] == 0){
    80004c20:	6398                	ld	a4,0(a5)
    80004c22:	cb19                	beqz	a4,80004c38 <fdalloc+0x36>
  for(fd = 0; fd < NOFILE; fd++){
    80004c24:	2505                	addiw	a0,a0,1
    80004c26:	07a1                	addi	a5,a5,8
    80004c28:	fed51ce3          	bne	a0,a3,80004c20 <fdalloc+0x1e>
      p->ofile[fd] = f;
      return fd;
    }
  }
  return -1;
    80004c2c:	557d                	li	a0,-1
}
    80004c2e:	60e2                	ld	ra,24(sp)
    80004c30:	6442                	ld	s0,16(sp)
    80004c32:	64a2                	ld	s1,8(sp)
    80004c34:	6105                	addi	sp,sp,32
    80004c36:	8082                	ret
      p->ofile[fd] = f;
    80004c38:	01850793          	addi	a5,a0,24
    80004c3c:	078e                	slli	a5,a5,0x3
    80004c3e:	963e                	add	a2,a2,a5
    80004c40:	e604                	sd	s1,8(a2)
      return fd;
    80004c42:	b7f5                	j	80004c2e <fdalloc+0x2c>

0000000080004c44 <create>:
  return -1;
}

static struct inode*
create(char *path, short type, short major, short minor)
{
    80004c44:	715d                	addi	sp,sp,-80
    80004c46:	e486                	sd	ra,72(sp)
    80004c48:	e0a2                	sd	s0,64(sp)
    80004c4a:	fc26                	sd	s1,56(sp)
    80004c4c:	f84a                	sd	s2,48(sp)
    80004c4e:	f44e                	sd	s3,40(sp)
    80004c50:	f052                	sd	s4,32(sp)
    80004c52:	ec56                	sd	s5,24(sp)
    80004c54:	0880                	addi	s0,sp,80
    80004c56:	89ae                	mv	s3,a1
    80004c58:	8ab2                	mv	s5,a2
    80004c5a:	8a36                	mv	s4,a3
  struct inode *ip, *dp;
  char name[DIRSIZ];

  if((dp = nameiparent(path, name)) == 0)
    80004c5c:	fb040593          	addi	a1,s0,-80
    80004c60:	fffff097          	auipc	ra,0xfffff
    80004c64:	e9e080e7          	jalr	-354(ra) # 80003afe <nameiparent>
    80004c68:	892a                	mv	s2,a0
    80004c6a:	12050e63          	beqz	a0,80004da6 <create+0x162>
    return 0;
  ilock(dp);
    80004c6e:	ffffe097          	auipc	ra,0xffffe
    80004c72:	6e6080e7          	jalr	1766(ra) # 80003354 <ilock>

  if((ip = dirlookup(dp, name, 0)) != 0){
    80004c76:	4601                	li	a2,0
    80004c78:	fb040593          	addi	a1,s0,-80
    80004c7c:	854a                	mv	a0,s2
    80004c7e:	fffff097          	auipc	ra,0xfffff
    80004c82:	b90080e7          	jalr	-1136(ra) # 8000380e <dirlookup>
    80004c86:	84aa                	mv	s1,a0
    80004c88:	c921                	beqz	a0,80004cd8 <create+0x94>
    iunlockput(dp);
    80004c8a:	854a                	mv	a0,s2
    80004c8c:	fffff097          	auipc	ra,0xfffff
    80004c90:	906080e7          	jalr	-1786(ra) # 80003592 <iunlockput>
    ilock(ip);
    80004c94:	8526                	mv	a0,s1
    80004c96:	ffffe097          	auipc	ra,0xffffe
    80004c9a:	6be080e7          	jalr	1726(ra) # 80003354 <ilock>
    if(type == T_FILE && (ip->type == T_FILE || ip->type == T_DEVICE))
    80004c9e:	2981                	sext.w	s3,s3
    80004ca0:	4789                	li	a5,2
    80004ca2:	02f99463          	bne	s3,a5,80004cca <create+0x86>
    80004ca6:	0444d783          	lhu	a5,68(s1)
    80004caa:	37f9                	addiw	a5,a5,-2
    80004cac:	17c2                	slli	a5,a5,0x30
    80004cae:	93c1                	srli	a5,a5,0x30
    80004cb0:	4705                	li	a4,1
    80004cb2:	00f76c63          	bltu	a4,a5,80004cca <create+0x86>
    panic("create: dirlink");

  iunlockput(dp);

  return ip;
}
    80004cb6:	8526                	mv	a0,s1
    80004cb8:	60a6                	ld	ra,72(sp)
    80004cba:	6406                	ld	s0,64(sp)
    80004cbc:	74e2                	ld	s1,56(sp)
    80004cbe:	7942                	ld	s2,48(sp)
    80004cc0:	79a2                	ld	s3,40(sp)
    80004cc2:	7a02                	ld	s4,32(sp)
    80004cc4:	6ae2                	ld	s5,24(sp)
    80004cc6:	6161                	addi	sp,sp,80
    80004cc8:	8082                	ret
    iunlockput(ip);
    80004cca:	8526                	mv	a0,s1
    80004ccc:	fffff097          	auipc	ra,0xfffff
    80004cd0:	8c6080e7          	jalr	-1850(ra) # 80003592 <iunlockput>
    return 0;
    80004cd4:	4481                	li	s1,0
    80004cd6:	b7c5                	j	80004cb6 <create+0x72>
  if((ip = ialloc(dp->dev, type)) == 0)
    80004cd8:	85ce                	mv	a1,s3
    80004cda:	00092503          	lw	a0,0(s2)
    80004cde:	ffffe097          	auipc	ra,0xffffe
    80004ce2:	4de080e7          	jalr	1246(ra) # 800031bc <ialloc>
    80004ce6:	84aa                	mv	s1,a0
    80004ce8:	c521                	beqz	a0,80004d30 <create+0xec>
  ilock(ip);
    80004cea:	ffffe097          	auipc	ra,0xffffe
    80004cee:	66a080e7          	jalr	1642(ra) # 80003354 <ilock>
  ip->major = major;
    80004cf2:	05549323          	sh	s5,70(s1)
  ip->minor = minor;
    80004cf6:	05449423          	sh	s4,72(s1)
  ip->nlink = 1;
    80004cfa:	4a05                	li	s4,1
    80004cfc:	05449523          	sh	s4,74(s1)
  iupdate(ip);
    80004d00:	8526                	mv	a0,s1
    80004d02:	ffffe097          	auipc	ra,0xffffe
    80004d06:	588080e7          	jalr	1416(ra) # 8000328a <iupdate>
  if(type == T_DIR){  /* Create . and .. entries. */
    80004d0a:	2981                	sext.w	s3,s3
    80004d0c:	03498a63          	beq	s3,s4,80004d40 <create+0xfc>
  if(dirlink(dp, name, ip->inum) < 0)
    80004d10:	40d0                	lw	a2,4(s1)
    80004d12:	fb040593          	addi	a1,s0,-80
    80004d16:	854a                	mv	a0,s2
    80004d18:	fffff097          	auipc	ra,0xfffff
    80004d1c:	d06080e7          	jalr	-762(ra) # 80003a1e <dirlink>
    80004d20:	06054b63          	bltz	a0,80004d96 <create+0x152>
  iunlockput(dp);
    80004d24:	854a                	mv	a0,s2
    80004d26:	fffff097          	auipc	ra,0xfffff
    80004d2a:	86c080e7          	jalr	-1940(ra) # 80003592 <iunlockput>
  return ip;
    80004d2e:	b761                	j	80004cb6 <create+0x72>
    panic("create: ialloc");
    80004d30:	00002517          	auipc	a0,0x2
    80004d34:	97850513          	addi	a0,a0,-1672 # 800066a8 <userret+0x618>
    80004d38:	ffffc097          	auipc	ra,0xffffc
    80004d3c:	816080e7          	jalr	-2026(ra) # 8000054e <panic>
    dp->nlink++;  /* for ".." */
    80004d40:	04a95783          	lhu	a5,74(s2)
    80004d44:	2785                	addiw	a5,a5,1
    80004d46:	04f91523          	sh	a5,74(s2)
    iupdate(dp);
    80004d4a:	854a                	mv	a0,s2
    80004d4c:	ffffe097          	auipc	ra,0xffffe
    80004d50:	53e080e7          	jalr	1342(ra) # 8000328a <iupdate>
    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
    80004d54:	40d0                	lw	a2,4(s1)
    80004d56:	00002597          	auipc	a1,0x2
    80004d5a:	96258593          	addi	a1,a1,-1694 # 800066b8 <userret+0x628>
    80004d5e:	8526                	mv	a0,s1
    80004d60:	fffff097          	auipc	ra,0xfffff
    80004d64:	cbe080e7          	jalr	-834(ra) # 80003a1e <dirlink>
    80004d68:	00054f63          	bltz	a0,80004d86 <create+0x142>
    80004d6c:	00492603          	lw	a2,4(s2)
    80004d70:	00002597          	auipc	a1,0x2
    80004d74:	95058593          	addi	a1,a1,-1712 # 800066c0 <userret+0x630>
    80004d78:	8526                	mv	a0,s1
    80004d7a:	fffff097          	auipc	ra,0xfffff
    80004d7e:	ca4080e7          	jalr	-860(ra) # 80003a1e <dirlink>
    80004d82:	f80557e3          	bgez	a0,80004d10 <create+0xcc>
      panic("create dots");
    80004d86:	00002517          	auipc	a0,0x2
    80004d8a:	94250513          	addi	a0,a0,-1726 # 800066c8 <userret+0x638>
    80004d8e:	ffffb097          	auipc	ra,0xffffb
    80004d92:	7c0080e7          	jalr	1984(ra) # 8000054e <panic>
    panic("create: dirlink");
    80004d96:	00002517          	auipc	a0,0x2
    80004d9a:	94250513          	addi	a0,a0,-1726 # 800066d8 <userret+0x648>
    80004d9e:	ffffb097          	auipc	ra,0xffffb
    80004da2:	7b0080e7          	jalr	1968(ra) # 8000054e <panic>
    return 0;
    80004da6:	84aa                	mv	s1,a0
    80004da8:	b739                	j	80004cb6 <create+0x72>

0000000080004daa <sys_dup>:
{
    80004daa:	7179                	addi	sp,sp,-48
    80004dac:	f406                	sd	ra,40(sp)
    80004dae:	f022                	sd	s0,32(sp)
    80004db0:	ec26                	sd	s1,24(sp)
    80004db2:	1800                	addi	s0,sp,48
  if(argfd(0, 0, &f) < 0)
    80004db4:	fd840613          	addi	a2,s0,-40
    80004db8:	4581                	li	a1,0
    80004dba:	4501                	li	a0,0
    80004dbc:	00000097          	auipc	ra,0x0
    80004dc0:	dde080e7          	jalr	-546(ra) # 80004b9a <argfd>
    return -1;
    80004dc4:	57fd                	li	a5,-1
  if(argfd(0, 0, &f) < 0)
    80004dc6:	02054363          	bltz	a0,80004dec <sys_dup+0x42>
  if((fd=fdalloc(f)) < 0)
    80004dca:	fd843503          	ld	a0,-40(s0)
    80004dce:	00000097          	auipc	ra,0x0
    80004dd2:	e34080e7          	jalr	-460(ra) # 80004c02 <fdalloc>
    80004dd6:	84aa                	mv	s1,a0
    return -1;
    80004dd8:	57fd                	li	a5,-1
  if((fd=fdalloc(f)) < 0)
    80004dda:	00054963          	bltz	a0,80004dec <sys_dup+0x42>
  filedup(f);
    80004dde:	fd843503          	ld	a0,-40(s0)
    80004de2:	fffff097          	auipc	ra,0xfffff
    80004de6:	38a080e7          	jalr	906(ra) # 8000416c <filedup>
  return fd;
    80004dea:	87a6                	mv	a5,s1
}
    80004dec:	853e                	mv	a0,a5
    80004dee:	70a2                	ld	ra,40(sp)
    80004df0:	7402                	ld	s0,32(sp)
    80004df2:	64e2                	ld	s1,24(sp)
    80004df4:	6145                	addi	sp,sp,48
    80004df6:	8082                	ret

0000000080004df8 <sys_read>:
{
    80004df8:	7179                	addi	sp,sp,-48
    80004dfa:	f406                	sd	ra,40(sp)
    80004dfc:	f022                	sd	s0,32(sp)
    80004dfe:	1800                	addi	s0,sp,48
  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    80004e00:	fe840613          	addi	a2,s0,-24
    80004e04:	4581                	li	a1,0
    80004e06:	4501                	li	a0,0
    80004e08:	00000097          	auipc	ra,0x0
    80004e0c:	d92080e7          	jalr	-622(ra) # 80004b9a <argfd>
    return -1;
    80004e10:	57fd                	li	a5,-1
  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    80004e12:	04054163          	bltz	a0,80004e54 <sys_read+0x5c>
    80004e16:	fe440593          	addi	a1,s0,-28
    80004e1a:	4509                	li	a0,2
    80004e1c:	ffffe097          	auipc	ra,0xffffe
    80004e20:	9fa080e7          	jalr	-1542(ra) # 80002816 <argint>
    return -1;
    80004e24:	57fd                	li	a5,-1
  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    80004e26:	02054763          	bltz	a0,80004e54 <sys_read+0x5c>
    80004e2a:	fd840593          	addi	a1,s0,-40
    80004e2e:	4505                	li	a0,1
    80004e30:	ffffe097          	auipc	ra,0xffffe
    80004e34:	a08080e7          	jalr	-1528(ra) # 80002838 <argaddr>
    return -1;
    80004e38:	57fd                	li	a5,-1
  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    80004e3a:	00054d63          	bltz	a0,80004e54 <sys_read+0x5c>
  return fileread(f, p, n);
    80004e3e:	fe442603          	lw	a2,-28(s0)
    80004e42:	fd843583          	ld	a1,-40(s0)
    80004e46:	fe843503          	ld	a0,-24(s0)
    80004e4a:	fffff097          	auipc	ra,0xfffff
    80004e4e:	4ae080e7          	jalr	1198(ra) # 800042f8 <fileread>
    80004e52:	87aa                	mv	a5,a0
}
    80004e54:	853e                	mv	a0,a5
    80004e56:	70a2                	ld	ra,40(sp)
    80004e58:	7402                	ld	s0,32(sp)
    80004e5a:	6145                	addi	sp,sp,48
    80004e5c:	8082                	ret

0000000080004e5e <sys_write>:
{
    80004e5e:	7179                	addi	sp,sp,-48
    80004e60:	f406                	sd	ra,40(sp)
    80004e62:	f022                	sd	s0,32(sp)
    80004e64:	1800                	addi	s0,sp,48
  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    80004e66:	fe840613          	addi	a2,s0,-24
    80004e6a:	4581                	li	a1,0
    80004e6c:	4501                	li	a0,0
    80004e6e:	00000097          	auipc	ra,0x0
    80004e72:	d2c080e7          	jalr	-724(ra) # 80004b9a <argfd>
    return -1;
    80004e76:	57fd                	li	a5,-1
  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    80004e78:	04054163          	bltz	a0,80004eba <sys_write+0x5c>
    80004e7c:	fe440593          	addi	a1,s0,-28
    80004e80:	4509                	li	a0,2
    80004e82:	ffffe097          	auipc	ra,0xffffe
    80004e86:	994080e7          	jalr	-1644(ra) # 80002816 <argint>
    return -1;
    80004e8a:	57fd                	li	a5,-1
  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    80004e8c:	02054763          	bltz	a0,80004eba <sys_write+0x5c>
    80004e90:	fd840593          	addi	a1,s0,-40
    80004e94:	4505                	li	a0,1
    80004e96:	ffffe097          	auipc	ra,0xffffe
    80004e9a:	9a2080e7          	jalr	-1630(ra) # 80002838 <argaddr>
    return -1;
    80004e9e:	57fd                	li	a5,-1
  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
    80004ea0:	00054d63          	bltz	a0,80004eba <sys_write+0x5c>
  return filewrite(f, p, n);
    80004ea4:	fe442603          	lw	a2,-28(s0)
    80004ea8:	fd843583          	ld	a1,-40(s0)
    80004eac:	fe843503          	ld	a0,-24(s0)
    80004eb0:	fffff097          	auipc	ra,0xfffff
    80004eb4:	4f6080e7          	jalr	1270(ra) # 800043a6 <filewrite>
    80004eb8:	87aa                	mv	a5,a0
}
    80004eba:	853e                	mv	a0,a5
    80004ebc:	70a2                	ld	ra,40(sp)
    80004ebe:	7402                	ld	s0,32(sp)
    80004ec0:	6145                	addi	sp,sp,48
    80004ec2:	8082                	ret

0000000080004ec4 <sys_close>:
{
    80004ec4:	1101                	addi	sp,sp,-32
    80004ec6:	ec06                	sd	ra,24(sp)
    80004ec8:	e822                	sd	s0,16(sp)
    80004eca:	1000                	addi	s0,sp,32
  if(argfd(0, &fd, &f) < 0)
    80004ecc:	fe040613          	addi	a2,s0,-32
    80004ed0:	fec40593          	addi	a1,s0,-20
    80004ed4:	4501                	li	a0,0
    80004ed6:	00000097          	auipc	ra,0x0
    80004eda:	cc4080e7          	jalr	-828(ra) # 80004b9a <argfd>
    return -1;
    80004ede:	57fd                	li	a5,-1
  if(argfd(0, &fd, &f) < 0)
    80004ee0:	02054463          	bltz	a0,80004f08 <sys_close+0x44>
  myproc()->ofile[fd] = 0;
    80004ee4:	ffffd097          	auipc	ra,0xffffd
    80004ee8:	8f8080e7          	jalr	-1800(ra) # 800017dc <myproc>
    80004eec:	fec42783          	lw	a5,-20(s0)
    80004ef0:	07e1                	addi	a5,a5,24
    80004ef2:	078e                	slli	a5,a5,0x3
    80004ef4:	97aa                	add	a5,a5,a0
    80004ef6:	0007b423          	sd	zero,8(a5)
  fileclose(f);
    80004efa:	fe043503          	ld	a0,-32(s0)
    80004efe:	fffff097          	auipc	ra,0xfffff
    80004f02:	2c0080e7          	jalr	704(ra) # 800041be <fileclose>
  return 0;
    80004f06:	4781                	li	a5,0
}
    80004f08:	853e                	mv	a0,a5
    80004f0a:	60e2                	ld	ra,24(sp)
    80004f0c:	6442                	ld	s0,16(sp)
    80004f0e:	6105                	addi	sp,sp,32
    80004f10:	8082                	ret

0000000080004f12 <sys_fstat>:
{
    80004f12:	1101                	addi	sp,sp,-32
    80004f14:	ec06                	sd	ra,24(sp)
    80004f16:	e822                	sd	s0,16(sp)
    80004f18:	1000                	addi	s0,sp,32
  if(argfd(0, 0, &f) < 0 || argaddr(1, &st) < 0)
    80004f1a:	fe840613          	addi	a2,s0,-24
    80004f1e:	4581                	li	a1,0
    80004f20:	4501                	li	a0,0
    80004f22:	00000097          	auipc	ra,0x0
    80004f26:	c78080e7          	jalr	-904(ra) # 80004b9a <argfd>
    return -1;
    80004f2a:	57fd                	li	a5,-1
  if(argfd(0, 0, &f) < 0 || argaddr(1, &st) < 0)
    80004f2c:	02054563          	bltz	a0,80004f56 <sys_fstat+0x44>
    80004f30:	fe040593          	addi	a1,s0,-32
    80004f34:	4505                	li	a0,1
    80004f36:	ffffe097          	auipc	ra,0xffffe
    80004f3a:	902080e7          	jalr	-1790(ra) # 80002838 <argaddr>
    return -1;
    80004f3e:	57fd                	li	a5,-1
  if(argfd(0, 0, &f) < 0 || argaddr(1, &st) < 0)
    80004f40:	00054b63          	bltz	a0,80004f56 <sys_fstat+0x44>
  return filestat(f, st);
    80004f44:	fe043583          	ld	a1,-32(s0)
    80004f48:	fe843503          	ld	a0,-24(s0)
    80004f4c:	fffff097          	auipc	ra,0xfffff
    80004f50:	33a080e7          	jalr	826(ra) # 80004286 <filestat>
    80004f54:	87aa                	mv	a5,a0
}
    80004f56:	853e                	mv	a0,a5
    80004f58:	60e2                	ld	ra,24(sp)
    80004f5a:	6442                	ld	s0,16(sp)
    80004f5c:	6105                	addi	sp,sp,32
    80004f5e:	8082                	ret

0000000080004f60 <sys_link>:
{
    80004f60:	7169                	addi	sp,sp,-304
    80004f62:	f606                	sd	ra,296(sp)
    80004f64:	f222                	sd	s0,288(sp)
    80004f66:	ee26                	sd	s1,280(sp)
    80004f68:	ea4a                	sd	s2,272(sp)
    80004f6a:	1a00                	addi	s0,sp,304
  if(argstr(0, old, MAXPATH) < 0 || argstr(1, new, MAXPATH) < 0)
    80004f6c:	08000613          	li	a2,128
    80004f70:	ed040593          	addi	a1,s0,-304
    80004f74:	4501                	li	a0,0
    80004f76:	ffffe097          	auipc	ra,0xffffe
    80004f7a:	8e4080e7          	jalr	-1820(ra) # 8000285a <argstr>
    return -1;
    80004f7e:	57fd                	li	a5,-1
  if(argstr(0, old, MAXPATH) < 0 || argstr(1, new, MAXPATH) < 0)
    80004f80:	10054e63          	bltz	a0,8000509c <sys_link+0x13c>
    80004f84:	08000613          	li	a2,128
    80004f88:	f5040593          	addi	a1,s0,-176
    80004f8c:	4505                	li	a0,1
    80004f8e:	ffffe097          	auipc	ra,0xffffe
    80004f92:	8cc080e7          	jalr	-1844(ra) # 8000285a <argstr>
    return -1;
    80004f96:	57fd                	li	a5,-1
  if(argstr(0, old, MAXPATH) < 0 || argstr(1, new, MAXPATH) < 0)
    80004f98:	10054263          	bltz	a0,8000509c <sys_link+0x13c>
  begin_op();
    80004f9c:	fffff097          	auipc	ra,0xfffff
    80004fa0:	d50080e7          	jalr	-688(ra) # 80003cec <begin_op>
  if((ip = namei(old)) == 0){
    80004fa4:	ed040513          	addi	a0,s0,-304
    80004fa8:	fffff097          	auipc	ra,0xfffff
    80004fac:	b38080e7          	jalr	-1224(ra) # 80003ae0 <namei>
    80004fb0:	84aa                	mv	s1,a0
    80004fb2:	c551                	beqz	a0,8000503e <sys_link+0xde>
  ilock(ip);
    80004fb4:	ffffe097          	auipc	ra,0xffffe
    80004fb8:	3a0080e7          	jalr	928(ra) # 80003354 <ilock>
  if(ip->type == T_DIR){
    80004fbc:	04449703          	lh	a4,68(s1)
    80004fc0:	4785                	li	a5,1
    80004fc2:	08f70463          	beq	a4,a5,8000504a <sys_link+0xea>
  ip->nlink++;
    80004fc6:	04a4d783          	lhu	a5,74(s1)
    80004fca:	2785                	addiw	a5,a5,1
    80004fcc:	04f49523          	sh	a5,74(s1)
  iupdate(ip);
    80004fd0:	8526                	mv	a0,s1
    80004fd2:	ffffe097          	auipc	ra,0xffffe
    80004fd6:	2b8080e7          	jalr	696(ra) # 8000328a <iupdate>
  iunlock(ip);
    80004fda:	8526                	mv	a0,s1
    80004fdc:	ffffe097          	auipc	ra,0xffffe
    80004fe0:	43a080e7          	jalr	1082(ra) # 80003416 <iunlock>
  if((dp = nameiparent(new, name)) == 0)
    80004fe4:	fd040593          	addi	a1,s0,-48
    80004fe8:	f5040513          	addi	a0,s0,-176
    80004fec:	fffff097          	auipc	ra,0xfffff
    80004ff0:	b12080e7          	jalr	-1262(ra) # 80003afe <nameiparent>
    80004ff4:	892a                	mv	s2,a0
    80004ff6:	c935                	beqz	a0,8000506a <sys_link+0x10a>
  ilock(dp);
    80004ff8:	ffffe097          	auipc	ra,0xffffe
    80004ffc:	35c080e7          	jalr	860(ra) # 80003354 <ilock>
  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
    80005000:	00092703          	lw	a4,0(s2)
    80005004:	409c                	lw	a5,0(s1)
    80005006:	04f71d63          	bne	a4,a5,80005060 <sys_link+0x100>
    8000500a:	40d0                	lw	a2,4(s1)
    8000500c:	fd040593          	addi	a1,s0,-48
    80005010:	854a                	mv	a0,s2
    80005012:	fffff097          	auipc	ra,0xfffff
    80005016:	a0c080e7          	jalr	-1524(ra) # 80003a1e <dirlink>
    8000501a:	04054363          	bltz	a0,80005060 <sys_link+0x100>
  iunlockput(dp);
    8000501e:	854a                	mv	a0,s2
    80005020:	ffffe097          	auipc	ra,0xffffe
    80005024:	572080e7          	jalr	1394(ra) # 80003592 <iunlockput>
  iput(ip);
    80005028:	8526                	mv	a0,s1
    8000502a:	ffffe097          	auipc	ra,0xffffe
    8000502e:	438080e7          	jalr	1080(ra) # 80003462 <iput>
  end_op();
    80005032:	fffff097          	auipc	ra,0xfffff
    80005036:	d3a080e7          	jalr	-710(ra) # 80003d6c <end_op>
  return 0;
    8000503a:	4781                	li	a5,0
    8000503c:	a085                	j	8000509c <sys_link+0x13c>
    end_op();
    8000503e:	fffff097          	auipc	ra,0xfffff
    80005042:	d2e080e7          	jalr	-722(ra) # 80003d6c <end_op>
    return -1;
    80005046:	57fd                	li	a5,-1
    80005048:	a891                	j	8000509c <sys_link+0x13c>
    iunlockput(ip);
    8000504a:	8526                	mv	a0,s1
    8000504c:	ffffe097          	auipc	ra,0xffffe
    80005050:	546080e7          	jalr	1350(ra) # 80003592 <iunlockput>
    end_op();
    80005054:	fffff097          	auipc	ra,0xfffff
    80005058:	d18080e7          	jalr	-744(ra) # 80003d6c <end_op>
    return -1;
    8000505c:	57fd                	li	a5,-1
    8000505e:	a83d                	j	8000509c <sys_link+0x13c>
    iunlockput(dp);
    80005060:	854a                	mv	a0,s2
    80005062:	ffffe097          	auipc	ra,0xffffe
    80005066:	530080e7          	jalr	1328(ra) # 80003592 <iunlockput>
  ilock(ip);
    8000506a:	8526                	mv	a0,s1
    8000506c:	ffffe097          	auipc	ra,0xffffe
    80005070:	2e8080e7          	jalr	744(ra) # 80003354 <ilock>
  ip->nlink--;
    80005074:	04a4d783          	lhu	a5,74(s1)
    80005078:	37fd                	addiw	a5,a5,-1
    8000507a:	04f49523          	sh	a5,74(s1)
  iupdate(ip);
    8000507e:	8526                	mv	a0,s1
    80005080:	ffffe097          	auipc	ra,0xffffe
    80005084:	20a080e7          	jalr	522(ra) # 8000328a <iupdate>
  iunlockput(ip);
    80005088:	8526                	mv	a0,s1
    8000508a:	ffffe097          	auipc	ra,0xffffe
    8000508e:	508080e7          	jalr	1288(ra) # 80003592 <iunlockput>
  end_op();
    80005092:	fffff097          	auipc	ra,0xfffff
    80005096:	cda080e7          	jalr	-806(ra) # 80003d6c <end_op>
  return -1;
    8000509a:	57fd                	li	a5,-1
}
    8000509c:	853e                	mv	a0,a5
    8000509e:	70b2                	ld	ra,296(sp)
    800050a0:	7412                	ld	s0,288(sp)
    800050a2:	64f2                	ld	s1,280(sp)
    800050a4:	6952                	ld	s2,272(sp)
    800050a6:	6155                	addi	sp,sp,304
    800050a8:	8082                	ret

00000000800050aa <sys_unlink>:
{
    800050aa:	7151                	addi	sp,sp,-240
    800050ac:	f586                	sd	ra,232(sp)
    800050ae:	f1a2                	sd	s0,224(sp)
    800050b0:	eda6                	sd	s1,216(sp)
    800050b2:	e9ca                	sd	s2,208(sp)
    800050b4:	e5ce                	sd	s3,200(sp)
    800050b6:	1980                	addi	s0,sp,240
  if(argstr(0, path, MAXPATH) < 0)
    800050b8:	08000613          	li	a2,128
    800050bc:	f3040593          	addi	a1,s0,-208
    800050c0:	4501                	li	a0,0
    800050c2:	ffffd097          	auipc	ra,0xffffd
    800050c6:	798080e7          	jalr	1944(ra) # 8000285a <argstr>
    800050ca:	18054163          	bltz	a0,8000524c <sys_unlink+0x1a2>
  begin_op();
    800050ce:	fffff097          	auipc	ra,0xfffff
    800050d2:	c1e080e7          	jalr	-994(ra) # 80003cec <begin_op>
  if((dp = nameiparent(path, name)) == 0){
    800050d6:	fb040593          	addi	a1,s0,-80
    800050da:	f3040513          	addi	a0,s0,-208
    800050de:	fffff097          	auipc	ra,0xfffff
    800050e2:	a20080e7          	jalr	-1504(ra) # 80003afe <nameiparent>
    800050e6:	84aa                	mv	s1,a0
    800050e8:	c979                	beqz	a0,800051be <sys_unlink+0x114>
  ilock(dp);
    800050ea:	ffffe097          	auipc	ra,0xffffe
    800050ee:	26a080e7          	jalr	618(ra) # 80003354 <ilock>
  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
    800050f2:	00001597          	auipc	a1,0x1
    800050f6:	5c658593          	addi	a1,a1,1478 # 800066b8 <userret+0x628>
    800050fa:	fb040513          	addi	a0,s0,-80
    800050fe:	ffffe097          	auipc	ra,0xffffe
    80005102:	6f6080e7          	jalr	1782(ra) # 800037f4 <namecmp>
    80005106:	14050a63          	beqz	a0,8000525a <sys_unlink+0x1b0>
    8000510a:	00001597          	auipc	a1,0x1
    8000510e:	5b658593          	addi	a1,a1,1462 # 800066c0 <userret+0x630>
    80005112:	fb040513          	addi	a0,s0,-80
    80005116:	ffffe097          	auipc	ra,0xffffe
    8000511a:	6de080e7          	jalr	1758(ra) # 800037f4 <namecmp>
    8000511e:	12050e63          	beqz	a0,8000525a <sys_unlink+0x1b0>
  if((ip = dirlookup(dp, name, &off)) == 0)
    80005122:	f2c40613          	addi	a2,s0,-212
    80005126:	fb040593          	addi	a1,s0,-80
    8000512a:	8526                	mv	a0,s1
    8000512c:	ffffe097          	auipc	ra,0xffffe
    80005130:	6e2080e7          	jalr	1762(ra) # 8000380e <dirlookup>
    80005134:	892a                	mv	s2,a0
    80005136:	12050263          	beqz	a0,8000525a <sys_unlink+0x1b0>
  ilock(ip);
    8000513a:	ffffe097          	auipc	ra,0xffffe
    8000513e:	21a080e7          	jalr	538(ra) # 80003354 <ilock>
  if(ip->nlink < 1)
    80005142:	04a91783          	lh	a5,74(s2)
    80005146:	08f05263          	blez	a5,800051ca <sys_unlink+0x120>
  if(ip->type == T_DIR && !isdirempty(ip)){
    8000514a:	04491703          	lh	a4,68(s2)
    8000514e:	4785                	li	a5,1
    80005150:	08f70563          	beq	a4,a5,800051da <sys_unlink+0x130>
  memset(&de, 0, sizeof(de));
    80005154:	4641                	li	a2,16
    80005156:	4581                	li	a1,0
    80005158:	fc040513          	addi	a0,s0,-64
    8000515c:	ffffc097          	auipc	ra,0xffffc
    80005160:	a0e080e7          	jalr	-1522(ra) # 80000b6a <memset>
  if(writei(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
    80005164:	4741                	li	a4,16
    80005166:	f2c42683          	lw	a3,-212(s0)
    8000516a:	fc040613          	addi	a2,s0,-64
    8000516e:	4581                	li	a1,0
    80005170:	8526                	mv	a0,s1
    80005172:	ffffe097          	auipc	ra,0xffffe
    80005176:	566080e7          	jalr	1382(ra) # 800036d8 <writei>
    8000517a:	47c1                	li	a5,16
    8000517c:	0af51563          	bne	a0,a5,80005226 <sys_unlink+0x17c>
  if(ip->type == T_DIR){
    80005180:	04491703          	lh	a4,68(s2)
    80005184:	4785                	li	a5,1
    80005186:	0af70863          	beq	a4,a5,80005236 <sys_unlink+0x18c>
  iunlockput(dp);
    8000518a:	8526                	mv	a0,s1
    8000518c:	ffffe097          	auipc	ra,0xffffe
    80005190:	406080e7          	jalr	1030(ra) # 80003592 <iunlockput>
  ip->nlink--;
    80005194:	04a95783          	lhu	a5,74(s2)
    80005198:	37fd                	addiw	a5,a5,-1
    8000519a:	04f91523          	sh	a5,74(s2)
  iupdate(ip);
    8000519e:	854a                	mv	a0,s2
    800051a0:	ffffe097          	auipc	ra,0xffffe
    800051a4:	0ea080e7          	jalr	234(ra) # 8000328a <iupdate>
  iunlockput(ip);
    800051a8:	854a                	mv	a0,s2
    800051aa:	ffffe097          	auipc	ra,0xffffe
    800051ae:	3e8080e7          	jalr	1000(ra) # 80003592 <iunlockput>
  end_op();
    800051b2:	fffff097          	auipc	ra,0xfffff
    800051b6:	bba080e7          	jalr	-1094(ra) # 80003d6c <end_op>
  return 0;
    800051ba:	4501                	li	a0,0
    800051bc:	a84d                	j	8000526e <sys_unlink+0x1c4>
    end_op();
    800051be:	fffff097          	auipc	ra,0xfffff
    800051c2:	bae080e7          	jalr	-1106(ra) # 80003d6c <end_op>
    return -1;
    800051c6:	557d                	li	a0,-1
    800051c8:	a05d                	j	8000526e <sys_unlink+0x1c4>
    panic("unlink: nlink < 1");
    800051ca:	00001517          	auipc	a0,0x1
    800051ce:	51e50513          	addi	a0,a0,1310 # 800066e8 <userret+0x658>
    800051d2:	ffffb097          	auipc	ra,0xffffb
    800051d6:	37c080e7          	jalr	892(ra) # 8000054e <panic>
  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
    800051da:	04c92703          	lw	a4,76(s2)
    800051de:	02000793          	li	a5,32
    800051e2:	f6e7f9e3          	bgeu	a5,a4,80005154 <sys_unlink+0xaa>
    800051e6:	02000993          	li	s3,32
    if(readi(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
    800051ea:	4741                	li	a4,16
    800051ec:	86ce                	mv	a3,s3
    800051ee:	f1840613          	addi	a2,s0,-232
    800051f2:	4581                	li	a1,0
    800051f4:	854a                	mv	a0,s2
    800051f6:	ffffe097          	auipc	ra,0xffffe
    800051fa:	3ee080e7          	jalr	1006(ra) # 800035e4 <readi>
    800051fe:	47c1                	li	a5,16
    80005200:	00f51b63          	bne	a0,a5,80005216 <sys_unlink+0x16c>
    if(de.inum != 0)
    80005204:	f1845783          	lhu	a5,-232(s0)
    80005208:	e7a1                	bnez	a5,80005250 <sys_unlink+0x1a6>
  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
    8000520a:	29c1                	addiw	s3,s3,16
    8000520c:	04c92783          	lw	a5,76(s2)
    80005210:	fcf9ede3          	bltu	s3,a5,800051ea <sys_unlink+0x140>
    80005214:	b781                	j	80005154 <sys_unlink+0xaa>
      panic("isdirempty: readi");
    80005216:	00001517          	auipc	a0,0x1
    8000521a:	4ea50513          	addi	a0,a0,1258 # 80006700 <userret+0x670>
    8000521e:	ffffb097          	auipc	ra,0xffffb
    80005222:	330080e7          	jalr	816(ra) # 8000054e <panic>
    panic("unlink: writei");
    80005226:	00001517          	auipc	a0,0x1
    8000522a:	4f250513          	addi	a0,a0,1266 # 80006718 <userret+0x688>
    8000522e:	ffffb097          	auipc	ra,0xffffb
    80005232:	320080e7          	jalr	800(ra) # 8000054e <panic>
    dp->nlink--;
    80005236:	04a4d783          	lhu	a5,74(s1)
    8000523a:	37fd                	addiw	a5,a5,-1
    8000523c:	04f49523          	sh	a5,74(s1)
    iupdate(dp);
    80005240:	8526                	mv	a0,s1
    80005242:	ffffe097          	auipc	ra,0xffffe
    80005246:	048080e7          	jalr	72(ra) # 8000328a <iupdate>
    8000524a:	b781                	j	8000518a <sys_unlink+0xe0>
    return -1;
    8000524c:	557d                	li	a0,-1
    8000524e:	a005                	j	8000526e <sys_unlink+0x1c4>
    iunlockput(ip);
    80005250:	854a                	mv	a0,s2
    80005252:	ffffe097          	auipc	ra,0xffffe
    80005256:	340080e7          	jalr	832(ra) # 80003592 <iunlockput>
  iunlockput(dp);
    8000525a:	8526                	mv	a0,s1
    8000525c:	ffffe097          	auipc	ra,0xffffe
    80005260:	336080e7          	jalr	822(ra) # 80003592 <iunlockput>
  end_op();
    80005264:	fffff097          	auipc	ra,0xfffff
    80005268:	b08080e7          	jalr	-1272(ra) # 80003d6c <end_op>
  return -1;
    8000526c:	557d                	li	a0,-1
}
    8000526e:	70ae                	ld	ra,232(sp)
    80005270:	740e                	ld	s0,224(sp)
    80005272:	64ee                	ld	s1,216(sp)
    80005274:	694e                	ld	s2,208(sp)
    80005276:	69ae                	ld	s3,200(sp)
    80005278:	616d                	addi	sp,sp,240
    8000527a:	8082                	ret

000000008000527c <sys_open>:

uint64
sys_open(void)
{
    8000527c:	7131                	addi	sp,sp,-192
    8000527e:	fd06                	sd	ra,184(sp)
    80005280:	f922                	sd	s0,176(sp)
    80005282:	f526                	sd	s1,168(sp)
    80005284:	f14a                	sd	s2,160(sp)
    80005286:	ed4e                	sd	s3,152(sp)
    80005288:	0180                	addi	s0,sp,192
  char path[MAXPATH];
  int fd, omode;
  struct file *f;
  struct inode *ip;

  if(argstr(0, path, MAXPATH) < 0 || argint(1, &omode) < 0)
    8000528a:	08000613          	li	a2,128
    8000528e:	f5040593          	addi	a1,s0,-176
    80005292:	4501                	li	a0,0
    80005294:	ffffd097          	auipc	ra,0xffffd
    80005298:	5c6080e7          	jalr	1478(ra) # 8000285a <argstr>
    return -1;
    8000529c:	54fd                	li	s1,-1
  if(argstr(0, path, MAXPATH) < 0 || argint(1, &omode) < 0)
    8000529e:	0a054763          	bltz	a0,8000534c <sys_open+0xd0>
    800052a2:	f4c40593          	addi	a1,s0,-180
    800052a6:	4505                	li	a0,1
    800052a8:	ffffd097          	auipc	ra,0xffffd
    800052ac:	56e080e7          	jalr	1390(ra) # 80002816 <argint>
    800052b0:	08054e63          	bltz	a0,8000534c <sys_open+0xd0>

  begin_op();
    800052b4:	fffff097          	auipc	ra,0xfffff
    800052b8:	a38080e7          	jalr	-1480(ra) # 80003cec <begin_op>

  if(omode & O_CREATE){
    800052bc:	f4c42783          	lw	a5,-180(s0)
    800052c0:	2007f793          	andi	a5,a5,512
    800052c4:	c3cd                	beqz	a5,80005366 <sys_open+0xea>
    ip = create(path, T_FILE, 0, 0);
    800052c6:	4681                	li	a3,0
    800052c8:	4601                	li	a2,0
    800052ca:	4589                	li	a1,2
    800052cc:	f5040513          	addi	a0,s0,-176
    800052d0:	00000097          	auipc	ra,0x0
    800052d4:	974080e7          	jalr	-1676(ra) # 80004c44 <create>
    800052d8:	892a                	mv	s2,a0
    if(ip == 0){
    800052da:	c149                	beqz	a0,8000535c <sys_open+0xe0>
      end_op();
      return -1;
    }
  }

  if(ip->type == T_DEVICE && (ip->major < 0 || ip->major >= NDEV)){
    800052dc:	04491703          	lh	a4,68(s2)
    800052e0:	478d                	li	a5,3
    800052e2:	00f71763          	bne	a4,a5,800052f0 <sys_open+0x74>
    800052e6:	04695703          	lhu	a4,70(s2)
    800052ea:	47a5                	li	a5,9
    800052ec:	0ce7e263          	bltu	a5,a4,800053b0 <sys_open+0x134>
    iunlockput(ip);
    end_op();
    return -1;
  }

  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
    800052f0:	fffff097          	auipc	ra,0xfffff
    800052f4:	e12080e7          	jalr	-494(ra) # 80004102 <filealloc>
    800052f8:	89aa                	mv	s3,a0
    800052fa:	c175                	beqz	a0,800053de <sys_open+0x162>
    800052fc:	00000097          	auipc	ra,0x0
    80005300:	906080e7          	jalr	-1786(ra) # 80004c02 <fdalloc>
    80005304:	84aa                	mv	s1,a0
    80005306:	0c054763          	bltz	a0,800053d4 <sys_open+0x158>
    iunlockput(ip);
    end_op();
    return -1;
  }

  if(ip->type == T_DEVICE){
    8000530a:	04491703          	lh	a4,68(s2)
    8000530e:	478d                	li	a5,3
    80005310:	0af70b63          	beq	a4,a5,800053c6 <sys_open+0x14a>
    f->type = FD_DEVICE;
    f->major = ip->major;
  } else {
    f->type = FD_INODE;
    80005314:	4789                	li	a5,2
    80005316:	00f9a023          	sw	a5,0(s3)
    f->off = 0;
    8000531a:	0209a023          	sw	zero,32(s3)
  }
  f->ip = ip;
    8000531e:	0129bc23          	sd	s2,24(s3)
  f->readable = !(omode & O_WRONLY);
    80005322:	f4c42783          	lw	a5,-180(s0)
    80005326:	0017c713          	xori	a4,a5,1
    8000532a:	8b05                	andi	a4,a4,1
    8000532c:	00e98423          	sb	a4,8(s3)
  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
    80005330:	8b8d                	andi	a5,a5,3
    80005332:	00f037b3          	snez	a5,a5
    80005336:	00f984a3          	sb	a5,9(s3)

  iunlock(ip);
    8000533a:	854a                	mv	a0,s2
    8000533c:	ffffe097          	auipc	ra,0xffffe
    80005340:	0da080e7          	jalr	218(ra) # 80003416 <iunlock>
  end_op();
    80005344:	fffff097          	auipc	ra,0xfffff
    80005348:	a28080e7          	jalr	-1496(ra) # 80003d6c <end_op>

  return fd;
}
    8000534c:	8526                	mv	a0,s1
    8000534e:	70ea                	ld	ra,184(sp)
    80005350:	744a                	ld	s0,176(sp)
    80005352:	74aa                	ld	s1,168(sp)
    80005354:	790a                	ld	s2,160(sp)
    80005356:	69ea                	ld	s3,152(sp)
    80005358:	6129                	addi	sp,sp,192
    8000535a:	8082                	ret
      end_op();
    8000535c:	fffff097          	auipc	ra,0xfffff
    80005360:	a10080e7          	jalr	-1520(ra) # 80003d6c <end_op>
      return -1;
    80005364:	b7e5                	j	8000534c <sys_open+0xd0>
    if((ip = namei(path)) == 0){
    80005366:	f5040513          	addi	a0,s0,-176
    8000536a:	ffffe097          	auipc	ra,0xffffe
    8000536e:	776080e7          	jalr	1910(ra) # 80003ae0 <namei>
    80005372:	892a                	mv	s2,a0
    80005374:	c905                	beqz	a0,800053a4 <sys_open+0x128>
    ilock(ip);
    80005376:	ffffe097          	auipc	ra,0xffffe
    8000537a:	fde080e7          	jalr	-34(ra) # 80003354 <ilock>
    if(ip->type == T_DIR && omode != O_RDONLY){
    8000537e:	04491703          	lh	a4,68(s2)
    80005382:	4785                	li	a5,1
    80005384:	f4f71ce3          	bne	a4,a5,800052dc <sys_open+0x60>
    80005388:	f4c42783          	lw	a5,-180(s0)
    8000538c:	d3b5                	beqz	a5,800052f0 <sys_open+0x74>
      iunlockput(ip);
    8000538e:	854a                	mv	a0,s2
    80005390:	ffffe097          	auipc	ra,0xffffe
    80005394:	202080e7          	jalr	514(ra) # 80003592 <iunlockput>
      end_op();
    80005398:	fffff097          	auipc	ra,0xfffff
    8000539c:	9d4080e7          	jalr	-1580(ra) # 80003d6c <end_op>
      return -1;
    800053a0:	54fd                	li	s1,-1
    800053a2:	b76d                	j	8000534c <sys_open+0xd0>
      end_op();
    800053a4:	fffff097          	auipc	ra,0xfffff
    800053a8:	9c8080e7          	jalr	-1592(ra) # 80003d6c <end_op>
      return -1;
    800053ac:	54fd                	li	s1,-1
    800053ae:	bf79                	j	8000534c <sys_open+0xd0>
    iunlockput(ip);
    800053b0:	854a                	mv	a0,s2
    800053b2:	ffffe097          	auipc	ra,0xffffe
    800053b6:	1e0080e7          	jalr	480(ra) # 80003592 <iunlockput>
    end_op();
    800053ba:	fffff097          	auipc	ra,0xfffff
    800053be:	9b2080e7          	jalr	-1614(ra) # 80003d6c <end_op>
    return -1;
    800053c2:	54fd                	li	s1,-1
    800053c4:	b761                	j	8000534c <sys_open+0xd0>
    f->type = FD_DEVICE;
    800053c6:	00f9a023          	sw	a5,0(s3)
    f->major = ip->major;
    800053ca:	04691783          	lh	a5,70(s2)
    800053ce:	02f99223          	sh	a5,36(s3)
    800053d2:	b7b1                	j	8000531e <sys_open+0xa2>
      fileclose(f);
    800053d4:	854e                	mv	a0,s3
    800053d6:	fffff097          	auipc	ra,0xfffff
    800053da:	de8080e7          	jalr	-536(ra) # 800041be <fileclose>
    iunlockput(ip);
    800053de:	854a                	mv	a0,s2
    800053e0:	ffffe097          	auipc	ra,0xffffe
    800053e4:	1b2080e7          	jalr	434(ra) # 80003592 <iunlockput>
    end_op();
    800053e8:	fffff097          	auipc	ra,0xfffff
    800053ec:	984080e7          	jalr	-1660(ra) # 80003d6c <end_op>
    return -1;
    800053f0:	54fd                	li	s1,-1
    800053f2:	bfa9                	j	8000534c <sys_open+0xd0>

00000000800053f4 <sys_mkdir>:

uint64
sys_mkdir(void)
{
    800053f4:	7175                	addi	sp,sp,-144
    800053f6:	e506                	sd	ra,136(sp)
    800053f8:	e122                	sd	s0,128(sp)
    800053fa:	0900                	addi	s0,sp,144
  char path[MAXPATH];
  struct inode *ip;

  begin_op();
    800053fc:	fffff097          	auipc	ra,0xfffff
    80005400:	8f0080e7          	jalr	-1808(ra) # 80003cec <begin_op>
  if(argstr(0, path, MAXPATH) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
    80005404:	08000613          	li	a2,128
    80005408:	f7040593          	addi	a1,s0,-144
    8000540c:	4501                	li	a0,0
    8000540e:	ffffd097          	auipc	ra,0xffffd
    80005412:	44c080e7          	jalr	1100(ra) # 8000285a <argstr>
    80005416:	02054963          	bltz	a0,80005448 <sys_mkdir+0x54>
    8000541a:	4681                	li	a3,0
    8000541c:	4601                	li	a2,0
    8000541e:	4585                	li	a1,1
    80005420:	f7040513          	addi	a0,s0,-144
    80005424:	00000097          	auipc	ra,0x0
    80005428:	820080e7          	jalr	-2016(ra) # 80004c44 <create>
    8000542c:	cd11                	beqz	a0,80005448 <sys_mkdir+0x54>
    end_op();
    return -1;
  }
  iunlockput(ip);
    8000542e:	ffffe097          	auipc	ra,0xffffe
    80005432:	164080e7          	jalr	356(ra) # 80003592 <iunlockput>
  end_op();
    80005436:	fffff097          	auipc	ra,0xfffff
    8000543a:	936080e7          	jalr	-1738(ra) # 80003d6c <end_op>
  return 0;
    8000543e:	4501                	li	a0,0
}
    80005440:	60aa                	ld	ra,136(sp)
    80005442:	640a                	ld	s0,128(sp)
    80005444:	6149                	addi	sp,sp,144
    80005446:	8082                	ret
    end_op();
    80005448:	fffff097          	auipc	ra,0xfffff
    8000544c:	924080e7          	jalr	-1756(ra) # 80003d6c <end_op>
    return -1;
    80005450:	557d                	li	a0,-1
    80005452:	b7fd                	j	80005440 <sys_mkdir+0x4c>

0000000080005454 <sys_mknod>:

uint64
sys_mknod(void)
{
    80005454:	7135                	addi	sp,sp,-160
    80005456:	ed06                	sd	ra,152(sp)
    80005458:	e922                	sd	s0,144(sp)
    8000545a:	1100                	addi	s0,sp,160
  struct inode *ip;
  char path[MAXPATH];
  int major, minor;

  begin_op();
    8000545c:	fffff097          	auipc	ra,0xfffff
    80005460:	890080e7          	jalr	-1904(ra) # 80003cec <begin_op>
  if((argstr(0, path, MAXPATH)) < 0 ||
    80005464:	08000613          	li	a2,128
    80005468:	f7040593          	addi	a1,s0,-144
    8000546c:	4501                	li	a0,0
    8000546e:	ffffd097          	auipc	ra,0xffffd
    80005472:	3ec080e7          	jalr	1004(ra) # 8000285a <argstr>
    80005476:	04054a63          	bltz	a0,800054ca <sys_mknod+0x76>
     argint(1, &major) < 0 ||
    8000547a:	f6c40593          	addi	a1,s0,-148
    8000547e:	4505                	li	a0,1
    80005480:	ffffd097          	auipc	ra,0xffffd
    80005484:	396080e7          	jalr	918(ra) # 80002816 <argint>
  if((argstr(0, path, MAXPATH)) < 0 ||
    80005488:	04054163          	bltz	a0,800054ca <sys_mknod+0x76>
     argint(2, &minor) < 0 ||
    8000548c:	f6840593          	addi	a1,s0,-152
    80005490:	4509                	li	a0,2
    80005492:	ffffd097          	auipc	ra,0xffffd
    80005496:	384080e7          	jalr	900(ra) # 80002816 <argint>
     argint(1, &major) < 0 ||
    8000549a:	02054863          	bltz	a0,800054ca <sys_mknod+0x76>
     (ip = create(path, T_DEVICE, major, minor)) == 0){
    8000549e:	f6841683          	lh	a3,-152(s0)
    800054a2:	f6c41603          	lh	a2,-148(s0)
    800054a6:	458d                	li	a1,3
    800054a8:	f7040513          	addi	a0,s0,-144
    800054ac:	fffff097          	auipc	ra,0xfffff
    800054b0:	798080e7          	jalr	1944(ra) # 80004c44 <create>
     argint(2, &minor) < 0 ||
    800054b4:	c919                	beqz	a0,800054ca <sys_mknod+0x76>
    end_op();
    return -1;
  }
  iunlockput(ip);
    800054b6:	ffffe097          	auipc	ra,0xffffe
    800054ba:	0dc080e7          	jalr	220(ra) # 80003592 <iunlockput>
  end_op();
    800054be:	fffff097          	auipc	ra,0xfffff
    800054c2:	8ae080e7          	jalr	-1874(ra) # 80003d6c <end_op>
  return 0;
    800054c6:	4501                	li	a0,0
    800054c8:	a031                	j	800054d4 <sys_mknod+0x80>
    end_op();
    800054ca:	fffff097          	auipc	ra,0xfffff
    800054ce:	8a2080e7          	jalr	-1886(ra) # 80003d6c <end_op>
    return -1;
    800054d2:	557d                	li	a0,-1
}
    800054d4:	60ea                	ld	ra,152(sp)
    800054d6:	644a                	ld	s0,144(sp)
    800054d8:	610d                	addi	sp,sp,160
    800054da:	8082                	ret

00000000800054dc <sys_chdir>:

uint64
sys_chdir(void)
{
    800054dc:	7135                	addi	sp,sp,-160
    800054de:	ed06                	sd	ra,152(sp)
    800054e0:	e922                	sd	s0,144(sp)
    800054e2:	e526                	sd	s1,136(sp)
    800054e4:	e14a                	sd	s2,128(sp)
    800054e6:	1100                	addi	s0,sp,160
  char path[MAXPATH];
  struct inode *ip;
  struct proc *p = myproc();
    800054e8:	ffffc097          	auipc	ra,0xffffc
    800054ec:	2f4080e7          	jalr	756(ra) # 800017dc <myproc>
    800054f0:	892a                	mv	s2,a0
  
  begin_op();
    800054f2:	ffffe097          	auipc	ra,0xffffe
    800054f6:	7fa080e7          	jalr	2042(ra) # 80003cec <begin_op>
  if(argstr(0, path, MAXPATH) < 0 || (ip = namei(path)) == 0){
    800054fa:	08000613          	li	a2,128
    800054fe:	f6040593          	addi	a1,s0,-160
    80005502:	4501                	li	a0,0
    80005504:	ffffd097          	auipc	ra,0xffffd
    80005508:	356080e7          	jalr	854(ra) # 8000285a <argstr>
    8000550c:	04054b63          	bltz	a0,80005562 <sys_chdir+0x86>
    80005510:	f6040513          	addi	a0,s0,-160
    80005514:	ffffe097          	auipc	ra,0xffffe
    80005518:	5cc080e7          	jalr	1484(ra) # 80003ae0 <namei>
    8000551c:	84aa                	mv	s1,a0
    8000551e:	c131                	beqz	a0,80005562 <sys_chdir+0x86>
    end_op();
    return -1;
  }
  ilock(ip);
    80005520:	ffffe097          	auipc	ra,0xffffe
    80005524:	e34080e7          	jalr	-460(ra) # 80003354 <ilock>
  if(ip->type != T_DIR){
    80005528:	04449703          	lh	a4,68(s1)
    8000552c:	4785                	li	a5,1
    8000552e:	04f71063          	bne	a4,a5,8000556e <sys_chdir+0x92>
    iunlockput(ip);
    end_op();
    return -1;
  }
  iunlock(ip);
    80005532:	8526                	mv	a0,s1
    80005534:	ffffe097          	auipc	ra,0xffffe
    80005538:	ee2080e7          	jalr	-286(ra) # 80003416 <iunlock>
  iput(p->cwd);
    8000553c:	14893503          	ld	a0,328(s2)
    80005540:	ffffe097          	auipc	ra,0xffffe
    80005544:	f22080e7          	jalr	-222(ra) # 80003462 <iput>
  end_op();
    80005548:	fffff097          	auipc	ra,0xfffff
    8000554c:	824080e7          	jalr	-2012(ra) # 80003d6c <end_op>
  p->cwd = ip;
    80005550:	14993423          	sd	s1,328(s2)
  return 0;
    80005554:	4501                	li	a0,0
}
    80005556:	60ea                	ld	ra,152(sp)
    80005558:	644a                	ld	s0,144(sp)
    8000555a:	64aa                	ld	s1,136(sp)
    8000555c:	690a                	ld	s2,128(sp)
    8000555e:	610d                	addi	sp,sp,160
    80005560:	8082                	ret
    end_op();
    80005562:	fffff097          	auipc	ra,0xfffff
    80005566:	80a080e7          	jalr	-2038(ra) # 80003d6c <end_op>
    return -1;
    8000556a:	557d                	li	a0,-1
    8000556c:	b7ed                	j	80005556 <sys_chdir+0x7a>
    iunlockput(ip);
    8000556e:	8526                	mv	a0,s1
    80005570:	ffffe097          	auipc	ra,0xffffe
    80005574:	022080e7          	jalr	34(ra) # 80003592 <iunlockput>
    end_op();
    80005578:	ffffe097          	auipc	ra,0xffffe
    8000557c:	7f4080e7          	jalr	2036(ra) # 80003d6c <end_op>
    return -1;
    80005580:	557d                	li	a0,-1
    80005582:	bfd1                	j	80005556 <sys_chdir+0x7a>

0000000080005584 <sys_exec>:

uint64
sys_exec(void)
{
    80005584:	7145                	addi	sp,sp,-464
    80005586:	e786                	sd	ra,456(sp)
    80005588:	e3a2                	sd	s0,448(sp)
    8000558a:	ff26                	sd	s1,440(sp)
    8000558c:	fb4a                	sd	s2,432(sp)
    8000558e:	f74e                	sd	s3,424(sp)
    80005590:	f352                	sd	s4,416(sp)
    80005592:	ef56                	sd	s5,408(sp)
    80005594:	0b80                	addi	s0,sp,464
  char path[MAXPATH], *argv[MAXARG];
  int i;
  uint64 uargv, uarg;

  if(argstr(0, path, MAXPATH) < 0 || argaddr(1, &uargv) < 0){
    80005596:	08000613          	li	a2,128
    8000559a:	f4040593          	addi	a1,s0,-192
    8000559e:	4501                	li	a0,0
    800055a0:	ffffd097          	auipc	ra,0xffffd
    800055a4:	2ba080e7          	jalr	698(ra) # 8000285a <argstr>
    800055a8:	0c054863          	bltz	a0,80005678 <sys_exec+0xf4>
    800055ac:	e3840593          	addi	a1,s0,-456
    800055b0:	4505                	li	a0,1
    800055b2:	ffffd097          	auipc	ra,0xffffd
    800055b6:	286080e7          	jalr	646(ra) # 80002838 <argaddr>
    800055ba:	0c054963          	bltz	a0,8000568c <sys_exec+0x108>
    return -1;
  }
  memset(argv, 0, sizeof(argv));
    800055be:	10000613          	li	a2,256
    800055c2:	4581                	li	a1,0
    800055c4:	e4040513          	addi	a0,s0,-448
    800055c8:	ffffb097          	auipc	ra,0xffffb
    800055cc:	5a2080e7          	jalr	1442(ra) # 80000b6a <memset>
  for(i=0;; i++){
    if(i >= NELEM(argv)){
    800055d0:	e4040993          	addi	s3,s0,-448
  memset(argv, 0, sizeof(argv));
    800055d4:	894e                	mv	s2,s3
    800055d6:	4481                	li	s1,0
    if(i >= NELEM(argv)){
    800055d8:	02000a13          	li	s4,32
    800055dc:	00048a9b          	sext.w	s5,s1
      return -1;
    }
    if(fetchaddr(uargv+sizeof(uint64)*i, (uint64*)&uarg) < 0){
    800055e0:	00349513          	slli	a0,s1,0x3
    800055e4:	e3040593          	addi	a1,s0,-464
    800055e8:	e3843783          	ld	a5,-456(s0)
    800055ec:	953e                	add	a0,a0,a5
    800055ee:	ffffd097          	auipc	ra,0xffffd
    800055f2:	18e080e7          	jalr	398(ra) # 8000277c <fetchaddr>
    800055f6:	08054d63          	bltz	a0,80005690 <sys_exec+0x10c>
      return -1;
    }
    if(uarg == 0){
    800055fa:	e3043783          	ld	a5,-464(s0)
    800055fe:	cb85                	beqz	a5,8000562e <sys_exec+0xaa>
      argv[i] = 0;
      break;
    }
    argv[i] = kalloc();
    80005600:	ffffb097          	auipc	ra,0xffffb
    80005604:	35c080e7          	jalr	860(ra) # 8000095c <kalloc>
    80005608:	85aa                	mv	a1,a0
    8000560a:	00a93023          	sd	a0,0(s2)
    if(argv[i] == 0)
    8000560e:	cd29                	beqz	a0,80005668 <sys_exec+0xe4>
      panic("sys_exec kalloc");
    if(fetchstr(uarg, argv[i], PGSIZE) < 0){
    80005610:	6605                	lui	a2,0x1
    80005612:	e3043503          	ld	a0,-464(s0)
    80005616:	ffffd097          	auipc	ra,0xffffd
    8000561a:	1b8080e7          	jalr	440(ra) # 800027ce <fetchstr>
    8000561e:	06054b63          	bltz	a0,80005694 <sys_exec+0x110>
    if(i >= NELEM(argv)){
    80005622:	0485                	addi	s1,s1,1
    80005624:	0921                	addi	s2,s2,8
    80005626:	fb449be3          	bne	s1,s4,800055dc <sys_exec+0x58>
      return -1;
    8000562a:	557d                	li	a0,-1
    8000562c:	a0b9                	j	8000567a <sys_exec+0xf6>
      argv[i] = 0;
    8000562e:	0a8e                	slli	s5,s5,0x3
    80005630:	fc040793          	addi	a5,s0,-64
    80005634:	9abe                	add	s5,s5,a5
    80005636:	e80ab023          	sd	zero,-384(s5) # ffffffffffffee80 <ticks+0xffffffff7ffd9e68>
      return -1;
    }
  }

  int ret = exec(path, argv);
    8000563a:	e4040593          	addi	a1,s0,-448
    8000563e:	f4040513          	addi	a0,s0,-192
    80005642:	fffff097          	auipc	ra,0xfffff
    80005646:	1f6080e7          	jalr	502(ra) # 80004838 <exec>
    8000564a:	84aa                	mv	s1,a0

  for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
    8000564c:	10098913          	addi	s2,s3,256
    80005650:	0009b503          	ld	a0,0(s3)
    80005654:	c901                	beqz	a0,80005664 <sys_exec+0xe0>
    kfree(argv[i]);
    80005656:	ffffb097          	auipc	ra,0xffffb
    8000565a:	20a080e7          	jalr	522(ra) # 80000860 <kfree>
  for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
    8000565e:	09a1                	addi	s3,s3,8
    80005660:	ff2998e3          	bne	s3,s2,80005650 <sys_exec+0xcc>

  return ret;
    80005664:	8526                	mv	a0,s1
    80005666:	a811                	j	8000567a <sys_exec+0xf6>
      panic("sys_exec kalloc");
    80005668:	00001517          	auipc	a0,0x1
    8000566c:	0c050513          	addi	a0,a0,192 # 80006728 <userret+0x698>
    80005670:	ffffb097          	auipc	ra,0xffffb
    80005674:	ede080e7          	jalr	-290(ra) # 8000054e <panic>
    return -1;
    80005678:	557d                	li	a0,-1
}
    8000567a:	60be                	ld	ra,456(sp)
    8000567c:	641e                	ld	s0,448(sp)
    8000567e:	74fa                	ld	s1,440(sp)
    80005680:	795a                	ld	s2,432(sp)
    80005682:	79ba                	ld	s3,424(sp)
    80005684:	7a1a                	ld	s4,416(sp)
    80005686:	6afa                	ld	s5,408(sp)
    80005688:	6179                	addi	sp,sp,464
    8000568a:	8082                	ret
    return -1;
    8000568c:	557d                	li	a0,-1
    8000568e:	b7f5                	j	8000567a <sys_exec+0xf6>
      return -1;
    80005690:	557d                	li	a0,-1
    80005692:	b7e5                	j	8000567a <sys_exec+0xf6>
      return -1;
    80005694:	557d                	li	a0,-1
    80005696:	b7d5                	j	8000567a <sys_exec+0xf6>

0000000080005698 <sys_pipe>:

uint64
sys_pipe(void)
{
    80005698:	7139                	addi	sp,sp,-64
    8000569a:	fc06                	sd	ra,56(sp)
    8000569c:	f822                	sd	s0,48(sp)
    8000569e:	f426                	sd	s1,40(sp)
    800056a0:	0080                	addi	s0,sp,64
  uint64 fdarray; /* user pointer to array of two integers */
  struct file *rf, *wf;
  int fd0, fd1;
  struct proc *p = myproc();
    800056a2:	ffffc097          	auipc	ra,0xffffc
    800056a6:	13a080e7          	jalr	314(ra) # 800017dc <myproc>
    800056aa:	84aa                	mv	s1,a0

  if(argaddr(0, &fdarray) < 0)
    800056ac:	fd840593          	addi	a1,s0,-40
    800056b0:	4501                	li	a0,0
    800056b2:	ffffd097          	auipc	ra,0xffffd
    800056b6:	186080e7          	jalr	390(ra) # 80002838 <argaddr>
    return -1;
    800056ba:	57fd                	li	a5,-1
  if(argaddr(0, &fdarray) < 0)
    800056bc:	0e054063          	bltz	a0,8000579c <sys_pipe+0x104>
  if(pipealloc(&rf, &wf) < 0)
    800056c0:	fc840593          	addi	a1,s0,-56
    800056c4:	fd040513          	addi	a0,s0,-48
    800056c8:	fffff097          	auipc	ra,0xfffff
    800056cc:	e24080e7          	jalr	-476(ra) # 800044ec <pipealloc>
    return -1;
    800056d0:	57fd                	li	a5,-1
  if(pipealloc(&rf, &wf) < 0)
    800056d2:	0c054563          	bltz	a0,8000579c <sys_pipe+0x104>
  fd0 = -1;
    800056d6:	fcf42223          	sw	a5,-60(s0)
  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
    800056da:	fd043503          	ld	a0,-48(s0)
    800056de:	fffff097          	auipc	ra,0xfffff
    800056e2:	524080e7          	jalr	1316(ra) # 80004c02 <fdalloc>
    800056e6:	fca42223          	sw	a0,-60(s0)
    800056ea:	08054c63          	bltz	a0,80005782 <sys_pipe+0xea>
    800056ee:	fc843503          	ld	a0,-56(s0)
    800056f2:	fffff097          	auipc	ra,0xfffff
    800056f6:	510080e7          	jalr	1296(ra) # 80004c02 <fdalloc>
    800056fa:	fca42023          	sw	a0,-64(s0)
    800056fe:	06054863          	bltz	a0,8000576e <sys_pipe+0xd6>
      p->ofile[fd0] = 0;
    fileclose(rf);
    fileclose(wf);
    return -1;
  }
  if(copyout(p->pagetable, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
    80005702:	4691                	li	a3,4
    80005704:	fc440613          	addi	a2,s0,-60
    80005708:	fd843583          	ld	a1,-40(s0)
    8000570c:	64a8                	ld	a0,72(s1)
    8000570e:	ffffc097          	auipc	ra,0xffffc
    80005712:	df4080e7          	jalr	-524(ra) # 80001502 <copyout>
    80005716:	02054063          	bltz	a0,80005736 <sys_pipe+0x9e>
     copyout(p->pagetable, fdarray+sizeof(fd0), (char *)&fd1, sizeof(fd1)) < 0){
    8000571a:	4691                	li	a3,4
    8000571c:	fc040613          	addi	a2,s0,-64
    80005720:	fd843583          	ld	a1,-40(s0)
    80005724:	0591                	addi	a1,a1,4
    80005726:	64a8                	ld	a0,72(s1)
    80005728:	ffffc097          	auipc	ra,0xffffc
    8000572c:	dda080e7          	jalr	-550(ra) # 80001502 <copyout>
    p->ofile[fd1] = 0;
    fileclose(rf);
    fileclose(wf);
    return -1;
  }
  return 0;
    80005730:	4781                	li	a5,0
  if(copyout(p->pagetable, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
    80005732:	06055563          	bgez	a0,8000579c <sys_pipe+0x104>
    p->ofile[fd0] = 0;
    80005736:	fc442783          	lw	a5,-60(s0)
    8000573a:	07e1                	addi	a5,a5,24
    8000573c:	078e                	slli	a5,a5,0x3
    8000573e:	97a6                	add	a5,a5,s1
    80005740:	0007b423          	sd	zero,8(a5)
    p->ofile[fd1] = 0;
    80005744:	fc042503          	lw	a0,-64(s0)
    80005748:	0561                	addi	a0,a0,24
    8000574a:	050e                	slli	a0,a0,0x3
    8000574c:	9526                	add	a0,a0,s1
    8000574e:	00053423          	sd	zero,8(a0)
    fileclose(rf);
    80005752:	fd043503          	ld	a0,-48(s0)
    80005756:	fffff097          	auipc	ra,0xfffff
    8000575a:	a68080e7          	jalr	-1432(ra) # 800041be <fileclose>
    fileclose(wf);
    8000575e:	fc843503          	ld	a0,-56(s0)
    80005762:	fffff097          	auipc	ra,0xfffff
    80005766:	a5c080e7          	jalr	-1444(ra) # 800041be <fileclose>
    return -1;
    8000576a:	57fd                	li	a5,-1
    8000576c:	a805                	j	8000579c <sys_pipe+0x104>
    if(fd0 >= 0)
    8000576e:	fc442783          	lw	a5,-60(s0)
    80005772:	0007c863          	bltz	a5,80005782 <sys_pipe+0xea>
      p->ofile[fd0] = 0;
    80005776:	01878513          	addi	a0,a5,24
    8000577a:	050e                	slli	a0,a0,0x3
    8000577c:	9526                	add	a0,a0,s1
    8000577e:	00053423          	sd	zero,8(a0)
    fileclose(rf);
    80005782:	fd043503          	ld	a0,-48(s0)
    80005786:	fffff097          	auipc	ra,0xfffff
    8000578a:	a38080e7          	jalr	-1480(ra) # 800041be <fileclose>
    fileclose(wf);
    8000578e:	fc843503          	ld	a0,-56(s0)
    80005792:	fffff097          	auipc	ra,0xfffff
    80005796:	a2c080e7          	jalr	-1492(ra) # 800041be <fileclose>
    return -1;
    8000579a:	57fd                	li	a5,-1
}
    8000579c:	853e                	mv	a0,a5
    8000579e:	70e2                	ld	ra,56(sp)
    800057a0:	7442                	ld	s0,48(sp)
    800057a2:	74a2                	ld	s1,40(sp)
    800057a4:	6121                	addi	sp,sp,64
    800057a6:	8082                	ret
	...

00000000800057b0 <kernelvec>:
    800057b0:	7111                	addi	sp,sp,-256
    800057b2:	e006                	sd	ra,0(sp)
    800057b4:	e40a                	sd	sp,8(sp)
    800057b6:	e80e                	sd	gp,16(sp)
    800057b8:	ec12                	sd	tp,24(sp)
    800057ba:	f016                	sd	t0,32(sp)
    800057bc:	f41a                	sd	t1,40(sp)
    800057be:	f81e                	sd	t2,48(sp)
    800057c0:	fc22                	sd	s0,56(sp)
    800057c2:	e0a6                	sd	s1,64(sp)
    800057c4:	e4aa                	sd	a0,72(sp)
    800057c6:	e8ae                	sd	a1,80(sp)
    800057c8:	ecb2                	sd	a2,88(sp)
    800057ca:	f0b6                	sd	a3,96(sp)
    800057cc:	f4ba                	sd	a4,104(sp)
    800057ce:	f8be                	sd	a5,112(sp)
    800057d0:	fcc2                	sd	a6,120(sp)
    800057d2:	e146                	sd	a7,128(sp)
    800057d4:	e54a                	sd	s2,136(sp)
    800057d6:	e94e                	sd	s3,144(sp)
    800057d8:	ed52                	sd	s4,152(sp)
    800057da:	f156                	sd	s5,160(sp)
    800057dc:	f55a                	sd	s6,168(sp)
    800057de:	f95e                	sd	s7,176(sp)
    800057e0:	fd62                	sd	s8,184(sp)
    800057e2:	e1e6                	sd	s9,192(sp)
    800057e4:	e5ea                	sd	s10,200(sp)
    800057e6:	e9ee                	sd	s11,208(sp)
    800057e8:	edf2                	sd	t3,216(sp)
    800057ea:	f1f6                	sd	t4,224(sp)
    800057ec:	f5fa                	sd	t5,232(sp)
    800057ee:	f9fe                	sd	t6,240(sp)
    800057f0:	e59fc0ef          	jal	ra,80002648 <kerneltrap>
    800057f4:	6082                	ld	ra,0(sp)
    800057f6:	6122                	ld	sp,8(sp)
    800057f8:	61c2                	ld	gp,16(sp)
    800057fa:	7282                	ld	t0,32(sp)
    800057fc:	7322                	ld	t1,40(sp)
    800057fe:	73c2                	ld	t2,48(sp)
    80005800:	7462                	ld	s0,56(sp)
    80005802:	6486                	ld	s1,64(sp)
    80005804:	6526                	ld	a0,72(sp)
    80005806:	65c6                	ld	a1,80(sp)
    80005808:	6666                	ld	a2,88(sp)
    8000580a:	7686                	ld	a3,96(sp)
    8000580c:	7726                	ld	a4,104(sp)
    8000580e:	77c6                	ld	a5,112(sp)
    80005810:	7866                	ld	a6,120(sp)
    80005812:	688a                	ld	a7,128(sp)
    80005814:	692a                	ld	s2,136(sp)
    80005816:	69ca                	ld	s3,144(sp)
    80005818:	6a6a                	ld	s4,152(sp)
    8000581a:	7a8a                	ld	s5,160(sp)
    8000581c:	7b2a                	ld	s6,168(sp)
    8000581e:	7bca                	ld	s7,176(sp)
    80005820:	7c6a                	ld	s8,184(sp)
    80005822:	6c8e                	ld	s9,192(sp)
    80005824:	6d2e                	ld	s10,200(sp)
    80005826:	6dce                	ld	s11,208(sp)
    80005828:	6e6e                	ld	t3,216(sp)
    8000582a:	7e8e                	ld	t4,224(sp)
    8000582c:	7f2e                	ld	t5,232(sp)
    8000582e:	7fce                	ld	t6,240(sp)
    80005830:	6111                	addi	sp,sp,256
    80005832:	10200073          	sret
    80005836:	00000013          	nop
    8000583a:	00000013          	nop
    8000583e:	0001                	nop

0000000080005840 <timervec>:
    80005840:	34051573          	csrrw	a0,mscratch,a0
    80005844:	e10c                	sd	a1,0(a0)
    80005846:	e510                	sd	a2,8(a0)
    80005848:	e914                	sd	a3,16(a0)
    8000584a:	710c                	ld	a1,32(a0)
    8000584c:	7510                	ld	a2,40(a0)
    8000584e:	6194                	ld	a3,0(a1)
    80005850:	96b2                	add	a3,a3,a2
    80005852:	e194                	sd	a3,0(a1)
    80005854:	4589                	li	a1,2
    80005856:	14459073          	csrw	sip,a1
    8000585a:	6914                	ld	a3,16(a0)
    8000585c:	6510                	ld	a2,8(a0)
    8000585e:	610c                	ld	a1,0(a0)
    80005860:	34051573          	csrrw	a0,mscratch,a0
    80005864:	30200073          	mret
	...

000000008000586a <plicinit>:
/* the riscv Platform Level Interrupt Controller (PLIC). */
/* */

void
plicinit(void)
{
    8000586a:	1141                	addi	sp,sp,-16
    8000586c:	e422                	sd	s0,8(sp)
    8000586e:	0800                	addi	s0,sp,16
  /* set desired IRQ priorities non-zero (otherwise disabled). */
  *(uint32*)(PLIC + UART0_IRQ*4) = 1;
    80005870:	0c0007b7          	lui	a5,0xc000
    80005874:	4705                	li	a4,1
    80005876:	d798                	sw	a4,40(a5)
  *(uint32*)(PLIC + VIRTIO0_IRQ*4) = 1;
    80005878:	c3d8                	sw	a4,4(a5)
}
    8000587a:	6422                	ld	s0,8(sp)
    8000587c:	0141                	addi	sp,sp,16
    8000587e:	8082                	ret

0000000080005880 <plicinithart>:

void
plicinithart(void)
{
    80005880:	1141                	addi	sp,sp,-16
    80005882:	e406                	sd	ra,8(sp)
    80005884:	e022                	sd	s0,0(sp)
    80005886:	0800                	addi	s0,sp,16
  int hart = cpuid();
    80005888:	ffffc097          	auipc	ra,0xffffc
    8000588c:	f28080e7          	jalr	-216(ra) # 800017b0 <cpuid>
  
  /* set uart's enable bit for this hart's S-mode.  */
  *(uint32*)PLIC_SENABLE(hart)= (1 << UART0_IRQ) | (1 << VIRTIO0_IRQ);
    80005890:	0085171b          	slliw	a4,a0,0x8
    80005894:	0c0027b7          	lui	a5,0xc002
    80005898:	97ba                	add	a5,a5,a4
    8000589a:	40200713          	li	a4,1026
    8000589e:	08e7a023          	sw	a4,128(a5) # c002080 <_entry-0x73ffdf80>

  /* set this hart's S-mode priority threshold to 0. */
  *(uint32*)PLIC_SPRIORITY(hart) = 0;
    800058a2:	00d5151b          	slliw	a0,a0,0xd
    800058a6:	0c2017b7          	lui	a5,0xc201
    800058aa:	953e                	add	a0,a0,a5
    800058ac:	00052023          	sw	zero,0(a0)
}
    800058b0:	60a2                	ld	ra,8(sp)
    800058b2:	6402                	ld	s0,0(sp)
    800058b4:	0141                	addi	sp,sp,16
    800058b6:	8082                	ret

00000000800058b8 <plic_pending>:

/* return a bitmap of which IRQs are waiting */
/* to be served. */
uint64
plic_pending(void)
{
    800058b8:	1141                	addi	sp,sp,-16
    800058ba:	e422                	sd	s0,8(sp)
    800058bc:	0800                	addi	s0,sp,16
  /*mask = *(uint32*)(PLIC + 0x1000); */
  /*mask |= (uint64)*(uint32*)(PLIC + 0x1004) << 32; */
  mask = *(uint64*)PLIC_PENDING;

  return mask;
}
    800058be:	0c0017b7          	lui	a5,0xc001
    800058c2:	6388                	ld	a0,0(a5)
    800058c4:	6422                	ld	s0,8(sp)
    800058c6:	0141                	addi	sp,sp,16
    800058c8:	8082                	ret

00000000800058ca <plic_claim>:

/* ask the PLIC what interrupt we should serve. */
int
plic_claim(void)
{
    800058ca:	1141                	addi	sp,sp,-16
    800058cc:	e406                	sd	ra,8(sp)
    800058ce:	e022                	sd	s0,0(sp)
    800058d0:	0800                	addi	s0,sp,16
  int hart = cpuid();
    800058d2:	ffffc097          	auipc	ra,0xffffc
    800058d6:	ede080e7          	jalr	-290(ra) # 800017b0 <cpuid>
  /*int irq = *(uint32*)(PLIC + 0x201004); */
  int irq = *(uint32*)PLIC_SCLAIM(hart);
    800058da:	00d5179b          	slliw	a5,a0,0xd
    800058de:	0c201537          	lui	a0,0xc201
    800058e2:	953e                	add	a0,a0,a5
  return irq;
}
    800058e4:	4148                	lw	a0,4(a0)
    800058e6:	60a2                	ld	ra,8(sp)
    800058e8:	6402                	ld	s0,0(sp)
    800058ea:	0141                	addi	sp,sp,16
    800058ec:	8082                	ret

00000000800058ee <plic_complete>:

/* tell the PLIC we've served this IRQ. */
void
plic_complete(int irq)
{
    800058ee:	1101                	addi	sp,sp,-32
    800058f0:	ec06                	sd	ra,24(sp)
    800058f2:	e822                	sd	s0,16(sp)
    800058f4:	e426                	sd	s1,8(sp)
    800058f6:	1000                	addi	s0,sp,32
    800058f8:	84aa                	mv	s1,a0
  int hart = cpuid();
    800058fa:	ffffc097          	auipc	ra,0xffffc
    800058fe:	eb6080e7          	jalr	-330(ra) # 800017b0 <cpuid>
  /**(uint32*)(PLIC + 0x201004) = irq; */
  *(uint32*)PLIC_SCLAIM(hart) = irq;
    80005902:	00d5151b          	slliw	a0,a0,0xd
    80005906:	0c2017b7          	lui	a5,0xc201
    8000590a:	97aa                	add	a5,a5,a0
    8000590c:	c3c4                	sw	s1,4(a5)
}
    8000590e:	60e2                	ld	ra,24(sp)
    80005910:	6442                	ld	s0,16(sp)
    80005912:	64a2                	ld	s1,8(sp)
    80005914:	6105                	addi	sp,sp,32
    80005916:	8082                	ret

0000000080005918 <free_desc>:
}

/* mark a descriptor as free. */
static void
free_desc(int i)
{
    80005918:	1141                	addi	sp,sp,-16
    8000591a:	e406                	sd	ra,8(sp)
    8000591c:	e022                	sd	s0,0(sp)
    8000591e:	0800                	addi	s0,sp,16
  if(i >= NUM)
    80005920:	479d                	li	a5,7
    80005922:	04a7cc63          	blt	a5,a0,8000597a <free_desc+0x62>
    panic("virtio_disk_intr 1");
  if(disk.free[i])
    80005926:	0001c797          	auipc	a5,0x1c
    8000592a:	6da78793          	addi	a5,a5,1754 # 80022000 <disk>
    8000592e:	00a78733          	add	a4,a5,a0
    80005932:	6789                	lui	a5,0x2
    80005934:	97ba                	add	a5,a5,a4
    80005936:	0187c783          	lbu	a5,24(a5) # 2018 <_entry-0x7fffdfe8>
    8000593a:	eba1                	bnez	a5,8000598a <free_desc+0x72>
    panic("virtio_disk_intr 2");
  disk.desc[i].addr = 0;
    8000593c:	00451713          	slli	a4,a0,0x4
    80005940:	0001e797          	auipc	a5,0x1e
    80005944:	6c07b783          	ld	a5,1728(a5) # 80024000 <disk+0x2000>
    80005948:	97ba                	add	a5,a5,a4
    8000594a:	0007b023          	sd	zero,0(a5)
  disk.free[i] = 1;
    8000594e:	0001c797          	auipc	a5,0x1c
    80005952:	6b278793          	addi	a5,a5,1714 # 80022000 <disk>
    80005956:	97aa                	add	a5,a5,a0
    80005958:	6509                	lui	a0,0x2
    8000595a:	953e                	add	a0,a0,a5
    8000595c:	4785                	li	a5,1
    8000595e:	00f50c23          	sb	a5,24(a0) # 2018 <_entry-0x7fffdfe8>
  wakeup(&disk.free[0]);
    80005962:	0001e517          	auipc	a0,0x1e
    80005966:	6b650513          	addi	a0,a0,1718 # 80024018 <disk+0x2018>
    8000596a:	ffffc097          	auipc	ra,0xffffc
    8000596e:	794080e7          	jalr	1940(ra) # 800020fe <wakeup>
}
    80005972:	60a2                	ld	ra,8(sp)
    80005974:	6402                	ld	s0,0(sp)
    80005976:	0141                	addi	sp,sp,16
    80005978:	8082                	ret
    panic("virtio_disk_intr 1");
    8000597a:	00001517          	auipc	a0,0x1
    8000597e:	dbe50513          	addi	a0,a0,-578 # 80006738 <userret+0x6a8>
    80005982:	ffffb097          	auipc	ra,0xffffb
    80005986:	bcc080e7          	jalr	-1076(ra) # 8000054e <panic>
    panic("virtio_disk_intr 2");
    8000598a:	00001517          	auipc	a0,0x1
    8000598e:	dc650513          	addi	a0,a0,-570 # 80006750 <userret+0x6c0>
    80005992:	ffffb097          	auipc	ra,0xffffb
    80005996:	bbc080e7          	jalr	-1092(ra) # 8000054e <panic>

000000008000599a <virtio_disk_init>:
{
    8000599a:	1101                	addi	sp,sp,-32
    8000599c:	ec06                	sd	ra,24(sp)
    8000599e:	e822                	sd	s0,16(sp)
    800059a0:	e426                	sd	s1,8(sp)
    800059a2:	1000                	addi	s0,sp,32
  initlock(&disk.vdisk_lock, "virtio_disk");
    800059a4:	00001597          	auipc	a1,0x1
    800059a8:	dc458593          	addi	a1,a1,-572 # 80006768 <userret+0x6d8>
    800059ac:	0001e517          	auipc	a0,0x1e
    800059b0:	6fc50513          	addi	a0,a0,1788 # 800240a8 <disk+0x20a8>
    800059b4:	ffffb097          	auipc	ra,0xffffb
    800059b8:	008080e7          	jalr	8(ra) # 800009bc <initlock>
  if(*R(VIRTIO_MMIO_MAGIC_VALUE) != 0x74726976 ||
    800059bc:	100017b7          	lui	a5,0x10001
    800059c0:	4398                	lw	a4,0(a5)
    800059c2:	2701                	sext.w	a4,a4
    800059c4:	747277b7          	lui	a5,0x74727
    800059c8:	97678793          	addi	a5,a5,-1674 # 74726976 <_entry-0xb8d968a>
    800059cc:	0ef71163          	bne	a4,a5,80005aae <virtio_disk_init+0x114>
     *R(VIRTIO_MMIO_VERSION) != 1 ||
    800059d0:	100017b7          	lui	a5,0x10001
    800059d4:	43dc                	lw	a5,4(a5)
    800059d6:	2781                	sext.w	a5,a5
  if(*R(VIRTIO_MMIO_MAGIC_VALUE) != 0x74726976 ||
    800059d8:	4705                	li	a4,1
    800059da:	0ce79a63          	bne	a5,a4,80005aae <virtio_disk_init+0x114>
     *R(VIRTIO_MMIO_DEVICE_ID) != 2 ||
    800059de:	100017b7          	lui	a5,0x10001
    800059e2:	479c                	lw	a5,8(a5)
    800059e4:	2781                	sext.w	a5,a5
     *R(VIRTIO_MMIO_VERSION) != 1 ||
    800059e6:	4709                	li	a4,2
    800059e8:	0ce79363          	bne	a5,a4,80005aae <virtio_disk_init+0x114>
     *R(VIRTIO_MMIO_VENDOR_ID) != 0x554d4551){
    800059ec:	100017b7          	lui	a5,0x10001
    800059f0:	47d8                	lw	a4,12(a5)
    800059f2:	2701                	sext.w	a4,a4
     *R(VIRTIO_MMIO_DEVICE_ID) != 2 ||
    800059f4:	554d47b7          	lui	a5,0x554d4
    800059f8:	55178793          	addi	a5,a5,1361 # 554d4551 <_entry-0x2ab2baaf>
    800059fc:	0af71963          	bne	a4,a5,80005aae <virtio_disk_init+0x114>
  *R(VIRTIO_MMIO_STATUS) = status;
    80005a00:	100017b7          	lui	a5,0x10001
    80005a04:	4705                	li	a4,1
    80005a06:	dbb8                	sw	a4,112(a5)
  *R(VIRTIO_MMIO_STATUS) = status;
    80005a08:	470d                	li	a4,3
    80005a0a:	dbb8                	sw	a4,112(a5)
  uint64 features = *R(VIRTIO_MMIO_DEVICE_FEATURES);
    80005a0c:	4b94                	lw	a3,16(a5)
  features &= ~(1 << VIRTIO_RING_F_INDIRECT_DESC);
    80005a0e:	c7ffe737          	lui	a4,0xc7ffe
    80005a12:	75f70713          	addi	a4,a4,1887 # ffffffffc7ffe75f <ticks+0xffffffff47fd9747>
    80005a16:	8f75                	and	a4,a4,a3
  *R(VIRTIO_MMIO_DRIVER_FEATURES) = features;
    80005a18:	2701                	sext.w	a4,a4
    80005a1a:	d398                	sw	a4,32(a5)
  *R(VIRTIO_MMIO_STATUS) = status;
    80005a1c:	472d                	li	a4,11
    80005a1e:	dbb8                	sw	a4,112(a5)
  *R(VIRTIO_MMIO_STATUS) = status;
    80005a20:	473d                	li	a4,15
    80005a22:	dbb8                	sw	a4,112(a5)
  *R(VIRTIO_MMIO_GUEST_PAGE_SIZE) = PGSIZE;
    80005a24:	6705                	lui	a4,0x1
    80005a26:	d798                	sw	a4,40(a5)
  *R(VIRTIO_MMIO_QUEUE_SEL) = 0;
    80005a28:	0207a823          	sw	zero,48(a5) # 10001030 <_entry-0x6fffefd0>
  uint32 max = *R(VIRTIO_MMIO_QUEUE_NUM_MAX);
    80005a2c:	5bdc                	lw	a5,52(a5)
    80005a2e:	2781                	sext.w	a5,a5
  if(max == 0)
    80005a30:	c7d9                	beqz	a5,80005abe <virtio_disk_init+0x124>
  if(max < NUM)
    80005a32:	471d                	li	a4,7
    80005a34:	08f77d63          	bgeu	a4,a5,80005ace <virtio_disk_init+0x134>
  *R(VIRTIO_MMIO_QUEUE_NUM) = NUM;
    80005a38:	100014b7          	lui	s1,0x10001
    80005a3c:	47a1                	li	a5,8
    80005a3e:	dc9c                	sw	a5,56(s1)
  memset(disk.pages, 0, sizeof(disk.pages));
    80005a40:	6609                	lui	a2,0x2
    80005a42:	4581                	li	a1,0
    80005a44:	0001c517          	auipc	a0,0x1c
    80005a48:	5bc50513          	addi	a0,a0,1468 # 80022000 <disk>
    80005a4c:	ffffb097          	auipc	ra,0xffffb
    80005a50:	11e080e7          	jalr	286(ra) # 80000b6a <memset>
  *R(VIRTIO_MMIO_QUEUE_PFN) = ((uint64)disk.pages) >> PGSHIFT;
    80005a54:	0001c717          	auipc	a4,0x1c
    80005a58:	5ac70713          	addi	a4,a4,1452 # 80022000 <disk>
    80005a5c:	00c75793          	srli	a5,a4,0xc
    80005a60:	2781                	sext.w	a5,a5
    80005a62:	c0bc                	sw	a5,64(s1)
  disk.desc = (struct VRingDesc *) disk.pages;
    80005a64:	0001e797          	auipc	a5,0x1e
    80005a68:	59c78793          	addi	a5,a5,1436 # 80024000 <disk+0x2000>
    80005a6c:	e398                	sd	a4,0(a5)
  disk.avail = (uint16*)(((char*)disk.desc) + NUM*sizeof(struct VRingDesc));
    80005a6e:	0001c717          	auipc	a4,0x1c
    80005a72:	61270713          	addi	a4,a4,1554 # 80022080 <disk+0x80>
    80005a76:	e798                	sd	a4,8(a5)
  disk.used = (struct UsedArea *) (disk.pages + PGSIZE);
    80005a78:	0001d717          	auipc	a4,0x1d
    80005a7c:	58870713          	addi	a4,a4,1416 # 80023000 <disk+0x1000>
    80005a80:	eb98                	sd	a4,16(a5)
    disk.free[i] = 1;
    80005a82:	4705                	li	a4,1
    80005a84:	00e78c23          	sb	a4,24(a5)
    80005a88:	00e78ca3          	sb	a4,25(a5)
    80005a8c:	00e78d23          	sb	a4,26(a5)
    80005a90:	00e78da3          	sb	a4,27(a5)
    80005a94:	00e78e23          	sb	a4,28(a5)
    80005a98:	00e78ea3          	sb	a4,29(a5)
    80005a9c:	00e78f23          	sb	a4,30(a5)
    80005aa0:	00e78fa3          	sb	a4,31(a5)
}
    80005aa4:	60e2                	ld	ra,24(sp)
    80005aa6:	6442                	ld	s0,16(sp)
    80005aa8:	64a2                	ld	s1,8(sp)
    80005aaa:	6105                	addi	sp,sp,32
    80005aac:	8082                	ret
    panic("could not find virtio disk");
    80005aae:	00001517          	auipc	a0,0x1
    80005ab2:	cca50513          	addi	a0,a0,-822 # 80006778 <userret+0x6e8>
    80005ab6:	ffffb097          	auipc	ra,0xffffb
    80005aba:	a98080e7          	jalr	-1384(ra) # 8000054e <panic>
    panic("virtio disk has no queue 0");
    80005abe:	00001517          	auipc	a0,0x1
    80005ac2:	cda50513          	addi	a0,a0,-806 # 80006798 <userret+0x708>
    80005ac6:	ffffb097          	auipc	ra,0xffffb
    80005aca:	a88080e7          	jalr	-1400(ra) # 8000054e <panic>
    panic("virtio disk max queue too short");
    80005ace:	00001517          	auipc	a0,0x1
    80005ad2:	cea50513          	addi	a0,a0,-790 # 800067b8 <userret+0x728>
    80005ad6:	ffffb097          	auipc	ra,0xffffb
    80005ada:	a78080e7          	jalr	-1416(ra) # 8000054e <panic>

0000000080005ade <virtio_disk_rw>:
  return 0;
}

void
virtio_disk_rw(struct buf *b, int write)
{
    80005ade:	7119                	addi	sp,sp,-128
    80005ae0:	fc86                	sd	ra,120(sp)
    80005ae2:	f8a2                	sd	s0,112(sp)
    80005ae4:	f4a6                	sd	s1,104(sp)
    80005ae6:	f0ca                	sd	s2,96(sp)
    80005ae8:	ecce                	sd	s3,88(sp)
    80005aea:	e8d2                	sd	s4,80(sp)
    80005aec:	e4d6                	sd	s5,72(sp)
    80005aee:	e0da                	sd	s6,64(sp)
    80005af0:	fc5e                	sd	s7,56(sp)
    80005af2:	f862                	sd	s8,48(sp)
    80005af4:	f466                	sd	s9,40(sp)
    80005af6:	f06a                	sd	s10,32(sp)
    80005af8:	0100                	addi	s0,sp,128
    80005afa:	892a                	mv	s2,a0
    80005afc:	8d2e                	mv	s10,a1
  uint64 sector = b->blockno * (BSIZE / 512);
    80005afe:	00c52c83          	lw	s9,12(a0)
    80005b02:	001c9c9b          	slliw	s9,s9,0x1
    80005b06:	1c82                	slli	s9,s9,0x20
    80005b08:	020cdc93          	srli	s9,s9,0x20

  acquire(&disk.vdisk_lock);
    80005b0c:	0001e517          	auipc	a0,0x1e
    80005b10:	59c50513          	addi	a0,a0,1436 # 800240a8 <disk+0x20a8>
    80005b14:	ffffb097          	auipc	ra,0xffffb
    80005b18:	fba080e7          	jalr	-70(ra) # 80000ace <acquire>
  for(int i = 0; i < 3; i++){
    80005b1c:	4981                	li	s3,0
  for(int i = 0; i < NUM; i++){
    80005b1e:	4c21                	li	s8,8
      disk.free[i] = 0;
    80005b20:	0001cb97          	auipc	s7,0x1c
    80005b24:	4e0b8b93          	addi	s7,s7,1248 # 80022000 <disk>
    80005b28:	6b09                	lui	s6,0x2
  for(int i = 0; i < 3; i++){
    80005b2a:	4a8d                	li	s5,3
  for(int i = 0; i < NUM; i++){
    80005b2c:	8a4e                	mv	s4,s3
    80005b2e:	a051                	j	80005bb2 <virtio_disk_rw+0xd4>
      disk.free[i] = 0;
    80005b30:	00fb86b3          	add	a3,s7,a5
    80005b34:	96da                	add	a3,a3,s6
    80005b36:	00068c23          	sb	zero,24(a3)
    idx[i] = alloc_desc();
    80005b3a:	c21c                	sw	a5,0(a2)
    if(idx[i] < 0){
    80005b3c:	0207c563          	bltz	a5,80005b66 <virtio_disk_rw+0x88>
  for(int i = 0; i < 3; i++){
    80005b40:	2485                	addiw	s1,s1,1
    80005b42:	0711                	addi	a4,a4,4
    80005b44:	1b548863          	beq	s1,s5,80005cf4 <virtio_disk_rw+0x216>
    idx[i] = alloc_desc();
    80005b48:	863a                	mv	a2,a4
  for(int i = 0; i < NUM; i++){
    80005b4a:	0001e697          	auipc	a3,0x1e
    80005b4e:	4ce68693          	addi	a3,a3,1230 # 80024018 <disk+0x2018>
    80005b52:	87d2                	mv	a5,s4
    if(disk.free[i]){
    80005b54:	0006c583          	lbu	a1,0(a3)
    80005b58:	fde1                	bnez	a1,80005b30 <virtio_disk_rw+0x52>
  for(int i = 0; i < NUM; i++){
    80005b5a:	2785                	addiw	a5,a5,1
    80005b5c:	0685                	addi	a3,a3,1
    80005b5e:	ff879be3          	bne	a5,s8,80005b54 <virtio_disk_rw+0x76>
    idx[i] = alloc_desc();
    80005b62:	57fd                	li	a5,-1
    80005b64:	c21c                	sw	a5,0(a2)
      for(int j = 0; j < i; j++)
    80005b66:	02905a63          	blez	s1,80005b9a <virtio_disk_rw+0xbc>
        free_desc(idx[j]);
    80005b6a:	f9042503          	lw	a0,-112(s0)
    80005b6e:	00000097          	auipc	ra,0x0
    80005b72:	daa080e7          	jalr	-598(ra) # 80005918 <free_desc>
      for(int j = 0; j < i; j++)
    80005b76:	4785                	li	a5,1
    80005b78:	0297d163          	bge	a5,s1,80005b9a <virtio_disk_rw+0xbc>
        free_desc(idx[j]);
    80005b7c:	f9442503          	lw	a0,-108(s0)
    80005b80:	00000097          	auipc	ra,0x0
    80005b84:	d98080e7          	jalr	-616(ra) # 80005918 <free_desc>
      for(int j = 0; j < i; j++)
    80005b88:	4789                	li	a5,2
    80005b8a:	0097d863          	bge	a5,s1,80005b9a <virtio_disk_rw+0xbc>
        free_desc(idx[j]);
    80005b8e:	f9842503          	lw	a0,-104(s0)
    80005b92:	00000097          	auipc	ra,0x0
    80005b96:	d86080e7          	jalr	-634(ra) # 80005918 <free_desc>
  int idx[3];
  while(1){
    if(alloc3_desc(idx) == 0) {
      break;
    }
    sleep(&disk.free[0], &disk.vdisk_lock);
    80005b9a:	0001e597          	auipc	a1,0x1e
    80005b9e:	50e58593          	addi	a1,a1,1294 # 800240a8 <disk+0x20a8>
    80005ba2:	0001e517          	auipc	a0,0x1e
    80005ba6:	47650513          	addi	a0,a0,1142 # 80024018 <disk+0x2018>
    80005baa:	ffffc097          	auipc	ra,0xffffc
    80005bae:	408080e7          	jalr	1032(ra) # 80001fb2 <sleep>
  for(int i = 0; i < 3; i++){
    80005bb2:	f9040713          	addi	a4,s0,-112
    80005bb6:	84ce                	mv	s1,s3
    80005bb8:	bf41                	j	80005b48 <virtio_disk_rw+0x6a>
  disk.desc[idx[0]].next = idx[1];

  disk.desc[idx[1]].addr = (uint64) b->data;
  disk.desc[idx[1]].len = BSIZE;
  if(write)
    disk.desc[idx[1]].flags = 0; /* device reads b->data */
    80005bba:	0001e717          	auipc	a4,0x1e
    80005bbe:	44673703          	ld	a4,1094(a4) # 80024000 <disk+0x2000>
    80005bc2:	973e                	add	a4,a4,a5
    80005bc4:	00071623          	sh	zero,12(a4)
  else
    disk.desc[idx[1]].flags = VRING_DESC_F_WRITE; /* device writes b->data */
  disk.desc[idx[1]].flags |= VRING_DESC_F_NEXT;
    80005bc8:	0001c517          	auipc	a0,0x1c
    80005bcc:	43850513          	addi	a0,a0,1080 # 80022000 <disk>
    80005bd0:	0001e717          	auipc	a4,0x1e
    80005bd4:	43070713          	addi	a4,a4,1072 # 80024000 <disk+0x2000>
    80005bd8:	6310                	ld	a2,0(a4)
    80005bda:	963e                	add	a2,a2,a5
    80005bdc:	00c65583          	lhu	a1,12(a2) # 200c <_entry-0x7fffdff4>
    80005be0:	0015e593          	ori	a1,a1,1
    80005be4:	00b61623          	sh	a1,12(a2)
  disk.desc[idx[1]].next = idx[2];
    80005be8:	f9842683          	lw	a3,-104(s0)
    80005bec:	6310                	ld	a2,0(a4)
    80005bee:	97b2                	add	a5,a5,a2
    80005bf0:	00d79723          	sh	a3,14(a5)

  disk.info[idx[0]].status = 0;
    80005bf4:	20048613          	addi	a2,s1,512 # 10001200 <_entry-0x6fffee00>
    80005bf8:	0612                	slli	a2,a2,0x4
    80005bfa:	962a                	add	a2,a2,a0
    80005bfc:	02060823          	sb	zero,48(a2)
  disk.desc[idx[2]].addr = (uint64) &disk.info[idx[0]].status;
    80005c00:	00469793          	slli	a5,a3,0x4
    80005c04:	630c                	ld	a1,0(a4)
    80005c06:	95be                	add	a1,a1,a5
    80005c08:	6689                	lui	a3,0x2
    80005c0a:	03068693          	addi	a3,a3,48 # 2030 <_entry-0x7fffdfd0>
    80005c0e:	96ce                	add	a3,a3,s3
    80005c10:	96aa                	add	a3,a3,a0
    80005c12:	e194                	sd	a3,0(a1)
  disk.desc[idx[2]].len = 1;
    80005c14:	6314                	ld	a3,0(a4)
    80005c16:	96be                	add	a3,a3,a5
    80005c18:	4585                	li	a1,1
    80005c1a:	c68c                	sw	a1,8(a3)
  disk.desc[idx[2]].flags = VRING_DESC_F_WRITE; /* device writes the status */
    80005c1c:	6314                	ld	a3,0(a4)
    80005c1e:	96be                	add	a3,a3,a5
    80005c20:	4509                	li	a0,2
    80005c22:	00a69623          	sh	a0,12(a3)
  disk.desc[idx[2]].next = 0;
    80005c26:	6314                	ld	a3,0(a4)
    80005c28:	97b6                	add	a5,a5,a3
    80005c2a:	00079723          	sh	zero,14(a5)

  /* record struct buf for virtio_disk_intr(). */
  b->disk = 1;
    80005c2e:	00b92223          	sw	a1,4(s2)
  disk.info[idx[0]].b = b;
    80005c32:	03263423          	sd	s2,40(a2)

  /* avail[0] is flags */
  /* avail[1] tells the device how far to look in avail[2...]. */
  /* avail[2...] are desc[] indices the device should process. */
  /* we only tell device the first index in our chain of descriptors. */
  disk.avail[2 + (disk.avail[1] % NUM)] = idx[0];
    80005c36:	6714                	ld	a3,8(a4)
    80005c38:	0026d783          	lhu	a5,2(a3)
    80005c3c:	8b9d                	andi	a5,a5,7
    80005c3e:	0789                	addi	a5,a5,2
    80005c40:	0786                	slli	a5,a5,0x1
    80005c42:	97b6                	add	a5,a5,a3
    80005c44:	00979023          	sh	s1,0(a5)
  __sync_synchronize();
    80005c48:	0ff0000f          	fence
  disk.avail[1] = disk.avail[1] + 1;
    80005c4c:	6718                	ld	a4,8(a4)
    80005c4e:	00275783          	lhu	a5,2(a4)
    80005c52:	2785                	addiw	a5,a5,1
    80005c54:	00f71123          	sh	a5,2(a4)

  *R(VIRTIO_MMIO_QUEUE_NOTIFY) = 0; /* value is queue number */
    80005c58:	100017b7          	lui	a5,0x10001
    80005c5c:	0407a823          	sw	zero,80(a5) # 10001050 <_entry-0x6fffefb0>

  /* Wait for virtio_disk_intr() to say request has finished. */
  while(b->disk == 1) {
    80005c60:	00492783          	lw	a5,4(s2)
    80005c64:	02b79163          	bne	a5,a1,80005c86 <virtio_disk_rw+0x1a8>
    sleep(b, &disk.vdisk_lock);
    80005c68:	0001e997          	auipc	s3,0x1e
    80005c6c:	44098993          	addi	s3,s3,1088 # 800240a8 <disk+0x20a8>
  while(b->disk == 1) {
    80005c70:	4485                	li	s1,1
    sleep(b, &disk.vdisk_lock);
    80005c72:	85ce                	mv	a1,s3
    80005c74:	854a                	mv	a0,s2
    80005c76:	ffffc097          	auipc	ra,0xffffc
    80005c7a:	33c080e7          	jalr	828(ra) # 80001fb2 <sleep>
  while(b->disk == 1) {
    80005c7e:	00492783          	lw	a5,4(s2)
    80005c82:	fe9788e3          	beq	a5,s1,80005c72 <virtio_disk_rw+0x194>
  }

  disk.info[idx[0]].b = 0;
    80005c86:	f9042483          	lw	s1,-112(s0)
    80005c8a:	20048793          	addi	a5,s1,512
    80005c8e:	00479713          	slli	a4,a5,0x4
    80005c92:	0001c797          	auipc	a5,0x1c
    80005c96:	36e78793          	addi	a5,a5,878 # 80022000 <disk>
    80005c9a:	97ba                	add	a5,a5,a4
    80005c9c:	0207b423          	sd	zero,40(a5)
    if(disk.desc[i].flags & VRING_DESC_F_NEXT)
    80005ca0:	0001e917          	auipc	s2,0x1e
    80005ca4:	36090913          	addi	s2,s2,864 # 80024000 <disk+0x2000>
    free_desc(i);
    80005ca8:	8526                	mv	a0,s1
    80005caa:	00000097          	auipc	ra,0x0
    80005cae:	c6e080e7          	jalr	-914(ra) # 80005918 <free_desc>
    if(disk.desc[i].flags & VRING_DESC_F_NEXT)
    80005cb2:	0492                	slli	s1,s1,0x4
    80005cb4:	00093783          	ld	a5,0(s2)
    80005cb8:	94be                	add	s1,s1,a5
    80005cba:	00c4d783          	lhu	a5,12(s1)
    80005cbe:	8b85                	andi	a5,a5,1
    80005cc0:	c781                	beqz	a5,80005cc8 <virtio_disk_rw+0x1ea>
      i = disk.desc[i].next;
    80005cc2:	00e4d483          	lhu	s1,14(s1)
    free_desc(i);
    80005cc6:	b7cd                	j	80005ca8 <virtio_disk_rw+0x1ca>
  free_chain(idx[0]);

  release(&disk.vdisk_lock);
    80005cc8:	0001e517          	auipc	a0,0x1e
    80005ccc:	3e050513          	addi	a0,a0,992 # 800240a8 <disk+0x20a8>
    80005cd0:	ffffb097          	auipc	ra,0xffffb
    80005cd4:	e52080e7          	jalr	-430(ra) # 80000b22 <release>
}
    80005cd8:	70e6                	ld	ra,120(sp)
    80005cda:	7446                	ld	s0,112(sp)
    80005cdc:	74a6                	ld	s1,104(sp)
    80005cde:	7906                	ld	s2,96(sp)
    80005ce0:	69e6                	ld	s3,88(sp)
    80005ce2:	6a46                	ld	s4,80(sp)
    80005ce4:	6aa6                	ld	s5,72(sp)
    80005ce6:	6b06                	ld	s6,64(sp)
    80005ce8:	7be2                	ld	s7,56(sp)
    80005cea:	7c42                	ld	s8,48(sp)
    80005cec:	7ca2                	ld	s9,40(sp)
    80005cee:	7d02                	ld	s10,32(sp)
    80005cf0:	6109                	addi	sp,sp,128
    80005cf2:	8082                	ret
  if(write)
    80005cf4:	01a037b3          	snez	a5,s10
    80005cf8:	f8f42023          	sw	a5,-128(s0)
  buf0.reserved = 0;
    80005cfc:	f8042223          	sw	zero,-124(s0)
  buf0.sector = sector;
    80005d00:	f9943423          	sd	s9,-120(s0)
  disk.desc[idx[0]].addr = (uint64) kvmpa((uint64) &buf0);
    80005d04:	f9042483          	lw	s1,-112(s0)
    80005d08:	00449993          	slli	s3,s1,0x4
    80005d0c:	0001ea17          	auipc	s4,0x1e
    80005d10:	2f4a0a13          	addi	s4,s4,756 # 80024000 <disk+0x2000>
    80005d14:	000a3a83          	ld	s5,0(s4)
    80005d18:	9ace                	add	s5,s5,s3
    80005d1a:	f8040513          	addi	a0,s0,-128
    80005d1e:	ffffb097          	auipc	ra,0xffffb
    80005d22:	268080e7          	jalr	616(ra) # 80000f86 <kvmpa>
    80005d26:	00aab023          	sd	a0,0(s5)
  disk.desc[idx[0]].len = sizeof(buf0);
    80005d2a:	000a3783          	ld	a5,0(s4)
    80005d2e:	97ce                	add	a5,a5,s3
    80005d30:	4741                	li	a4,16
    80005d32:	c798                	sw	a4,8(a5)
  disk.desc[idx[0]].flags = VRING_DESC_F_NEXT;
    80005d34:	000a3783          	ld	a5,0(s4)
    80005d38:	97ce                	add	a5,a5,s3
    80005d3a:	4705                	li	a4,1
    80005d3c:	00e79623          	sh	a4,12(a5)
  disk.desc[idx[0]].next = idx[1];
    80005d40:	f9442783          	lw	a5,-108(s0)
    80005d44:	000a3703          	ld	a4,0(s4)
    80005d48:	974e                	add	a4,a4,s3
    80005d4a:	00f71723          	sh	a5,14(a4)
  disk.desc[idx[1]].addr = (uint64) b->data;
    80005d4e:	0792                	slli	a5,a5,0x4
    80005d50:	000a3703          	ld	a4,0(s4)
    80005d54:	973e                	add	a4,a4,a5
    80005d56:	06090693          	addi	a3,s2,96
    80005d5a:	e314                	sd	a3,0(a4)
  disk.desc[idx[1]].len = BSIZE;
    80005d5c:	000a3703          	ld	a4,0(s4)
    80005d60:	973e                	add	a4,a4,a5
    80005d62:	40000693          	li	a3,1024
    80005d66:	c714                	sw	a3,8(a4)
  if(write)
    80005d68:	e40d19e3          	bnez	s10,80005bba <virtio_disk_rw+0xdc>
    disk.desc[idx[1]].flags = VRING_DESC_F_WRITE; /* device writes b->data */
    80005d6c:	0001e717          	auipc	a4,0x1e
    80005d70:	29473703          	ld	a4,660(a4) # 80024000 <disk+0x2000>
    80005d74:	973e                	add	a4,a4,a5
    80005d76:	4689                	li	a3,2
    80005d78:	00d71623          	sh	a3,12(a4)
    80005d7c:	b5b1                	j	80005bc8 <virtio_disk_rw+0xea>

0000000080005d7e <virtio_disk_intr>:

void
virtio_disk_intr()
{
    80005d7e:	1101                	addi	sp,sp,-32
    80005d80:	ec06                	sd	ra,24(sp)
    80005d82:	e822                	sd	s0,16(sp)
    80005d84:	e426                	sd	s1,8(sp)
    80005d86:	e04a                	sd	s2,0(sp)
    80005d88:	1000                	addi	s0,sp,32
  acquire(&disk.vdisk_lock);
    80005d8a:	0001e517          	auipc	a0,0x1e
    80005d8e:	31e50513          	addi	a0,a0,798 # 800240a8 <disk+0x20a8>
    80005d92:	ffffb097          	auipc	ra,0xffffb
    80005d96:	d3c080e7          	jalr	-708(ra) # 80000ace <acquire>

  while((disk.used_idx % NUM) != (disk.used->id % NUM)){
    80005d9a:	0001e717          	auipc	a4,0x1e
    80005d9e:	26670713          	addi	a4,a4,614 # 80024000 <disk+0x2000>
    80005da2:	02075783          	lhu	a5,32(a4)
    80005da6:	6b18                	ld	a4,16(a4)
    80005da8:	00275683          	lhu	a3,2(a4)
    80005dac:	8ebd                	xor	a3,a3,a5
    80005dae:	8a9d                	andi	a3,a3,7
    80005db0:	cab9                	beqz	a3,80005e06 <virtio_disk_intr+0x88>
    int id = disk.used->elems[disk.used_idx].id;

    if(disk.info[id].status != 0)
    80005db2:	0001c917          	auipc	s2,0x1c
    80005db6:	24e90913          	addi	s2,s2,590 # 80022000 <disk>
      panic("virtio_disk_intr status");
    
    disk.info[id].b->disk = 0;   /* disk is done with buf */
    wakeup(disk.info[id].b);

    disk.used_idx = (disk.used_idx + 1) % NUM;
    80005dba:	0001e497          	auipc	s1,0x1e
    80005dbe:	24648493          	addi	s1,s1,582 # 80024000 <disk+0x2000>
    int id = disk.used->elems[disk.used_idx].id;
    80005dc2:	078e                	slli	a5,a5,0x3
    80005dc4:	97ba                	add	a5,a5,a4
    80005dc6:	43dc                	lw	a5,4(a5)
    if(disk.info[id].status != 0)
    80005dc8:	20078713          	addi	a4,a5,512
    80005dcc:	0712                	slli	a4,a4,0x4
    80005dce:	974a                	add	a4,a4,s2
    80005dd0:	03074703          	lbu	a4,48(a4)
    80005dd4:	e739                	bnez	a4,80005e22 <virtio_disk_intr+0xa4>
    disk.info[id].b->disk = 0;   /* disk is done with buf */
    80005dd6:	20078793          	addi	a5,a5,512
    80005dda:	0792                	slli	a5,a5,0x4
    80005ddc:	97ca                	add	a5,a5,s2
    80005dde:	7798                	ld	a4,40(a5)
    80005de0:	00072223          	sw	zero,4(a4)
    wakeup(disk.info[id].b);
    80005de4:	7788                	ld	a0,40(a5)
    80005de6:	ffffc097          	auipc	ra,0xffffc
    80005dea:	318080e7          	jalr	792(ra) # 800020fe <wakeup>
    disk.used_idx = (disk.used_idx + 1) % NUM;
    80005dee:	0204d783          	lhu	a5,32(s1)
    80005df2:	2785                	addiw	a5,a5,1
    80005df4:	8b9d                	andi	a5,a5,7
    80005df6:	02f49023          	sh	a5,32(s1)
  while((disk.used_idx % NUM) != (disk.used->id % NUM)){
    80005dfa:	6898                	ld	a4,16(s1)
    80005dfc:	00275683          	lhu	a3,2(a4)
    80005e00:	8a9d                	andi	a3,a3,7
    80005e02:	fcf690e3          	bne	a3,a5,80005dc2 <virtio_disk_intr+0x44>
  }

  release(&disk.vdisk_lock);
    80005e06:	0001e517          	auipc	a0,0x1e
    80005e0a:	2a250513          	addi	a0,a0,674 # 800240a8 <disk+0x20a8>
    80005e0e:	ffffb097          	auipc	ra,0xffffb
    80005e12:	d14080e7          	jalr	-748(ra) # 80000b22 <release>
}
    80005e16:	60e2                	ld	ra,24(sp)
    80005e18:	6442                	ld	s0,16(sp)
    80005e1a:	64a2                	ld	s1,8(sp)
    80005e1c:	6902                	ld	s2,0(sp)
    80005e1e:	6105                	addi	sp,sp,32
    80005e20:	8082                	ret
      panic("virtio_disk_intr status");
    80005e22:	00001517          	auipc	a0,0x1
    80005e26:	9b650513          	addi	a0,a0,-1610 # 800067d8 <userret+0x748>
    80005e2a:	ffffa097          	auipc	ra,0xffffa
    80005e2e:	724080e7          	jalr	1828(ra) # 8000054e <panic>
	...

0000000080006000 <trampoline>:
    80006000:	14051573          	csrrw	a0,sscratch,a0
    80006004:	02153423          	sd	ra,40(a0)
    80006008:	02253823          	sd	sp,48(a0)
    8000600c:	02353c23          	sd	gp,56(a0)
    80006010:	04453023          	sd	tp,64(a0)
    80006014:	04553423          	sd	t0,72(a0)
    80006018:	04653823          	sd	t1,80(a0)
    8000601c:	04753c23          	sd	t2,88(a0)
    80006020:	f120                	sd	s0,96(a0)
    80006022:	f524                	sd	s1,104(a0)
    80006024:	fd2c                	sd	a1,120(a0)
    80006026:	e150                	sd	a2,128(a0)
    80006028:	e554                	sd	a3,136(a0)
    8000602a:	e958                	sd	a4,144(a0)
    8000602c:	ed5c                	sd	a5,152(a0)
    8000602e:	0b053023          	sd	a6,160(a0)
    80006032:	0b153423          	sd	a7,168(a0)
    80006036:	0b253823          	sd	s2,176(a0)
    8000603a:	0b353c23          	sd	s3,184(a0)
    8000603e:	0d453023          	sd	s4,192(a0)
    80006042:	0d553423          	sd	s5,200(a0)
    80006046:	0d653823          	sd	s6,208(a0)
    8000604a:	0d753c23          	sd	s7,216(a0)
    8000604e:	0f853023          	sd	s8,224(a0)
    80006052:	0f953423          	sd	s9,232(a0)
    80006056:	0fa53823          	sd	s10,240(a0)
    8000605a:	0fb53c23          	sd	s11,248(a0)
    8000605e:	11c53023          	sd	t3,256(a0)
    80006062:	11d53423          	sd	t4,264(a0)
    80006066:	11e53823          	sd	t5,272(a0)
    8000606a:	11f53c23          	sd	t6,280(a0)
    8000606e:	140022f3          	csrr	t0,sscratch
    80006072:	06553823          	sd	t0,112(a0)
    80006076:	00853103          	ld	sp,8(a0)
    8000607a:	02053203          	ld	tp,32(a0)
    8000607e:	01053283          	ld	t0,16(a0)
    80006082:	00053303          	ld	t1,0(a0)
    80006086:	12000073          	sfence.vma
    8000608a:	18031073          	csrw	satp,t1
    8000608e:	8282                	jr	t0

0000000080006090 <userret>:
    80006090:	12000073          	sfence.vma
    80006094:	18059073          	csrw	satp,a1
    80006098:	07053283          	ld	t0,112(a0)
    8000609c:	14029073          	csrw	sscratch,t0
    800060a0:	02853083          	ld	ra,40(a0)
    800060a4:	03053103          	ld	sp,48(a0)
    800060a8:	03853183          	ld	gp,56(a0)
    800060ac:	04053203          	ld	tp,64(a0)
    800060b0:	04853283          	ld	t0,72(a0)
    800060b4:	05053303          	ld	t1,80(a0)
    800060b8:	05853383          	ld	t2,88(a0)
    800060bc:	7120                	ld	s0,96(a0)
    800060be:	7524                	ld	s1,104(a0)
    800060c0:	7d2c                	ld	a1,120(a0)
    800060c2:	6150                	ld	a2,128(a0)
    800060c4:	6554                	ld	a3,136(a0)
    800060c6:	6958                	ld	a4,144(a0)
    800060c8:	6d5c                	ld	a5,152(a0)
    800060ca:	0a053803          	ld	a6,160(a0)
    800060ce:	0a853883          	ld	a7,168(a0)
    800060d2:	0b053903          	ld	s2,176(a0)
    800060d6:	0b853983          	ld	s3,184(a0)
    800060da:	0c053a03          	ld	s4,192(a0)
    800060de:	0c853a83          	ld	s5,200(a0)
    800060e2:	0d053b03          	ld	s6,208(a0)
    800060e6:	0d853b83          	ld	s7,216(a0)
    800060ea:	0e053c03          	ld	s8,224(a0)
    800060ee:	0e853c83          	ld	s9,232(a0)
    800060f2:	0f053d03          	ld	s10,240(a0)
    800060f6:	0f853d83          	ld	s11,248(a0)
    800060fa:	10053e03          	ld	t3,256(a0)
    800060fe:	10853e83          	ld	t4,264(a0)
    80006102:	11053f03          	ld	t5,272(a0)
    80006106:	11853f83          	ld	t6,280(a0)
    8000610a:	14051573          	csrrw	a0,sscratch,a0
    8000610e:	10200073          	sret
