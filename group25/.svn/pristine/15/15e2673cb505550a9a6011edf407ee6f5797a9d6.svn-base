# Tong Wang tow087 11201222

#  NAME: Xudong Li
#  NSID:xul395
#  Student Number:11206927
#  group25

Current status:
PartA1 code is finished, 
Though PartA2 is not required, I think it is finished and please give me some feedback.
PartA3 and PartA4 only have some basic functions

At first, This part we have 4 different version(A1 and A2 are mandatory, 
A3 and A4 are bonus). 
As a result, we should have a "square" function and it should work with all 
4 version of partA. 
This function is a recursion function, which will return the square of its argument. 
Besides that, we should get the current thread id, utilize the threadInfo 
pointer to update the square count. Square function should looks like that:
int Square(int number){
    details
    
}

In order to get the current count id in square function, 
we should have a "getID" function.
This function is different for differnt parts It should looks like
that:
int GetID(){
    details
}
Also, we have 3 parameters for each version. They are number of 
children "childrenNumber", sleep time "deadLine" and how many sizes 
we calculate in square function "sizeNumber".
We should check the arguments are integer or not
and the arguments are 3 or not in every version 
Above are the general things for all 4 version of partA.

PartA1: 
we want to run in Windows system and we should initialize 
a boolean golbal variable named keepRunning as TRUE to let 
program keep running. 
We also need hava a struct thread_info to include all thread information
struct thread_info {
    DWORD threadid;
	int thread_count
    int size_Number
    void *thread; /* point to arch specific thread info */
}
We have three arguments, childrenNumber, deadLine and sizeNumber.
Write a loop which will execute childrenNumber times to 
create childrenNumber child.
childrenNumber is the first argument and how many child thread we have to create. 
which represents the number of child threads.
We need to use the CreateThread() function to create 
a child thread each time the loop executed. 
CreateThread() has six parameter.
CreateThread(default security attributes,
	     default stack size,
	     thread function named ThreadFunction() which contains square(),
	     argument to thread function the size n let square() calculate,
	     creation flags
	     return thread identifier)
After that we should use threadSleep() function let parent thread sleep.
Its sleep time should be the second of main deadLine.
If the parent suspend time over (deadline) before all children completed, 
the program will assign keepRunning false, and then suspend children threads. 
Otherwise children threads will keep running until they are completed.
No matter whether they are completed, they will provide the information: 
	1. When the child thread began
    2. When the child thread finished
	3. how many times the square() procedure are called from the start 
        (finish the calculation or be interrupted due to deadline)
As a result, inside the thread function ThreadFunction(), we should use
GetSystemTime() and Square() to calculate the infofmation we need to provide
Also we need have a countSquare to count how many times for the square running

Currently, A1 is finished and you could check partAtestplan and partAtestresult
to see the how I test the A1 part and the test results.

PartA2:
Firstly, The thread calls synatx are different from PartA1.
Secondly, if the timer expires before children threads are finished,
we don't needto check keepRunning variable like PartA1, once the parent 
thread wakes, it will kill all running child threads. 
Thirdly, we should define a struct of thread infomation to 
store count number of thread, the identifier of thrad,the size number need to 
tell square function, the start time and running flag(it's little 
different to A1 because we don't have global varibale to 
check the thread is running or not)
struct UBCpthread_threadInfo
{
    int threadCount;
    int threadID;
    int sizeNumber;
    long startTime;
}
Fourthly, we need two thread function: UBCpthreadFunction() as child,
UBCparent() as parent. Inside the UBCpthreadFunction we could calculate 
the time spent and print information if the thread is in running status.
Its details inside the function is very similar to partA1's thread function.
At beginning declare varibale timestamp, i for for loop using, 
ubcpthread struct, thread_id, thread_count thead_id is the id of thread
and use Time() function to store the begin time. Then set running
flag equals 1 and use for loop to call square function. After calling
square function store end time. Last part is printing all information.
For UBCparent() function, we have to use Kill() function to kill all children
thread after sleep time.We should calculate the spent time for the children 
threads which are killed by kill function. 

Other than these three parts, the design is very similar to PartA1.

PartA3
It's very similar to A2, but we don't need the running flag,
thread_cancel can return error while there are no children to kill.
That is same to have a running flag.

PartA4
It is involving process, child notify parent by signal when time passed
or child thread finished. As a result, we should implement a SIGALRM handler
for child process. When tiem expires, parent send signals to all children.
Then print the information like square result and 
elapsed real time since the child began.
The new thing in that part is to svae child pid and then use the
time process send the SIGALRM signal to parent and children


These design is not the final version, it need to be updated in the future. 
Espically for the PartA3 and PartA4
