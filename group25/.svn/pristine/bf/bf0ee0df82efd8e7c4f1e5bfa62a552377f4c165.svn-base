/* NAME: Xudong Li
   NSID:xul395
   Student Number:11206927
*/

/* NAME:Tong Wang   
   NSID: tow087 
   Student Number: 11201222
   CMPT 332 Term 1 2019
*/

#include <stdio.h>
#include <stdlib.h>
#include "list.h"

LIST *lpool = NULL;
NODE *npool = NULL;




/* add the Item after the current item of the list */
int ListAdd(LIST *list, Item item)
{	
	printf("Got to procedure ListAdd \n");
	
	/* list and current pointer cannot be NULL*/
	if(list == NULL){
		printf("Error in ListAdd : invalid parameter list = NULL \n");
	}
	if(npool == NULL){
		printf("Error in ListAdd : node pool is empty \n");
	}	
	if(list -> current == NULL){
		for(int i=0;i<NODEMAXIMUM;i++){
			if(!npool[i].used){
				npool[i] = (NODE){item,NULL,NULL,1};
				list -> current = &npool[i];
				return 0;
			}
		}					
	}else{
		for(int i=0;i<NODEMAXIMUM;i++){
			if(!npool[i].used){
				NODE* curr = list -> current;
				NODE* temp = curr -> next;
				npool[i] = (NODE){item,temp,curr,1};
				curr -> next = &npool[i];
				temp -> prev = &npool[i];
				list -> current = &npool[i];
				return 0;
			}
		}	
	}
	
	return -1;
}

/*create a new list and return its pointer*/
LIST *ListCreate()
{
	printf("Got to procedure ListCreate \n");
	if(lpool == NULL){
		lpool = (LIST *)calloc(LISTMAXIMUM,sizeof(LIST));
		if(lpool==NULL){
			return NULL;
		}
	}
	if(npool == NULL){
		npool = (NODE *)calloc(LISTMAXIMUM,sizeof(NODE));
		if(npool==NULL){
			return NULL;
		}
	}	
	/*new empty list created*/
	for(int i = 0;i<LISTMAXIMUM;i++){
		if(!lpool[i].used){
			lpool[i] = (LIST){0,NULL,NULL,NULL,1};
			return &lpool[i];
		}
	}
	return NULL;
}

/* add the Item before the current item of the list*/
int ListInsert(LIST *list, Item item)
{	
	/* list and current pointer cannot be NULL*/

	printf("Got to procedure ListInsert \n");
	if(list == NULL){
		printf("Error in ListInsert : invalid parameter list = NULL \n");
		return -1;
	}
	else if(list -> current == NULL){
		printf("Error in procedure ListInsert: current item in list is Null \n");
		return -1;
	}
	if(npool == NULL){
		printf("Error in ListAdd : node pool is empty \n");
	}
	

	return 0;
}

/*adds item to the end of list*/
int ListAppend(LIST *list, Item item)
{
	printf("Got to procedure ListAppend \n");
	
	/* list pointer can not be NULL*/
	if(list == NULL){
		printf("Error in ListAppend : invalid parameter list = NULL \n");
		return -1;
	}
	if(npool == NULL){
		printf("Error in ListAdd : node pool is empty \n");
		return -1;
	}
	return 0;
}

/*adds item to the front of list*/
int ListPrepend(LIST *list, Item item)
{
	printf("Got to procedure ListPrepend \n");
	/* list pointer can not be NULL*/
	if(list == NULL){
		printf("Error in ListPrepend : invalid parameter list = NULL \n");
		return -1;
	}
	if(npool == NULL){
		printf("Error in ListAdd : node pool is empty \n");
		return -1;
	}	

	return 0;
}

/*adds list2 to the end of list1*/
void ListConcat(LIST *list1,LIST *list2)
{
	printf("Got to procedure ListConcat \n");
	
	/* both lists' pointer can not be NULL*/
	if(list1 == NULL || list2 == NULL){
		printf("Error in ListConcat : invalid parameter list = NULL \n");
	}
}
