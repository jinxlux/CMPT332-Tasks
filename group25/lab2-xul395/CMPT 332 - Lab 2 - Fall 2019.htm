
<!-- saved from url=(0126)https://bblearn.usask.ca/bbcswebdav/pid-2678868-dt-content-rid-13314240_2/courses/80038.201909/Labs/CMPT332-Lab2-Fall2019.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>CMPT 332 - Lab 2 - Fall 2019</title>
</head>
<body>
<img src="./CMPT 332 - Lab 2 - Fall 2019_files/splashBanner.gif" align="middle">
<h1>
    Computer Science 332 - Fall 2019<br>
    University of Saskatchewan<br>
    Lab 2: More Details on Makefiles, xv6, and Group Management Skills<br>
</h1>

<b>Instructor:</b> Dwight Makaroff <br>
<b>Out: </b>September 16, 2019<br>
<b>Due:</b>At the end of the tutorial (actually by 9:00 p.m. on
   Thursday, September 19th, 2019, final deadline). <br>
<b>TOTAL MARKS: 6</b>

<h2 id="preface">Preface</h2>
<p> You will to use a Linux lab machine and a Windows lab machine to
    complete this lab. When you are on a Windows machines, we will use
    the mingw terminal and the Git Bash shell. 
This lab also assumes you are using <code>bash</code>.</p>

<h2>Lab Description</h2>
<h3 id="grpMgmt">Group Management Skills</h3>
<p> The truth is not many students like group work, however, in industry you're
    guaranteed to be working on a team, thus it is an extremely valuable skill
    to have that employers look for. </p>
<p> When working in a group it's important to set clear expectations with your
    partner of what you both want to get out of the course. It is often
    recommended that you have scheduled a regular meeting time (yes, even for
    groups of two) as this can help you sync with your partner and talk about
    progress/procrastination that has been made.
    <i>The above is not required of you but it will help you succeed in
    communicating with your partner, who you may or may not have previously been
    acquainted, for this class and any future group work.</i>
</p>
<p> Dividing work for multiple people is a skill that takes practice and is
    often aided with the use of a task board. There are many programs out there
    that you can use as a task board, I'd recommend
    <a href="https://bubbl.us/">bubbl</a>, or something similar. Bubbl allows you
    to create tasks that can be completed in parallel along with mapping task
    dependencies, <i>task b requires the function from task a to completed
    beforehand</i>. See <code>Chat.png</code> as an example.
    In your case, the Design Document you will have to create will be
    helpful when assigning work.
</p>
<p> Create a simple task tree with a minimum of two tasks that can be done in
    parallel where each of those nodes has at least two children. This doesn't
    have to be limited to computer science jobs, it can be something like
    cleaning the house, baking, yard work, etc. Download it as a PNG file and
    save it as <code>tasks.png</code>. </p>

<h2 id="xv6"><code>xv6</code></h2>
<p>Steps to install and run xv6:</p>
<ul>
    <li>Copy <code>/student/cmpt332/xv6/xv6-riscv.tar</code> to a location of your
        preference, and untar it,</li>
    <li><code>cd</code> to your local copy of xv6,</li>
    <li><code>make qemu</code> will run xv6 in qemu,<br>
    </li><li><code>ctrl+a</code> release, then press <code>x</code> to exit from xv6,
         in otherwords: <code>(ctrl+a)+x</code>.
</li></ul>
<p> For more information see <code>/student/cmpt332/xv6/XV6-intro.txt</code></p>
<p> Take a screenshot and save it as <code>xv6-qemu.png</code>.</p>

<h3 id="make">Make, Continued</h3>
<p> There is 1 source file provided, <code>app.c</code>. <b> Do not edit this
    file. </b> You should also have the files from Lab 1.</p>
<p> You will add to your makefile you created in Lab 1 to compile</p>
<ul>
    <li><code>app.c</code> for Linux</li>
</ul>
<p> Compiling <code>app.c</code> will require you to include a library call
    UBC PThreads, the header files for it are in directory
    <code>/student/cmpt332/pthreads</code>.</p>
<p> Then it should it should link as follows: </p>
<ul>
    <li><code>app.o</code> to a
        <code>app</code> executable </li>
</ul>
<p> When you're on a Linux system you only want to compile and link the Linux
    files, you can detect this with uname. Linking against UBC PThreads will
    also need the loader to look inside the operating system and machine
    architecture specific subdirectory of
    <code>/student/cmpt332/pthreads/lib</code>. The names of these subdirectories
    are generated by <code>uname -s</code> and <code>uname -m</code> combined.
    The name of the library is <code>libpthreads.a</code></p>

<h2 id="org"><code>Directory Organization</code></h2>
<p> The files your Makefile produces could be organized into separate folders
    based on their architecture. As easy way to do this is have everything
    starting in a <code>build</code> build directory then have
    <code>build/obj/ARCH</code>, <code>build/lib/ARCH</code>, <code>build/bin/ARCH</code>.
    This way when you clean with your Makefile you can just remove the build directory. </p>

<h2 id="cc"><code>Cross-Compiling</code></h2>
<p> Cross compiling allows you to create executable files for an architecture
    that isn't the one you're currently using. This section of the lab we are
    focusing on creating the sample-linux executable we compiled in Lab 1, but
    for a Raspberry Pi which is ARM architecture. To do this: </p>
    <ul>
        <li> Create a new rule specifically for cross compiling for the RPi </li>
        <li> Use a new variable <code>CROSS_COMPILE=arm-linux-gnueabi-</code></li>
        <li> <code>sample-raspi.o</code> for ARM architecture from <code>sample-linux.c</code></li>
        <li> <code>raspi-lib.o</code> from <code>linux-lib.c</code>
        </li><li> <code>raspi-lib.o</code> into a library <code>.a</code> file
        </li><li> Create a <code>raspi-sample</code> executable from
             <code>sample-raspi.o</code> and the library</li>
<!--        <li> <code>scp NSID@raspi1.usask.ca</code> be sure to specify directory</li>
-->

    </ul>
<p> </p>

<h2 id="dd"><code>Documentation</code></h2>
<p> Writing good documentation is a difficult, but important, skill to develop.
    In the following section, you will be given a short modified snippet of
    make's documentation (make-document.html) Your task is to read
    through the following text, and     write two-three sentences
    about what you like, and don't like. What's clear? 
    Is anything unfairly assumed? Save your write up in comments.txt.</p>

<h2>Deliverables</h2>

<p> A single tar file containing your <code>Makefile</code>,
    <code>xv6-qemu.png</code>, <code>tasks.png</code>, <code>comments.tx</code>
    and <code>svn-log.txt</code>. </p> 

<h2>Submission</h2>

Create a .tar file with the 4 files in the next section it (no directories) and
submit to Lab 2.

<h2>Grading Scheme</h2>

<ul>
    <li><code>tasks.png</code>: 1 mark </li>
    <li><code>xv6-qemu.png</code>: 1 mark </li>
    <li><code>Makefile</code>: 2 marks </li>
    <ul>
        <li> <code>UBC pthreads</code>: 1 mark</li>
        <li> <code>cross-compiling</code>: 1 mark</li>
    </ul>
    <li><code>comments.txt</code> 1 mark</li>
    <li><code>svn-log.txt</code>: 1 mark</li>
<ul>
</ul></ul>
</body></html>